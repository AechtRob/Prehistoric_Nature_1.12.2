package net.lepidodendron;

import com.google.common.collect.Lists;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.common.config.Property;
import net.minecraftforge.fml.client.event.ConfigChangedEvent.OnConfigChangedEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.util.List;

public class LepidodendronConfig {
    public static Configuration cfg;
    public static LepidodendronConfig instance = new LepidodendronConfig();
    public static String[] genGlobalBlacklist = new String[0];
    public static String[] genLogResin = new String[]{"minecraft:log:1", "lepidodendron:hymenaea_log", "lepidodendron:agathis_log", "lepidodendron:araucarioxylon_log", "lepidodendron:bunya_log", "lepidodendron:columnaris_log", "lepidodendron:monkeypuzzle_log", "lepidodendron:sciadopitys_log", "lepidodendron:wollemi_log", "biomesoplenty:log_2:6", "biomesoplenty:log_0:7", "jurassicraft:araucaria_log", "wildnature:cedar_log", "wildnature:fir_log", "wildnature:pine_log"};
    public static String[] genPlantPrehistoric = new String[]{"fossil:bennettitales_large", "fossil:bennettitales_small", "fossil:calamites_leaves", "fossil:calamites_sapling", "fossil:cordaites_leaves", "fossil:cordaites_sapling", "fossil:crataegus", "fossil:cyathea", "fossil:dictyophyllum", "fossil:dillhoffia_flower", "fossil:dipteris", "fossil:duisbergia", "fossil:ependra", "fossil:fern_block", "fossil:florissantia", "fossil:foozia", "fossil:fossil_sapling_calamites", "fossil:fossil_sapling_cordaites", "fossil:fossil_sapling_palae", "fossil:fossil_sapling_sigillaria", "fossil:horsetail_small", "fossil:licopodiophyta", "fossil:osmunda", "fossil:palm_leaves", "fossil:palm_sapling", "fossil:sagenopteris", "fossil:sarracenia", "fossil:sigillaria_leaves", "fossil:sigillaria_sapling", "fossil:tempskya", "fossil:vaccinium", "fossil:welwitschia", "fossil:zamites", "jurassicraft:ajuginucula_smithii", "jurassicraft:ajuginucula_smithii_leaves", "jurassicraft:araucaria_leaves", "jurassicraft:araucaria_sapling", "jurassicraft:bennettitalean_cycadeoidea", "jurassicraft:bristle_fern", "jurassicraft:calamites_leaves", "jurassicraft:calamites_sapling", "jurassicraft:cinnamon_fern", "jurassicraft:cry_pansy", "jurassicraft:cycad_zamites", "jurassicraft:dicksonia", "jurassicraft:dicroidium_zuberi", "jurassicraft:dictyophyllum", "jurassicraft:encephalartos", "jurassicraft:ginkgo_leaves", "jurassicraft:ginkgo_sapling", "jurassicraft:gracilaria_seaweed", "jurassicraft:graminidites_bambusoides", "jurassicraft:heliconia", "jurassicraft:ladinia_simplex", "jurassicraft:moss", "jurassicraft:orontium_mackii", "jurassicraft:paleo_bale_cycad", "jurassicraft:paleo_bale_cycadeoidea", "jurassicraft:paleo_bale_fern", "jurassicraft:paleo_bale_leaves", "jurassicraft:paleo_bale_other", "jurassicraft:phoenix_leaves", "jurassicraft:phoenix_sapling", "jurassicraft:psaronius_leaves", "jurassicraft:psaronius_sapling", "jurassicraft:raphaelia", "jurassicraft:rhacophyton", "jurassicraft:rhamnus_salicifolius", "jurassicraft:scaly_tree_fern", "jurassicraft:serenna_veriformans", "jurassicraft:small_chain_fern", "jurassicraft:small_cycad", "jurassicraft:small_royal_fern", "jurassicraft:tempskya", "jurassicraft:umaltolepis", "jurassicraft:west_indian_lilac", "jurassicraft:woolly_stalked_begonia", "rebornmod:ajuginucula_smithii", "rebornmod:ajuginucula_smithii_leaves", "rebornmod:araucaria_leaves", "rebornmod:araucaria_sapling", "rebornmod:bennettitalean_cycadeoidea", "rebornmod:bristle_fern", "rebornmod:calamites_leaves", "rebornmod:calamites_sapling", "rebornmod:cinnamon_fern", "rebornmod:cry_pansy", "rebornmod:cycad_zamites", "rebornmod:dicksonia", "rebornmod:dicroidium_zuberi", "rebornmod:dictyophyllum", "rebornmod:encephalartos", "rebornmod:ginkgo_leaves", "rebornmod:ginkgo_sapling", "rebornmod:gracilaria_seaweed", "rebornmod:graminidites_bambusoides", "rebornmod:heliconia", "rebornmod:ladinia_simplex", "rebornmod:moss", "rebornmod:orontium_mackii", "rebornmod:paleo_bale_cycad", "rebornmod:paleo_bale_cycadeoidea", "rebornmod:paleo_bale_fern", "rebornmod:paleo_bale_leaves", "rebornmod:paleo_bale_other", "rebornmod:phoenix_leaves", "rebornmod:phoenix_sapling", "rebornmod:psaronius_leaves", "rebornmod:psaronius_sapling", "rebornmod:raphaelia", "rebornmod:rhacophyton", "rebornmod:rhamnus_salicifolius", "rebornmod:scaly_tree_fern", "rebornmod:serenna_veriformans", "rebornmod:small_chain_fern", "rebornmod:small_cycad", "rebornmod:small_royal_fern", "rebornmod:tempskya", "rebornmod:umaltolepis", "rebornmod:west_indian_lilac", "rebornmod:woolly_stalked_begonia"};
    public static int waterSandHorizontal = 6;
    public static int waterSandVertical = 0;
    public static int waterPangaeanHorizontal = 3;
    public static int waterPangaeanVertical = 0;

    public static boolean genFossil = true;
    public static boolean modFire = true;
    public static int genPalaeobotanist = 50;
    public static boolean renderAnimations = true;

    public static boolean doFog = true;
    public static boolean fixZirconGlass = true;

    public static int attackHealth = 90;
    public static int adultAge = 75;
    public static boolean attackPlayerAlways = false;
    public static boolean doLowRes = false;
    
    public static int radiusBacterialCrust = 6;
    public static int radiusLichen = 2;

    public static double dimDimensionScaler = 10D;

    public static int dimPrecambrian = -78;
    public static int dimCambrian = -79;
    public static int dimOrdovicianSilurian = -80;
    public static int dimDevonian = -81;
    public static int dimCarboniferous = -82;
    public static int dimPermian = -83;
    public static int dimTriassic = -84;
    public static int dimJurassic = -85;

    public static boolean doSpawnsPrehistoricFloraDefault = true;
    public static boolean doSpawnsFossilsArcheology = false;
    public static boolean doSpawnsReborn = false;

    public static boolean doMultiplyMobs = false;

    public static String[] dimPrecambrianMobsBespoke = new String[0];
    public static String[] dimCambrianMobsBespoke = new String[0];
    public static String[] dimOrdovicianSilurianMobsLandBespoke = new String[0];
    public static String[] dimOrdovicianSilurianMobsOceanBespoke = new String[0];
    public static String[] dimOrdovicianSilurianMobsOceanIceBespoke = new String[0];
    public static String[] dimDevonianMobsForestBespoke = new String[0];
    public static String[] dimDevonianMobsOceanBespoke = new String[0];
    public static String[] dimCarboniferousMobsSwampBespoke = new String[0];
    public static String[] dimCarboniferousMobsOceanBespoke = new String[0];
    public static String[] dimCarboniferousMobsIceBespoke = new String[0];
    public static String[] dimPermianMobsGlossopterisBespoke = new String[0];
    public static String[] dimPermianMobsWetlandsBespoke = new String[0];
    public static String[] dimPermianMobsOceanBespoke = new String[0];
    public static String[] dimPermianMobsRiverBespoke = new String[0];
    public static String[] dimPermianMobsAridLandsBespoke = new String[0];
    public static String[] dimPermianMobsLowlandsBespoke = new String[0];
    public static String[] dimPermianMobsLowlandForestBespoke = new String[0];
    public static String[] dimPermianMobsFloodbasaltBespoke = new String[0];
    public static String[] dimPermianMobsHighlandsBespoke = new String[0];
    public static String[] dimPermianMobsDesertBespoke = new String[0];
    public static String[] dimPermianMobsMountainsBespoke = new String[0];

    public static String[] dimCambrianMobsPF = new String[]{"lepidodendron:prehistoric_flora_acadoaradoxides:3:20:3","lepidodendron:prehistoric_flora_alacaris:3:20:3","lepidodendron:prehistoric_flora_amplectobelua:1:20:2","lepidodendron:prehistoric_flora_anomalocaris:1:20:2","lepidodendron:prehistoric_flora_banffia:5:20:3","lepidodendron:prehistoric_flora_batofasciculus:1:20:3","lepidodendron:prehistoric_flora_bushizheia:3:20:3","lepidodendron:prehistoric_flora_cambroraster:3:20:3","lepidodendron:prehistoric_flora_canadaspis:3:20:3","lepidodendron:prehistoric_flora_diania:3:20:2","lepidodendron:prehistoric_flora_ellipsocephalus:3:20:3","lepidodendron:prehistoric_flora_elrathia:3:20:3","lepidodendron:prehistoric_flora_eoredlichia:3:20:3","lepidodendron:prehistoric_flora_gemmactena:3:20:3","lepidodendron:prehistoric_flora_hallucigenia:3:20:2","lepidodendron:prehistoric_flora_jianshanopodia:3:20:2","lepidodendron:prehistoric_flora_kerygmachela:3:20:2","lepidodendron:prehistoric_flora_kodymirus:3:20:2","lepidodendron:prehistoric_flora_laminacaris:1:20:2","lepidodendron:prehistoric_flora_lyrarapax:3:20:2","lepidodendron:prehistoric_flora_marrella:8:20:2","lepidodendron:prehistoric_flora_metaspriggina:8:20:3","lepidodendron:prehistoric_flora_microdictyon:3:20:2","lepidodendron:prehistoric_flora_nectocaris:6:20:3","lepidodendron:prehistoric_flora_odaraia:3:20:3","lepidodendron:prehistoric_flora_odontogriphus:3:20:2","lepidodendron:prehistoric_flora_omnidens:1:16:2","lepidodendron:prehistoric_flora_opabinia:2:20:3","lepidodendron:prehistoric_flora_ottoia:2:20:2","lepidodendron:prehistoric_flora_palaeojelly1:1:20:2","lepidodendron:prehistoric_flora_palaeojelly2:1:20:2","lepidodendron:prehistoric_flora_palaeojelly3:1:20:2","lepidodendron:prehistoric_flora_palaeojelly4:1:20:3","lepidodendron:prehistoric_flora_paradoxides:3:20:3","lepidodendron:prehistoric_flora_paucipodia:3:20:2","lepidodendron:prehistoric_flora_phantaspis:3:20:3","lepidodendron:prehistoric_flora_pikaia:8:20:3","lepidodendron:prehistoric_flora_pomatrum:8:20:3","lepidodendron:prehistoric_flora_siberion:3:20:2","lepidodendron:prehistoric_flora_sidneyia:3:20:3","lepidodendron:prehistoric_flora_synophalos{chain:8}:16:20:2","lepidodendron:prehistoric_flora_tegopelte:3:20:3","lepidodendron:prehistoric_flora_tokummia:3:20:3","lepidodendron:prehistoric_flora_wiwaxia:6:20:3","lepidodendron:prehistoric_flora_xenusion:3:20:2","lepidodendron:prehistoric_flora_yawunik:6:20:3","lepidodendron:prehistoric_flora_yohoia:8:20:3","lepidodendron:prehistoric_flora_yunnanozoon:8:20:3"};

    public static String[] dimPrecambrianMobsPF = new String[]{"lepidodendron:prehistoric_flora_jellyfish_precambrian:8:28","lepidodendron:prehistoric_flora_dickinsonia:2:42","lepidodendron:prehistoric_flora_kimberella:3:48","lepidodendron:prehistoric_flora_eoandromeda:10:40","lepidodendron:prehistoric_flora_parvancorina:3:50","lepidodendron:prehistoric_flora_spriggina:3:50","lepidodendron:prehistoric_flora_yilingia:2:55","lepidodendron:prehistoric_flora_yorgia:3:50"};

    public static String[] dimCarboniferousMobsSwampPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:8:36:3","lepidodendron:prehistoric_flora_acrolepis:1:18:3","lepidodendron:prehistoric_flora_amphibamus:2:36:3","lepidodendron:prehistoric_flora_anthracomedusa:2:20:3","lepidodendron:prehistoric_flora_archoblattina:5:4:1","lepidodendron:prehistoric_flora_bandringa:1:9:3","lepidodendron:prehistoric_flora_gerarus:2:7:1","lepidodendron:prehistoric_flora_hibbertopterus:1:14:3","lepidodendron:prehistoric_flora_hylonomus:2:24:1","lepidodendron:prehistoric_flora_limnoscelis:1:26:3","lepidodendron:prehistoric_flora_megalocephalus:1:18:3","lepidodendron:prehistoric_flora_megarachne:2:14:3","lepidodendron:prehistoric_flora_ophiacodon:1:16:1","lepidodendron:prehistoric_flora_palaeodictyoptera_delitzschala:2:6:1","lepidodendron:prehistoric_flora_palaeodictyoptera_homaloneura:2:6:1","lepidodendron:prehistoric_flora_palaeodictyoptera_homoioptera:2:6:1","lepidodendron:prehistoric_flora_palaeodictyoptera_lithomantis:2:6:1","lepidodendron:prehistoric_flora_palaeodictyoptera_lycocercus:2:6:1","lepidodendron:prehistoric_flora_palaeodictyoptera_sinodunbaria:2:6:1","lepidodendron:prehistoric_flora_palaeodictyoptera_stenodictya:2:6:1","lepidodendron:prehistoric_flora_pederpes:3:28:3","lepidodendron:prehistoric_flora_pholiderpeton:1:2:3","lepidodendron:prehistoric_flora_platysomus:2:16:3","lepidodendron:prehistoric_flora_proterogyrinus:2:16:3","lepidodendron:prehistoric_flora_remigiomontanus:3:11:1","lepidodendron:prehistoric_flora_rhizodus:1:16:3","lepidodendron:prehistoric_flora_roachoid_swamp:5:4:1","lepidodendron:prehistoric_flora_scorpion_gigantoscorpio:1:20:1","lepidodendron:prehistoric_flora_scorpion_opsieobuthus:1:20:1","lepidodendron:prehistoric_flora_scorpion_pulmonoscorpius:1:20:1","lepidodendron:prehistoric_flora_spathicephalus:1:18:3","lepidodendron:prehistoric_flora_sphenacodon:1:12:1","lepidodendron:prehistoric_flora_trigonotarbid_cryptomartus:2:30:1","lepidodendron:prehistoric_flora_trigonotarbid_eophrynus:2:30:1","lepidodendron:prehistoric_flora_trigonotarbid_kreischeria:2:30:1","lepidodendron:prehistoric_flora_tullimonstrum:1:14:3","lepidodendron:prehistoric_flora_xenacanthus:1:14:3"};
    public static String[] dimCarboniferousMobsOceanPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:50:2","lepidodendron:prehistoric_flora_acanthodes:4:50:3","lepidodendron:prehistoric_flora_acrolepis:1:6:2","lepidodendron:prehistoric_flora_acrolepis:1:6:3","lepidodendron:prehistoric_flora_akmonistion:2:16:2","lepidodendron:prehistoric_flora_akmonistion:2:16:3","lepidodendron:prehistoric_flora_ammonite_goniatites:2:30:2","lepidodendron:prehistoric_flora_ammonite_goniatites:2:30:3","lepidodendron:prehistoric_flora_anthracomedusa:1:20:3","lepidodendron:prehistoric_flora_bandringa:3:18:3","lepidodendron:prehistoric_flora_belantsea:2:30:3","lepidodendron:prehistoric_flora_belantsea:2:30:2","lepidodendron:prehistoric_flora_dracopristis:1:16:2","lepidodendron:prehistoric_flora_edestus:2:2:2","lepidodendron:prehistoric_flora_edestus:2:2:3","lepidodendron:prehistoric_flora_gyracanthides:3:8:2","lepidodendron:prehistoric_flora_gyracanthides:3:8:3","lepidodendron:prehistoric_flora_iniopteryx:6:22:3","lepidodendron:prehistoric_flora_janassa:8:20:3","lepidodendron:prehistoric_flora_jellyfish1:1:3:3","lepidodendron:prehistoric_flora_jellyfish1:1:3:2","lepidodendron:prehistoric_flora_jellyfish2:1:3:3","lepidodendron:prehistoric_flora_jellyfish2:1:3:2","lepidodendron:prehistoric_flora_jellyfish3:1:3:3","lepidodendron:prehistoric_flora_jellyfish3:1:3:2","lepidodendron:prehistoric_flora_jellyfish4:1:3:3","lepidodendron:prehistoric_flora_jellyfish4:1:3:2","lepidodendron:prehistoric_flora_jellyfish5:1:3:3","lepidodendron:prehistoric_flora_jellyfish5:1:3:2","lepidodendron:prehistoric_flora_jellyfish6:1:3:3","lepidodendron:prehistoric_flora_jellyfish6:1:3:2","lepidodendron:prehistoric_flora_jellyfish7:1:3:3","lepidodendron:prehistoric_flora_jellyfish7:1:3:2","lepidodendron:prehistoric_flora_listracanthus:2:10:2","lepidodendron:prehistoric_flora_mooreoceras:2:12:2","lepidodendron:prehistoric_flora_phanerotinus:2:16:3","lepidodendron:prehistoric_flora_phanerotinus:2:16:2","lepidodendron:prehistoric_flora_platysomus:9:16:3","lepidodendron:prehistoric_flora_platysomus:9:16:2","lepidodendron:prehistoric_flora_rayonnoceras:2:10:2","lepidodendron:prehistoric_flora_saivodus:2:2:2","lepidodendron:prehistoric_flora_squatinactis:2:18:3","lepidodendron:prehistoric_flora_traquairius:3:40:2","lepidodendron:prehistoric_flora_traquairius:3:40:3","lepidodendron:prehistoric_flora_vestinautilus:4:36:2","lepidodendron:prehistoric_flora_vestinautilus:4:36:3"};
    public static String[] dimCarboniferousMobsIcePF = new String[0];

    public static String[] dimDevonianMobsForestPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:25:3","lepidodendron:prehistoric_flora_acanthostega:3:16:3","lepidodendron:prehistoric_flora_attercopus:2:15:1","lepidodendron:prehistoric_flora_bothriolepis:3:10:3","lepidodendron:prehistoric_flora_cephalaspis:3:16:3","lepidodendron:prehistoric_flora_eoarthropleura:2:20:1","lepidodendron:prehistoric_flora_eusthenopteron:2:9:3","lepidodendron:prehistoric_flora_hemicyclaspis:3:16:3","lepidodendron:prehistoric_flora_heterosteus:1:3:3","lepidodendron:prehistoric_flora_heterosteus{AgeTicks:0}:1:3:3","lepidodendron:prehistoric_flora_hibbertopterus:1:7:3","lepidodendron:prehistoric_flora_hyneria:1:5:3","lepidodendron:prehistoric_flora_ichthyostega:2:15:3","lepidodendron:prehistoric_flora_pagea:2:4:3","lepidodendron:prehistoric_flora_panderichthys:3:13:3","lepidodendron:prehistoric_flora_pneumodesmus:2:20:1","lepidodendron:prehistoric_flora_pteraspis:4:12:3","lepidodendron:prehistoric_flora_scorpion_gondwanascorpio:2:10:1","lepidodendron:prehistoric_flora_trigonotarbid_palaeocharinus:2:10:1","lepidodendron:prehistoric_flora_xenacanthus:1:8:3"};
    public static String[] dimDevonianMobsOceanPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:50:3","lepidodendron:prehistoric_flora_acanthodes:4:50:2","lepidodendron:prehistoric_flora_acutiramus:1:8:3","lepidodendron:prehistoric_flora_acutiramus:1:8:2","lepidodendron:prehistoric_flora_ammonite_goniatites:2:24:3","lepidodendron:prehistoric_flora_ammonite_goniatites:2:24:2","lepidodendron:prehistoric_flora_ammonite_manticoceras:2:24:2","lepidodendron:prehistoric_flora_ammonite_manticoceras:2:24:3","lepidodendron:prehistoric_flora_ateleaspis:3:12:3","lepidodendron:prehistoric_flora_basiloceras:2:30:2","lepidodendron:prehistoric_flora_basiloceras:2:30:3","lepidodendron:prehistoric_flora_bothriolepis:3:20:3","lepidodendron:prehistoric_flora_campbellodus:1:20:3","lepidodendron:prehistoric_flora_cephalaspis:5:32:3","lepidodendron:prehistoric_flora_cheirurus:3:34:3","lepidodendron:prehistoric_flora_cheirurus:3:34:2","lepidodendron:prehistoric_flora_cheloniellon:4:36:3","lepidodendron:prehistoric_flora_cheloniellon:4:36:2","lepidodendron:prehistoric_flora_cladoselache:1:16:2","lepidodendron:prehistoric_flora_coccosteus:3:22:3","lepidodendron:prehistoric_flora_crotalocephalus:3:36:3","lepidodendron:prehistoric_flora_crotalocephalus:3:36:2","lepidodendron:prehistoric_flora_cyrtoceras:1:36:3","lepidodendron:prehistoric_flora_cyrtoceras:1:36:2","lepidodendron:prehistoric_flora_dalmanites:3:36:3","lepidodendron:prehistoric_flora_dalmanites:3:36:2","lepidodendron:prehistoric_flora_deiroceras:2:10:2","lepidodendron:prehistoric_flora_drepanaspis:2:20:3","lepidodendron:prehistoric_flora_dunkleosteus:1:2:2","lepidodendron:prehistoric_flora_dunkleosteus{AgeTicks:0}:1:2:3","lepidodendron:prehistoric_flora_eglonaspis:3:22:3","lepidodendron:prehistoric_flora_eusthenopteron:2:18:3","lepidodendron:prehistoric_flora_eusthenopteron:2:18:2","lepidodendron:prehistoric_flora_furcacauda:8:14:2","lepidodendron:prehistoric_flora_furcacauda:8:14:3","lepidodendron:prehistoric_flora_furcaster:2:12:3","lepidodendron:prehistoric_flora_furcaster:2:12:2","lepidodendron:prehistoric_flora_gemuendina:3:20:3","lepidodendron:prehistoric_flora_hemicyclaspis:3:26:3","lepidodendron:prehistoric_flora_hibernaspis:3:28:3","lepidodendron:prehistoric_flora_jaekelopterus:1:3:3","lepidodendron:prehistoric_flora_jaekelopterus:1:3:2","lepidodendron:prehistoric_flora_jellyfish1:1:3:3","lepidodendron:prehistoric_flora_jellyfish1:1:3:2","lepidodendron:prehistoric_flora_jellyfish2:1:3:3","lepidodendron:prehistoric_flora_jellyfish2:1:3:2","lepidodendron:prehistoric_flora_jellyfish3:1:3:3","lepidodendron:prehistoric_flora_jellyfish3:1:3:2","lepidodendron:prehistoric_flora_jellyfish4:1:3:3","lepidodendron:prehistoric_flora_jellyfish4:1:3:2","lepidodendron:prehistoric_flora_jellyfish5:1:3:3","lepidodendron:prehistoric_flora_jellyfish5:1:3:2","lepidodendron:prehistoric_flora_jellyfish6:1:3:3","lepidodendron:prehistoric_flora_jellyfish6:1:3:2","lepidodendron:prehistoric_flora_jellyfish7:1:3:3","lepidodendron:prehistoric_flora_jellyfish7:1:3:2","lepidodendron:prehistoric_flora_lunaspis:3:10:3","lepidodendron:prehistoric_flora_lungmenshanaspis:5:10:2","lepidodendron:prehistoric_flora_mimetaster:9:18:3","lepidodendron:prehistoric_flora_mimetaster:9:18:2","lepidodendron:prehistoric_flora_monograptus:3:8:2","lepidodendron:prehistoric_flora_onychodus:1:16:3","lepidodendron:prehistoric_flora_onychodus:1:16:2","lepidodendron:prehistoric_flora_palaeoisopus:3:14:3","lepidodendron:prehistoric_flora_palaeoisopus:3:14:2","lepidodendron:prehistoric_flora_parexus:4:50:2","lepidodendron:prehistoric_flora_parexus:4:50:3","lepidodendron:prehistoric_flora_phanerotinus:4:12:2","lepidodendron:prehistoric_flora_phanerotinus:4:12:3","lepidodendron:prehistoric_flora_poraspis:2:16:3","lepidodendron:prehistoric_flora_poraspis:2:16:2","lepidodendron:prehistoric_flora_psarolepis:1:40:3","lepidodendron:prehistoric_flora_psarolepis:1:40:2","lepidodendron:prehistoric_flora_pteraspis:4:24:3","lepidodendron:prehistoric_flora_pteraspis:4:24:2","lepidodendron:prehistoric_flora_pterygotus:1:8:3","lepidodendron:prehistoric_flora_pterygotus:1:8:2","lepidodendron:prehistoric_flora_schinderhannes:8:24:3","lepidodendron:prehistoric_flora_temperoceras:2:22:3","lepidodendron:prehistoric_flora_terataspis:2:30:2","lepidodendron:prehistoric_flora_terataspis:2:30:3","lepidodendron:prehistoric_flora_titanichthys:1:2:2","lepidodendron:prehistoric_flora_titanichthys{AgeTicks:0}:1:2:3","lepidodendron:prehistoric_flora_walliserops:5:36:3","lepidodendron:prehistoric_flora_walliserops:5:36:2"};

    public static String[] dimOrdovicianSilurianMobsOceanPF = new String[]{"lepidodendron:prehistoric_flora_acutiramus:1:8:3","lepidodendron:prehistoric_flora_ainiktozoon:3:24:3","lepidodendron:prehistoric_flora_aphetoceras:2:30:3","lepidodendron:prehistoric_flora_arandaspis:6:20:3","lepidodendron:prehistoric_flora_asaphus:3:44:3","lepidodendron:prehistoric_flora_ateleaspis:4:24:3","lepidodendron:prehistoric_flora_cameroceras:2:6:3","lepidodendron:prehistoric_flora_carcinosoma:1:8:3","lepidodendron:prehistoric_flora_cheirurus:2:44:3","lepidodendron:prehistoric_flora_crotalocephalus:3:20:3","lepidodendron:prehistoric_flora_cyclonema:2:20:3","lepidodendron:prehistoric_flora_cyrtoceras:2:36:3","lepidodendron:prehistoric_flora_dalmanites:3:20:3","lepidodendron:prehistoric_flora_didymograptus:3:8:3","lepidodendron:prehistoric_flora_endoceras:2:6:3","lepidodendron:prehistoric_flora_eurypterus:3:40:3","lepidodendron:prehistoric_flora_furcaster:2:12:3","lepidodendron:prehistoric_flora_gonioceras:3:18:3","lepidodendron:prehistoric_flora_isotelus:5:40:3","lepidodendron:prehistoric_flora_jellyfish1:1:3:3","lepidodendron:prehistoric_flora_jellyfish2:1:3:3","lepidodendron:prehistoric_flora_jellyfish3:1:3:3","lepidodendron:prehistoric_flora_jellyfish4:1:3:3","lepidodendron:prehistoric_flora_jellyfish5:1:3:3","lepidodendron:prehistoric_flora_jellyfish6:1:3:3","lepidodendron:prehistoric_flora_jellyfish7:1:3:3","lepidodendron:prehistoric_flora_kalbarria:2:32:3","lepidodendron:prehistoric_flora_kokomopterus:3:8:3","lepidodendron:prehistoric_flora_lunataspis:2:32:3","lepidodendron:prehistoric_flora_maclurina:3:12:3","lepidodendron:prehistoric_flora_mixopterus:2:20:3","lepidodendron:prehistoric_flora_monograptus:3:8:3","lepidodendron:prehistoric_flora_orthoceras:2:6:3","lepidodendron:prehistoric_flora_pharyngolepis:2:20:3","lepidodendron:prehistoric_flora_platycaraspis:2:20:3","lepidodendron:prehistoric_flora_platylomaspis:2:20:3","lepidodendron:prehistoric_flora_poleumita:2:12:3","lepidodendron:prehistoric_flora_poraspis:2:16:3","lepidodendron:prehistoric_flora_pterygotus:1:8:3","lepidodendron:prehistoric_flora_qilinyu:6:20:3","lepidodendron:prehistoric_flora_selenopeltis:5:36:3","lepidodendron:prehistoric_flora_temperoceras:2:22:3","lepidodendron:prehistoric_flora_tetragraptus:3:8:3","lepidodendron:prehistoric_flora_thelodus:2:20:3"};
    public static String[] dimOrdovicianSilurianMobsOceanIcePF = new String[]{"lepidodendron:prehistoric_flora_aegirocassis:2:6:3","lepidodendron:prehistoric_flora_cheirurus:2:44:3","lepidodendron:prehistoric_flora_crotalocephalus:3:20:3","lepidodendron:prehistoric_flora_cyrtoceras:2:36:3","lepidodendron:prehistoric_flora_deiroceras:2:6:3","lepidodendron:prehistoric_flora_didymograptus:3:8:3","lepidodendron:prehistoric_flora_endoceras:2:3:3","lepidodendron:prehistoric_flora_jellyfish1:1:3:3","lepidodendron:prehistoric_flora_jellyfish2:1:3:3","lepidodendron:prehistoric_flora_jellyfish3:1:3:3","lepidodendron:prehistoric_flora_jellyfish4:1:3:3","lepidodendron:prehistoric_flora_jellyfish5:1:3:3","lepidodendron:prehistoric_flora_jellyfish6:1:3:3","lepidodendron:prehistoric_flora_jellyfish7:1:3:3","lepidodendron:prehistoric_flora_promissum:1:10:3","lepidodendron:prehistoric_flora_psarolepis:1:24:3","lepidodendron:prehistoric_flora_pterygotus:1:8:3","lepidodendron:prehistoric_flora_sacabambaspis:6:20:3","lepidodendron:prehistoric_flora_selenopeltis:5:36:3","lepidodendron:prehistoric_flora_temperoceras:2:22:3","lepidodendron:prehistoric_flora_tetragraptus:3:8:3"};
    public static String[] dimOrdovicianSilurianMobsLandPF = new String[]{"lepidodendron:prehistoric_flora_eoarthropleura:2:18:1","lepidodendron:prehistoric_flora_trigonotarbid_palaeotarbus:2:14:1","lepidodendron:prehistoric_flora_kalbarria:8:35:3"};

    public static String[] dimPermianMobsGlossopterisPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:8:3","lepidodendron:prehistoric_flora_acrolepis:1:14:3","lepidodendron:prehistoric_flora_coelacanthus:3:7:3","lepidodendron:prehistoric_flora_gorgonops:2:6:1","lepidodendron:prehistoric_flora_mesosaurus:8:28:3","lepidodendron:prehistoric_flora_moschops:4:8:1","lepidodendron:prehistoric_flora_roachoid_forest:5:4:1","lepidodendron:prehistoric_flora_trigonotarbid_permotarbus:2:15:1"};
    public static String[] dimPermianMobsWetlandsPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:8:3","lepidodendron:prehistoric_flora_acanthostomatops:3:17:3","lepidodendron:prehistoric_flora_acrolepis:1:14:3","lepidodendron:prehistoric_flora_coelacanthus:3:7:3","lepidodendron:prehistoric_flora_dimetrodon:3:4:1","lepidodendron:prehistoric_flora_eryops:1:32:3","lepidodendron:prehistoric_flora_estemmenosuchus:2:6:1","lepidodendron:prehistoric_flora_gnathorhiza:2:25:3","lepidodendron:prehistoric_flora_labidosaurus:3:6:1","lepidodendron:prehistoric_flora_meganeuropsis:2:3:1","lepidodendron:prehistoric_flora_ophiacodon:1:14:1","lepidodendron:prehistoric_flora_palaeodictyoptera_dunbaria:2:12:1","lepidodendron:prehistoric_flora_platyhystrix:2:12:3","lepidodendron:prehistoric_flora_platysomus:4:25:3","lepidodendron:prehistoric_flora_roachoid_swamp:5:4:1","lepidodendron:prehistoric_flora_scorpion_opsieobuthus:1:20:1","lepidodendron:prehistoric_flora_sphenacodon:1:10:1","lepidodendron:prehistoric_flora_trigonotarbid_permotarbus:2:15:1","lepidodendron:prehistoric_flora_xenacanthus:1:14:3"};
    public static String[] dimPermianMobsOceanPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:36:2","lepidodendron:prehistoric_flora_acanthodes:4:36:3","lepidodendron:prehistoric_flora_acrolepis:1:6:2","lepidodendron:prehistoric_flora_acrolepis:1:6:3","lepidodendron:prehistoric_flora_ammonite_cylolobus:2:30:2","lepidodendron:prehistoric_flora_ammonite_cylolobus:2:30:3","lepidodendron:prehistoric_flora_ammonite_goniatites:2:30:2","lepidodendron:prehistoric_flora_ammonite_goniatites:2:30:3","lepidodendron:prehistoric_flora_claudiosaurus:6:4:1","lepidodendron:prehistoric_flora_claudiosaurus:2:10:3","lepidodendron:prehistoric_flora_coelacanthus:3:14:2","lepidodendron:prehistoric_flora_coelacanthus:3:14:3","lepidodendron:prehistoric_flora_helicoprion:1:2:2","lepidodendron:prehistoric_flora_helicoprion:1:2:3","lepidodendron:prehistoric_flora_janassa:8:20:3","lepidodendron:prehistoric_flora_jellyfish1:1:3:3","lepidodendron:prehistoric_flora_jellyfish1:1:3:2","lepidodendron:prehistoric_flora_jellyfish2:1:3:3","lepidodendron:prehistoric_flora_jellyfish2:1:3:2","lepidodendron:prehistoric_flora_jellyfish3:1:3:3","lepidodendron:prehistoric_flora_jellyfish3:1:3:2","lepidodendron:prehistoric_flora_jellyfish4:1:3:3","lepidodendron:prehistoric_flora_jellyfish4:1:3:2","lepidodendron:prehistoric_flora_jellyfish5:1:3:3","lepidodendron:prehistoric_flora_jellyfish5:1:3:2","lepidodendron:prehistoric_flora_jellyfish6:1:3:3","lepidodendron:prehistoric_flora_jellyfish6:1:3:2","lepidodendron:prehistoric_flora_jellyfish7:1:3:3","lepidodendron:prehistoric_flora_jellyfish7:1:3:2","lepidodendron:prehistoric_flora_kaibabvenator:2:4:2","lepidodendron:prehistoric_flora_listracanthus:2:11:2","lepidodendron:prehistoric_flora_menaspis:8:16:3","lepidodendron:prehistoric_flora_menaspis:8:16:2","lepidodendron:prehistoric_flora_mesosaurus:2:10:1","lepidodendron:prehistoric_flora_mesosaurus:2:10:3","lepidodendron:prehistoric_flora_mooreoceras:2:10:2","lepidodendron:prehistoric_flora_platysomus:8:16:3","lepidodendron:prehistoric_flora_platysomus:8:16:2"};
    public static String[] dimPermianMobsAridLandsPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:25:3","lepidodendron:prehistoric_flora_acrolepis:1:25:3","lepidodendron:prehistoric_flora_anteosaurus:2:2:1","lepidodendron:prehistoric_flora_diictodon:6:3:1","lepidodendron:prehistoric_flora_gnathorhiza:2:25:3","lepidodendron:prehistoric_flora_moschops:6:7:1","lepidodendron:prehistoric_flora_platysomus:4:25:3","lepidodendron:prehistoric_flora_procynosuchus:5:2:1","lepidodendron:prehistoric_flora_roachoid_arid:5:4:1","lepidodendron:prehistoric_flora_scorpion_opsieobuthus:1:20:1","lepidodendron:prehistoric_flora_tapinocephalus:4:3:1","lepidodendron:prehistoric_flora_trigonotarbid_permotarbus:2:15:1"};
    public static String[] dimPermianMobsLowlandsPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:8:3","lepidodendron:prehistoric_flora_acrolepis:1:14:3","lepidodendron:prehistoric_flora_coelacanthus:3:7:3","lepidodendron:prehistoric_flora_cotylorhynchus:2:8:1","lepidodendron:prehistoric_flora_dimetrodon:2:6:1","lepidodendron:prehistoric_flora_eosimops:4:10:1","lepidodendron:prehistoric_flora_eryops:2:22:3","lepidodendron:prehistoric_flora_gnathorhiza:2:15:3","lepidodendron:prehistoric_flora_moschops:6:7:1","lepidodendron:prehistoric_flora_palaeodictyoptera_dunbaria:4:4:1","lepidodendron:prehistoric_flora_platysomus:8:8:3","lepidodendron:prehistoric_flora_prionosuchus:2:3:3","lepidodendron:prehistoric_flora_procynosuchus:5:4:1","lepidodendron:prehistoric_flora_roachoid_arid:5:4:1","lepidodendron:prehistoric_flora_roachoid_swamp:5:4:1","lepidodendron:prehistoric_flora_scorpion_opsieobuthus:1:20:1","lepidodendron:prehistoric_flora_tapinocephalus:6:7:1","lepidodendron:prehistoric_flora_trigonotarbid_permotarbus:2:15:1"};
    public static String[] dimPermianMobsLowlandForestPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:18:3","lepidodendron:prehistoric_flora_diadectes:4:8:1","lepidodendron:prehistoric_flora_gnathorhiza:2:25:3","lepidodendron:prehistoric_flora_labidosaurus:3:6:1","lepidodendron:prehistoric_flora_platysomus:8:18:3","lepidodendron:prehistoric_flora_roachoid_forest:5:4:1","lepidodendron:prehistoric_flora_scorpion_opsieobuthus:1:20:1","lepidodendron:prehistoric_flora_trigonotarbid_permotarbus:2:15:1"};
    public static String[] dimPermianMobsRiverPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:8:3","lepidodendron:prehistoric_flora_acrolepis:1:14:3","lepidodendron:prehistoric_flora_coelacanthus:3:7:3","lepidodendron:prehistoric_flora_gnathorhiza:2:15:3","lepidodendron:prehistoric_flora_platysomus:8:8:3","lepidodendron:prehistoric_flora_prionosuchus:2:1:3"};
    public static String[] dimPermianMobsFloodbasaltPF = new String[0];
    public static String[] dimPermianMobsHighlandsPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:10:3","lepidodendron:prehistoric_flora_gorgonops:2:2:1","lepidodendron:prehistoric_flora_moschops:6:7:1","lepidodendron:prehistoric_flora_roachoid_forest:5:4:1","lepidodendron:prehistoric_flora_robertia:4:2:1","lepidodendron:prehistoric_flora_trigonotarbid_permotarbus:2:15:1"};
    public static String[] dimPermianMobsDesertPF = new String[]{"lepidodendron:prehistoric_flora_acanthodes:4:25:3","lepidodendron:prehistoric_flora_dvinia:5:5:1","lepidodendron:prehistoric_flora_gnathorhiza:2:25:3","lepidodendron:prehistoric_flora_inostrancevia:2:1:1","lepidodendron:prehistoric_flora_prosictodon:6:3:1","lepidodendron:prehistoric_flora_roachoid_arid:5:4:1","lepidodendron:prehistoric_flora_scorpion_opsieobuthus:1:20:1","lepidodendron:prehistoric_flora_scutosaurus:6:3:1","lepidodendron:prehistoric_flora_vivaxosaurus:5:4:1"};
    public static String[] dimPermianMobsMountainsPF = new String[0];

    public static String[] dimCambrianMobsFA = new String[0];
    public static String[] dimPrecambrianMobsFA = new String[0];
    public static String[] dimCarboniferousMobsSwampFA = new String[]{"fossil:fossil.crassigyrinus{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:20}],Health:20}:2:20:3","fossil:fossil.diplocaulus{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:10}],Health:10}:3:20:3","fossil:fossil.arthropleura{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:34}],Health:34}:1:35:1","fossil:fossil.meganeura{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:18}],Health:18}:2:20:1"};
    public static String[] dimCarboniferousMobsOceanFA = new String[0];
    public static String[] dimCarboniferousMobsIceFA = new String[0];
    public static String[] dimDevonianMobsForestFA = new String[]{"fossil:fossil.tiktaalik{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:30}],Health:30}:1:13:3"};
    public static String[] dimDevonianMobsOceanFA = new String[]{"fossil:fossil.coelacanth:2:20:3"};
    public static String[] dimOrdovicianSilurianMobsFA = new String[]{"fossil:fossil.megalograptus{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:25}],Health:25}:2:10:3","fossil:fossil.megalograptus{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:25}],Health:25}:2:15:2"};
    public static String[] dimPermianMobsGlossopterisFA = new String[0];
    public static String[] dimPermianMobsWetlandsFA = new String[]{"fossil:fossil.coelacanth:2:20:3","fossil:fossil.diplocaulus{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:10}],Health:10}:3:12:3","fossil:fossil.edaphosaurus{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:30}],Health:30}:2:12:1"};
    public static String[] dimPermianMobsOceanFA = new String[]{"fossil:fossil.coelacanth:2:20:3"};
    public static String[] dimPermianMobsAridLandsFA = new String[0];
    public static String[] dimPermianMobsRiverFA = new String[0];
    public static String[] dimPermianMobsLowlandsFA = new String[]{"fossil:fossil.diplocaulus{Mood:0,Hunger:1000,AgeTick:1000000,Attributes:[{Name:generic.maxHealth,Base:10}],Health:10}:3:12:3"};
    public static String[] dimPermianMobsLowlandForestFA = new String[0];
    public static String[] dimPermianMobsFloodbasaltFA = new String[0];
    public static String[] dimPermianMobsHighlandsFA = new String[0];
    public static String[] dimPermianMobsDesertFA = new String[0];
    public static String[] dimPermianMobsMountainsFA = new String[0];

    public static String[] dimCambrianMobsReborn = new String[0];
    public static String[] dimPrecambrianMobsReborn = new String[0];
    public static String[] dimCarboniferousMobsSwampReborn = new String[]{"rebornmod:entities.crassigyrinus:2:7:3","rebornmod:entities.diplocaulus:2:7:3"};
    public static String[] dimCarboniferousMobsOceanReborn = new String[0];
    public static String[] dimCarboniferousMobsIceReborn = new String[0];
    public static String[] dimDevonianMobsForestReborn = new String[0];
    public static String[] dimDevonianMobsOceanReborn = new String[]{"rebornmod:entities.dunkleosteus:1:1:2"};
    public static String[] dimOrdovicianSilurianMobsReborn = new String[0];
    public static String[] dimPermianMobsGlossopterisReborn = new String[0];
    public static String[] dimPermianMobsWetlandsReborn = new String[]{"rebornmod:entities.diplocaulus:2:7:3"};
    public static String[] dimPermianMobsOceanReborn = new String[0];
    public static String[] dimPermianMobsAridLandsReborn = new String[0];
    public static String[] dimPermianMobsRiverReborn = new String[0];
    public static String[] dimPermianMobsLowlandsReborn = new String[]{"rebornmod:entities.diplocaulus:2:7:3"};
    public static String[] dimPermianMobsLowlandForestReborn = new String[0];
    public static String[] dimPermianMobsFloodbasaltReborn = new String[0];
    public static String[] dimPermianMobsHighlandsReborn = new String[0];
    public static String[] dimPermianMobsDesertReborn = new String[0];
    public static String[] dimPermianMobsMountainsReborn = new String[0];

    public static int spreadPlants = 70;
    public static boolean showTooltips = true;
    public static boolean doSpores = true;
    public static boolean doFruits = true;
    public static boolean doSeeds = true;
    public static boolean doFlowers = true;
    public static boolean genAllPlants = false;
    public static String[] genTransformBiomes = new String[0];
    public static boolean genTransformBiomesTrees = false;
    public static boolean genTransformBiomesFlowers = false;
    public static boolean genTransformBiomesCactus = false;
    public static boolean genTransformBiomesMushrooms = false;
    public static boolean genTransformBiomesPumpkins = false;
    public static boolean genTransformBiomesReeds = false;
    public static boolean genLepidodendron = false;
    public static String[] genLepidodendronBlacklistBiomes = new String[0];
    public static String[] genLepidodendronOverrideBiomes = new String[0];
    public static int[] dimLepidodendron = new int[]{0};
    public static int minheightLepidodendron = 1;
    public static int maxheightLepidodendron = 90;
    public static double multiplierLepidodendron = 1;
    public static boolean genGlossopteris = false;
    public static String[] genGlossopterisBlacklistBiomes = new String[0];
    public static String[] genGlossopterisOverrideBiomes = new String[0];
    public static int[] dimGlossopteris = new int[]{0};
    public static boolean genGlossopterisBush = false;
    public static int minheightGlossopteris = 1;
    public static int maxheightGlossopteris = 90;
    public static double multiplierGlossopteris = 1;
    public static boolean genLiriodendron = false;
    public static String[] genLiriodendronBlacklistBiomes = new String[0];
    public static String[] genLiriodendronOverrideBiomes = new String[0];
    public static int[] dimLiriodendron = new int[]{0};
    public static int minheightLiriodendron = 1;
    public static int maxheightLiriodendron = 90;
    public static double multiplierLiriodendron = 1;
    public static boolean genMagnolia = false;
    public static String[] genMagnoliaBlacklistBiomes = new String[0];
    public static String[] genMagnoliaOverrideBiomes = new String[0];
    public static int[] dimMagnolia = new int[]{0};
    public static int minheightMagnolia = 1;
    public static int maxheightMagnolia = 90;
    public static double multiplierMagnolia = 1;
    public static boolean genRedwood = false;
    public static String[] genRedwoodBlacklistBiomes = new String[0];
    public static String[] genRedwoodOverrideBiomes = new String[]{"minecraft:mutated_redwood_taiga_hills", "biomesoplenty:redwood_forest", "biomesoplenty:redwood_forest_edge", "wildnature:redwood_forest"};
    public static int[] dimRedwood = new int[]{0};
    public static int minheightRedwood = 1;
    public static int maxheightRedwood = 110;
    public static double multiplierRedwood = 1;
    public static boolean genWollemi = false;
    public static String[] genWollemiBlacklistBiomes = new String[0];
    public static String[] genWollemiOverrideBiomes = new String[]{"minecraft:mutated_mesa", "minecraft:mutated_mesa_rock", "minecraft:mutated_mesa_clear_rock"};
    public static int[] dimWollemi = new int[]{0};
    public static int minheightWollemi = 1;
    public static int maxheightWollemi = 90;
    public static double multiplierWollemi = 1;
    public static boolean genTaxodium = false;
    public static String[] genTaxodiumBlacklistBiomes = new String[0];
    public static String[] genTaxodiumOverrideBiomes = new String[0];
    public static int[] dimTaxodium = new int[]{0};
    public static int minheightTaxodium = 1;
    public static int maxheightTaxodium = 100;
    public static double multiplierTaxodium = 1;

    public static boolean genPitys = false;
    public static String[] genPitysBlacklistBiomes = new String[0];
    public static String[] genPitysOverrideBiomes = new String[0];
    public static int[] dimPitys = new int[]{0};
    public static int minheightPitys = 1;
    public static int maxheightPitys = 75;
    public static double multiplierPitys = 1;

    public static boolean genArthropitys = false;
    public static String[] genArthropitysBlacklistBiomes = new String[0];
    public static String[] genArthropitysOverrideBiomes = new String[0];
    public static int[] dimArthropitys = new int[]{0};
    public static int minheightArthropitys = 1;
    public static int maxheightArthropitys = 75;
    public static double multiplierArthropitys = 1;

    public static boolean genPodocarp = false;
    public static String[] genPodocarpBlacklistBiomes = new String[0];
    public static String[] genPodocarpOverrideBiomes = new String[0];
    public static int[] dimPodocarp = new int[]{0};
    public static int minheightPodocarp = 1;
    public static int maxheightPodocarp = 120;
    public static double multiplierPodocarp = 1;
    public static boolean genPodocarpBush = false;

    public static boolean genIbyka = false;
    public static String[] genIbykaBlacklistBiomes = new String[0];
    public static String[] genIbykaOverrideBiomes = new String[0];
    public static int[] dimIbyka = new int[]{0};
    public static int minheightIbyka = 1;
    public static int maxheightIbyka = 100;
    public static double multiplierIbyka = 1;

    public static boolean genCalamophyton = false;
    public static String[] genCalamophytonBlacklistBiomes = new String[0];
    public static String[] genCalamophytonOverrideBiomes = new String[0];
    public static int[] dimCalamophyton = new int[]{0};
    public static int minheightCalamophyton = 1;
    public static int maxheightCalamophyton = 75;
    public static double multiplierCalamophyton = 1;

    public static boolean genCecropsis = false;
    public static String[] genCecropsisBlacklistBiomes = new String[0];
    public static String[] genCecropsisOverrideBiomes = new String[0];
    public static int[] dimCecropsis = new int[]{0};
    public static int minheightCecropsis = 1;
    public static int maxheightCecropsis = 90;
    public static double multiplierCecropsis = 1;

    public static boolean genLycopia = false;
    public static String[] genLycopiaBlacklistBiomes = new String[0];
    public static String[] genLycopiaOverrideBiomes = new String[0];
    public static int[] dimLycopia = new int[]{0};
    public static int minheightLycopia = 1;
    public static int maxheightLycopia = 90;
    public static double multiplierLycopia = 1;

    public static boolean genCtenis = false;
    public static String[] genCtenisBlacklistBiomes = new String[0];
    public static String[] genCtenisOverrideBiomes = new String[0];
    public static int[] dimCtenis = new int[]{0};
    public static int minheightCtenis = 1;
    public static int maxheightCtenis = 100;
    public static double multiplierCtenis = 1;

    public static boolean genLeclercqia = false;
    public static String[] genLeclercqiaBlacklistBiomes = new String[0];
    public static String[] genLeclercqiaOverrideBiomes = new String[0];
    public static int[] dimLeclercqia = new int[]{0};
    public static int minheightLeclercqia = 1;
    public static int maxheightLeclercqia = 0;
    public static double multiplierLeclercqia = 1;

    public static boolean genRellimia = false;
    public static String[] genRellimiaBlacklistBiomes = new String[0];
    public static String[] genRellimiaOverrideBiomes = new String[0];
    public static int[] dimRellimia = new int[]{0};
    public static int minheightRellimia = 1;
    public static int maxheightRellimia = 75;
    public static double multiplierRellimia = 1;

    public static boolean genRufloria = false;
    public static String[] genRufloriaBlacklistBiomes = new String[0];
    public static String[] genRufloriaOverrideBiomes = new String[0];
    public static int[] dimRufloria = new int[]{0};
    public static int minheightRufloria = 1;
    public static int maxheightRufloria = 100;
    public static double multiplierRufloria = 1;

    public static boolean genXenocladiaArchaeopteris = false;
    public static String[] genXenocladiaBlacklistBiomes = new String[0];
    public static String[] genXenocladiaOverrideBiomes = new String[0];
    public static int[] dimXenocladia = new int[]{0};

    public static boolean genZygopteris = false;
    public static String[] genZygopterisBlacklistBiomes = new String[0];
    public static String[] genZygopterisOverrideBiomes = new String[0];
    public static int[] dimZygopteris = new int[]{0};
    public static int minheightZygopteris = 1;
    public static int maxheightZygopteris = 100;
    public static double multiplierZygopteris = 1;

    public static boolean genBothrodendron = false;
    public static String[] genBothrodendronBlacklistBiomes = new String[0];
    public static String[] genBothrodendronOverrideBiomes = new String[0];
    public static int[] dimBothrodendron = new int[]{0};
    public static int minheightBothrodendron = 1;
    public static int maxheightBothrodendron = 90;
    public static double multiplierBothrodendron = 1;
    public static boolean genDiaphorodendron = false;
    public static String[] genDiaphorodendronBlacklistBiomes = new String[0];
    public static String[] genDiaphorodendronOverrideBiomes = new String[0];
    public static int[] dimDiaphorodendron = new int[]{0};
    public static int minheightDiaphorodendron = 1;
    public static int maxheightDiaphorodendron = 90;
    public static double multiplierDiaphorodendron = 1;
    public static boolean genMacroneuropteris = false;
    public static String[] genMacroneuropterisBlacklistBiomes = new String[0];
    public static String[] genMacroneuropterisOverrideBiomes = new String[0];
    public static int[] dimMacroneuropteris = new int[]{0};
    public static int minheightMacroneuropteris = 1;
    public static int maxheightMacroneuropteris = 90;
    public static double multiplierMacroneuropteris = 1;
    public static boolean genGinkgo = false;
    public static String[] genGinkgoBlacklistBiomes = new String[0];
    public static String[] genGinkgoOverrideBiomes = new String[0];
    public static int[] dimGinkgo = new int[]{0};
    public static int minheightGinkgo = 1;
    public static int maxheightGinkgo = 110;
    public static double multiplierGinkgo = 1;
    public static boolean genAgathis = false;
    public static String[] genAgathisBlacklistBiomes = new String[0];
    public static String[] genAgathisOverrideBiomes = new String[0];
    public static int[] dimAgathis = new int[]{0};
    public static int podzolAgathis = 6;
    public static int minheightAgathis = 1;
    public static int maxheightAgathis = 100;
    public static double multiplierAgathis = 1;
    public static boolean genAraucariaAraucana = false;
    public static String[] genAraucariaAraucanaBlacklistBiomes = new String[0];
    public static String[] genAraucariaAraucanaOverrideBiomes = new String[0];
    public static int[] dimAraucariaAraucana = new int[]{0};
    public static int largeAraucariaAraucana = 90;
    public static int minheightAraucariaAraucana = 1;
    public static int maxheightAraucariaAraucana = 120;
    public static double multiplierAraucariaAraucana = 1;
    public static boolean genAraucariaColumnaris = false;
    public static String[] genAraucariaColumnarisBlacklistBiomes = new String[0];
    public static String[] genAraucariaColumnarisOverrideBiomes = new String[0];
    public static int[] dimAraucariaColumnaris = new int[]{0};
    public static int minheightAraucariaColumnaris = 1;
    public static int maxheightAraucariaColumnaris = 90;
    public static double multiplierAraucariaColumnaris = 1;
    public static boolean genAraucariaBidwilli = false;
    public static String[] genAraucariaBidwilliBlacklistBiomes = new String[]{"minecraft:mutated_mesa", "minecraft:mutated_mesa_rock", "minecraft:mutated_mesa_clear_rock"};
    public static String[] genAraucariaBidwilliOverrideBiomes = new String[0];
    public static int[] dimAraucariaBidwilli = new int[]{0};
    public static int minheightAraucariaBidwilli = 1;
    public static int maxheightAraucariaBidwilli = 110;
    public static double multiplierAraucariaBidwilli = 1;
    public static boolean genTempskya = false;
    public static String[] genTempskyaBlacklistBiomes = new String[0];
    public static String[] genTempskyaOverrideBiomes = new String[0];
    public static int[] dimTempskya = new int[]{0};
    public static int minheightTempskya = 1;
    public static int maxheightTempskya = 90;
    public static double multiplierTempskya = 1;
    public static boolean genWilliamsonia = false;
    public static String[] genWilliamsoniaBlacklistBiomes = new String[0];
    public static String[] genWilliamsoniaOverrideBiomes = new String[0];
    public static int[] dimWilliamsonia = new int[]{0};
    public static int minheightWilliamsonia = 1;
    public static int maxheightWilliamsonia = 90;
    public static double multiplierWilliamsonia = 1;
    public static boolean genCycadeoidea = false;
    public static String[] genCycadeoideaBlacklistBiomes = new String[0];
    public static String[] genCycadeoideaOverrideBiomes = new String[0];
    public static int[] dimCycadeoidea = new int[]{0};
    public static int minheightCycadeoidea = 1;
    public static int maxheightCycadeoidea = 85;
    public static double multiplierCycadeoidea = 1;
    
    public static boolean genNilssoniopteris = false;
    public static String[] genNilssoniopterisBlacklistBiomes = new String[0];
    public static String[] genNilssoniopterisOverrideBiomes = new String[0];
    public static int[] dimNilssoniopteris = new int[]{0};
    public static int minheightNilssoniopteris = 1;
    public static int maxheightNilssoniopteris = 85;
    public static double multiplierNilssoniopteris = 1;
    
    public static boolean genNoeggerathiales = false;
    public static String[] genNoeggerathialesBlacklistBiomes = new String[0];
    public static String[] genNoeggerathialesOverrideBiomes = new String[0];
    public static int[] dimNoeggerathiales = new int[]{0};
    public static int minheightNoeggerathiales = 1;
    public static int maxheightNoeggerathiales = 85;
    public static double multiplierNoeggerathiales = 1;
    public static boolean genZamites = false;
    public static String[] genZamitesBlacklistBiomes = new String[0];
    public static String[] genZamitesOverrideBiomes = new String[0];
    public static int[] dimZamites = new int[]{0};
    public static int minheightZamites = 1;
    public static int maxheightZamites = 90;
    public static double multiplierZamites = 1;
    
    public static boolean genSahnioxylon = false;
    public static String[] genSahnioxylonBlacklistBiomes = new String[0];
    public static String[] genSahnioxylonOverrideBiomes = new String[0];
    public static int[] dimSahnioxylon = new int[]{0};
    public static int minheightSahnioxylon = 1;
    public static int maxheightSahnioxylon = 120;
    public static double multiplierSahnioxylon = 1;

    public static boolean genAridHorsetail = false;
    public static String[] genAridHorsetailBlacklistBiomes = new String[0];
    public static String[] genAridHorsetailOverrideBiomes = new String[0];
    public static int[] dimAridHorsetail = new int[]{0};
    public static int minheightAridHorsetail = 1;
    public static int maxheightAridHorsetail = 120;
    public static double multiplierAridHorsetail = 1;
    
    public static boolean genSigillaria = false;
    public static String[] genSigillariaBlacklistBiomes = new String[0];
    public static String[] genSigillariaOverrideBiomes = new String[0];
    public static int[] dimSigillaria = new int[]{0};
    public static int minheightSigillaria = 1;
    public static int maxheightSigillaria = 90;
    public static double multiplierSigillaria = 1;
    public static boolean genCalamites = false;
    public static String[] genCalamitesBlacklistBiomes = new String[0];
    public static String[] genCalamitesOverrideBiomes = new String[0];
    public static int[] dimCalamites = new int[]{0};
    public static boolean spreadCalamites = true;
    public static boolean spreadWorldGenCalamites = true;
    public static boolean spreadUnlimitedCalamites = false;
    public static int spreadLimitCalamites = 16;
    public static int spreadWaterCalamites = 6;
    public static int spreadSpeedCalamites = 50;
    public static int minheightCalamites = 1;
    public static int maxheightCalamites = 90;
    public static double multiplierCalamites = 1;
    public static boolean genAraucarioxylon = false;
    public static String[] genAraucarioxylonBlacklistBiomes = new String[0];
    public static String[] genAraucarioxylonOverrideBiomes = new String[0];
    public static int[] dimAraucarioxylon = new int[]{0};
    public static int minheightAraucarioxylon = 1;
    public static int maxheightAraucarioxylon = 90;
    public static double multiplierAraucarioxylon = 1;
    public static boolean genSciadopitys = false;
    public static String[] genSciadopitysBlacklistBiomes = new String[0];
    public static String[] genSciadopitysOverrideBiomes = new String[0];
    public static int[] dimSciadopitys = new int[]{0};
    public static int minheightSciadopitys = 1;
    public static int maxheightSciadopitys = 120;
    public static double multiplierSciadopitys = 1;
    public static int podzolSciadopitys = 5;
    public static boolean genPleuromeia = false;
    public static String[] genPleuromeiaBlacklistBiomes = new String[]{"minecraft:mutated_mesa", "minecraft:mutated_mesa_rock", "minecraft:mutated_mesa_clear_rock"};
    public static String[] genPleuromeiaOverrideBiomes = new String[0];
    public static int[] dimPleuromeia = new int[]{0};
    public static int minheightPleuromeia = 1;
    public static int maxheightPleuromeia = 90;
    public static double multiplierPleuromeia = 1;
    public static boolean genBjuvia = false;
    public static String[] genBjuviaBlacklistBiomes = new String[0];
    public static String[] genBjuviaOverrideBiomes = new String[0];
    public static int[] dimBjuvia = new int[]{0};
    public static int minheightBjuvia = 1;
    public static int maxheightBjuvia = 90;
    public static double multiplierBjuvia = 1;
    public static boolean genBlueCycad = false;
    public static String[] genBlueCycadBlacklistBiomes = new String[0];
    public static String[] genBlueCycadOverrideBiomes = new String[0];
    public static int[] dimBlueCycad = new int[]{0};
    public static int minheightBlueCycad = 1;
    public static int maxheightBlueCycad = 90;
    public static double multiplierBlueCycad = 1;
    public static boolean genAntarcticycas = false;
    public static String[] genAntarcticycasBlacklistBiomes = new String[0];
    public static String[] genAntarcticycasOverrideBiomes = new String[0];
    public static int[] dimAntarcticycas = new int[]{0};
    public static int minheightAntarcticycas = 1;
    public static int maxheightAntarcticycas = 90;
    public static double multiplierAntarcticycas = 1;
    public static boolean genCycas = false;
    public static String[] genCycasBlacklistBiomes = new String[0];
    public static String[] genCycasOverrideBiomes = new String[0];
    public static int[] dimCycas = new int[]{0};
    public static int minheightCycas = 1;
    public static int maxheightCycas = 90;
    public static double multiplierCycas = 1;
    public static boolean genLeptocycas = false;
    public static String[] genLeptocycasBlacklistBiomes = new String[0];
    public static String[] genLeptocycasOverrideBiomes = new String[0];
    public static int[] dimLeptocycas = new int[]{0};
    public static int minheightLeptocycas = 1;
    public static int maxheightLeptocycas = 90;
    public static double multiplierLeptocycas = 1;
    public static boolean genDioon = false;
    public static String[] genDioonBlacklistBiomes = new String[0];
    public static String[] genDioonOverrideBiomes = new String[0];
    public static int[] dimDioon = new int[]{0};
    public static int minheightDioon = 1;
    public static int maxheightDioon = 90;
    public static double multiplierDioon = 1;
    public static boolean genNilssonia = false;
    public static String[] genNilssoniaBlacklistBiomes = new String[0];
    public static String[] genNilssoniaOverrideBiomes = new String[0];
    public static int[] dimNilssonia = new int[]{0};
    public static int minheightNilssonia = 1;
    public static int maxheightNilssonia = 90;
    public static double multiplierNilssonia = 1;
    public static boolean genSpinyCycad = false;
    public static String[] genSpinyCycadBlacklistBiomes = new String[0];
    public static String[] genSpinyCycadOverrideBiomes = new String[0];
    public static int[] dimSpinyCycad = new int[]{0};
    public static int minheightSpinyCycad = 1;
    public static int maxheightSpinyCycad = 90;
    public static double multiplierSpinyCycad = 1;
    public static boolean genPsaronius = false;
    public static String[] genPsaroniusBlacklistBiomes = new String[0];
    public static String[] genPsaroniusOverrideBiomes = new String[0];
    public static int[] dimPsaronius = new int[]{0};
    public static int minheightPsaronius = 1;
    public static int maxheightPsaronius = 90;
    public static double multiplierPsaronius = 1;
    public static boolean genTietea = false;
    public static String[] genTieteaBlacklistBiomes = new String[0];
    public static String[] genTieteaOverrideBiomes = new String[0];
    public static int[] dimTietea = new int[]{0};
    public static int minheightTietea = 1;
    public static int maxheightTietea = 90;
    public static double multiplierTietea = 1;
    
    public static boolean genDicroidiumZuberi = false;
    public static String[] genDicroidiumZuberiBlacklistBiomes = new String[0];
    public static String[] genDicroidiumZuberiOverrideBiomes = new String[0];
    public static int[] dimDicroidiumZuberi = new int[]{0};
    public static int minheightDicroidiumZuberi = 1;
    public static int maxheightDicroidiumZuberi = 90;
    public static double multiplierDicroidiumZuberi = 1;

    public static boolean genDicroidiumFremouwensis = false;
    public static String[] genDicroidiumFremouwensisBlacklistBiomes = new String[0];
    public static String[] genDicroidiumFremouwensisOverrideBiomes = new String[0];
    public static int[] dimDicroidiumFremouwensis = new int[]{0};
    public static int minheightDicroidiumFremouwensis = 1;
    public static int maxheightDicroidiumFremouwensis = 110;
    public static double multiplierDicroidiumFremouwensis = 1;
    
    public static boolean genCaytoniales = false;
    public static String[] genCaytonialesBlacklistBiomes = new String[0];
    public static String[] genCaytonialesOverrideBiomes = new String[0];
    public static int[] dimCaytoniales = new int[]{0};
    public static int minheightCaytoniales = 1;
    public static int maxheightCaytoniales = 90;
    public static double multiplierCaytoniales = 1;
    public static boolean genDicksonia = false;
    public static String[] genDicksoniaBlacklistBiomes = new String[0];
    public static String[] genDicksoniaOverrideBiomes = new String[0];
    public static int[] dimDicksonia = new int[]{0};
    public static int minheightDicksonia = 1;
    public static int maxheightDicksonia = 90;
    public static double multiplierDicksonia = 1;
    public static boolean genZygopteridaceae = false;
    public static String[] genZygopteridaceaeBlacklistBiomes = new String[0];
    public static String[] genZygopteridaceaeOverrideBiomes = new String[0];
    public static int[] dimZygopteridaceae = new int[]{0};
    public static int minheightZygopteridaceae = 1;
    public static int maxheightZygopteridaceae = 90;
    public static double multiplierZygopteridaceae = 1;
    public static boolean genCordaites = false;
    public static String[] genCordaitesBlacklistBiomes = new String[0];
    public static String[] genCordaitesOverrideBiomes = new String[0];
    public static int[] dimCordaites = new int[]{0};
    public static int minheightCordaites = 1;
    public static int maxheightCordaites = 90;
    public static double multiplierCordaites = 1;
    public static boolean genSphenophyllalesLepidodendron = false;
    public static boolean genSphenophyllalesCordaites = false;
    public static boolean genSphenophyllalesBothrodendron = false;
    public static boolean genSphenophyllalesDiaphorodendron = false;
    public static boolean genSphenophyllalesArthropitys = false;
    public static String[] genSphenophyllalesBlacklistBiomes = new String[0];
    public static String[] genSphenophyllalesOverrideBiomes = new String[0];
    public static int[] dimSphenophyllales = new int[]{0};
    public static boolean genHorsetail = false;
    public static String[] genHorsetailBlacklistBiomes = new String[0];
    public static String[] genHorsetailOverrideBiomes = new String[0];
    public static int[] dimHorsetail = new int[]{0};
    public static int minheightHorsetail = 1;
    public static int maxheightHorsetail = 100;
    public static double multiplierHorsetail = 1;
    public static boolean genReticulopteris = false;
    public static String[] genReticulopterisBlacklistBiomes = new String[0];
    public static String[] genReticulopterisOverrideBiomes = new String[0];
    public static int[] dimReticulopteris = new int[]{0};
    public static int minheightReticulopteris = 1;
    public static int maxheightReticulopteris = 100;
    public static double multiplierReticulopteris = 1;
    public static boolean genAlliopteris = false;
    public static String[] genAlliopterisBlacklistBiomes = new String[0];
    public static String[] genAlliopterisOverrideBiomes = new String[0];
    public static int[] dimAlliopteris = new int[]{0};
    public static int minheightAlliopteris = 1;
    public static int maxheightAlliopteris = 100;
    public static double multiplierAlliopteris = 1;
    public static boolean genNemejcopteris = false;
    public static String[] genNemejcopterisBlacklistBiomes = new String[0];
    public static String[] genNemejcopterisOverrideBiomes = new String[0];
    public static int[] dimNemejcopteris = new int[]{0};
    public static int minheightNemejcopteris = 1;
    public static int maxheightNemejcopteris = 100;
    public static double multiplierNemejcopteris = 1;

    public static boolean genCooksonia = false;
    public static String[] genCooksoniaBlacklistBiomes = new String[0];
    public static String[] genCooksoniaOverrideBiomes = new String[0];
    public static int[] dimCooksonia = new int[]{0};
    public static int waterCooksoniaHorizontal = 3;
    public static int waterCooksoniaVertical = 0;
    public static int minheightCooksonia = 1;
    public static int maxheightCooksonia = 90;
    public static double multiplierCooksonia = 1;
    public static boolean spreadCooksonia = true;

    public static boolean genRhynia = false;
    public static String[] genRhyniaBlacklistBiomes = new String[0];
    public static String[] genRhyniaOverrideBiomes = new String[0];
    public static int[] dimRhynia = new int[]{0};
    public static int minheightRhynia = 1;
    public static int maxheightRhynia = 0;
    public static double multiplierRhynia = 1;
    public static boolean spreadRhynia = true;

    public static boolean genFoozia = false;
    public static String[] genFooziaBlacklistBiomes = new String[0];
    public static String[] genFooziaOverrideBiomes = new String[0];
    public static int[] dimFoozia = new int[]{0};
    public static int waterFooziaHorizontal = 3;
    public static int waterFooziaVertical = 0;
    public static int minheightFoozia = 1;
    public static int maxheightFoozia = 90;
    public static double multiplierFoozia = 1;
    public static boolean spreadFoozia = true;
    public static boolean genZosterophyllum = false;
    public static String[] genZosterophyllumBlacklistBiomes = new String[0];
    public static String[] genZosterophyllumOverrideBiomes = new String[0];
    public static int[] dimZosterophyllum = new int[]{0};
    public static int waterZosterophyllumHorizontal = 3;
    public static int waterZosterophyllumVertical = 0;
    public static int minheightZosterophyllum = 1;
    public static int maxheightZosterophyllum = 90;
    public static double multiplierZosterophyllum = 1;
    public static boolean spreadZosterophyllum = true;
    public static boolean genPsilophyton = false;
    public static String[] genPsilophytonBlacklistBiomes = new String[0];
    public static String[] genPsilophytonOverrideBiomes = new String[0];
    public static int[] dimPsilophyton = new int[]{0};
    public static int waterPsilophytonHorizontal = 5;
    public static int waterPsilophytonVertical = 1;
    public static int minheightPsilophyton = 1;
    public static int maxheightPsilophyton = 90;
    public static double multiplierPsilophyton = 1;
    public static boolean spreadPsilophyton = true;
    public static boolean genAsteroxylon = false;
    public static String[] genAsteroxylonBlacklistBiomes = new String[0];
    public static String[] genAsteroxylonOverrideBiomes = new String[0];
    public static int[] dimAsteroxylon = new int[]{0};
    public static int waterAsteroxylonHorizontal = 5;
    public static int waterAsteroxylonVertical = 0;
    public static int minheightAsteroxylon = 1;
    public static int maxheightAsteroxylon = 90;
    public static double multiplierAsteroxylon = 1;
    public static boolean spreadAsteroxylon = true;
    public static boolean genPrototaxites = false;
    public static String[] genPrototaxitesBlacklistBiomes = new String[0];
    public static String[] genPrototaxitesOverrideBiomes = new String[0];
    public static int[] dimPrototaxites = new int[]{0};
    public static int waterPrototaxitesHorizontal = 3;
    public static int waterPrototaxitesVertical = 0;
    public static int minheightPrototaxites = 1;
    public static int maxheightPrototaxites = 0;
    public static double multiplierPrototaxites = 1;
    public static boolean genWattieza = false;
    public static String[] genWattiezaBlacklistBiomes = new String[0];
    public static String[] genWattiezaOverrideBiomes = new String[0];
    public static int[] dimWattieza = new int[]{0};
    public static int minheightWattieza = 1;
    public static int maxheightWattieza = 90;
    public static double multiplierWattieza = 1;

    public static boolean genAneurophyton = false;
    public static String[] genAneurophytonBlacklistBiomes = new String[0];
    public static String[] genAneurophytonOverrideBiomes = new String[0];
    public static int[] dimAneurophyton = new int[]{0};
    public static int minheightAneurophyton = 1;
    public static int maxheightAneurophyton = 90;
    public static double multiplierAneurophyton = 1;

    public static boolean genPodozamites = false;
    public static String[] genPodozamitesBlacklistBiomes = new String[0];
    public static String[] genPodozamitesOverrideBiomes = new String[0];
    public static int[] dimPodozamites = new int[]{0};
    public static int minheightPodozamites = 1;
    public static int maxheightPodozamites = 100;
    public static double multiplierPodozamites = 1;
    public static boolean genValmeyerodendron = false;
    public static String[] genValmeyerodendronBlacklistBiomes = new String[0];
    public static String[] genValmeyerodendronOverrideBiomes = new String[0];
    public static int[] dimValmeyerodendron = new int[]{0};
    public static int minheightValmeyerodendron = 1;
    public static int maxheightValmeyerodendron = 90;
    public static double multiplierValmeyerodendron = 1;
    public static boolean genProtea = false;
    public static String[] genProteaBlacklistBiomes = new String[0];
    public static String[] genProteaOverrideBiomes = new String[0];
    public static int[] dimProtea = new int[]{0};
    public static int minheightProtea = 85;
    public static int maxheightProtea = 120;
    public static double multiplierProtea = 1;
    public static boolean genBanksia = false;
    public static String[] genBanksiaBlacklistBiomes = new String[0];
    public static String[] genBanksiaOverrideBiomes = new String[0];
    public static int[] dimBanksia = new int[]{0};
    public static int minheightBanksia = 1;
    public static int maxheightBanksia = 100;
    public static double multiplierBanksia = 1;
    public static boolean genWalchia = false;
    public static String[] genWalchiaBlacklistBiomes = new String[0];
    public static String[] genWalchiaOverrideBiomes = new String[0];
    public static int[] dimWalchia = new int[]{0};
    public static int minheightWalchia = 75;
    public static int maxheightWalchia = 125;
    public static double multiplierWalchia = 1;
    public static boolean genLepidopteris = false;
    public static String[] genLepidopterisBlacklistBiomes = new String[0];
    public static String[] genLepidopterisOverrideBiomes = new String[0];
    public static int[] dimLepidopteris = new int[]{0};
    public static int minheightLepidopteris = 1;
    public static int maxheightLepidopteris = 95;
    public static double multiplierLepidopteris = 1;
    public static boolean genGlenopteris = false;
    public static String[] genGlenopterisBlacklistBiomes = new String[0];
    public static String[] genGlenopterisOverrideBiomes = new String[0];
    public static int[] dimGlenopteris = new int[]{0};
    public static int minheightGlenopteris = 1;
    public static int maxheightGlenopteris = 95;
    public static double multiplierGlenopteris = 1;
    public static boolean genBaikalophyllum = false;
    public static String[] genBaikalophyllumBlacklistBiomes = new String[0];
    public static String[] genBaikalophyllumOverrideBiomes = new String[0];
    public static int[] dimBaikalophyllum = new int[]{0};
    public static int minheightBaikalophyllum = 1;
    public static int maxheightBaikalophyllum = 85;
    public static double multiplierBaikalophyllum = 1;
    public static boolean genBaiera = false;
    public static String[] genBaieraBlacklistBiomes = new String[0];
    public static String[] genBaieraOverrideBiomes = new String[0];
    public static int[] dimBaiera = new int[]{0};
    public static int minheightBaiera = 1;
    public static int maxheightBaiera = 85;
    public static double multiplierBaiera = 1;
    public static boolean genNystroemia = false;
    public static String[] genNystroemiaBlacklistBiomes = new String[0];
    public static String[] genNystroemiaOverrideBiomes = new String[0];
    public static int[] dimNystroemia = new int[]{0};
    public static int minheightNystroemia = 1;
    public static int maxheightNystroemia = 85;
    public static double multiplierNystroemia = 1;
    public static boolean genPolyspermophyllum = false;
    public static String[] genPolyspermophyllumBlacklistBiomes = new String[0];
    public static String[] genPolyspermophyllumOverrideBiomes = new String[0];
    public static int[] dimPolyspermophyllum = new int[]{0};
    public static int minheightPolyspermophyllum = 1;
    public static int maxheightPolyspermophyllum = 85;
    public static double multiplierPolyspermophyllum = 1;
    public static boolean genTrichopitys = false;
    public static String[] genTrichopitysBlacklistBiomes = new String[0];
    public static String[] genTrichopitysOverrideBiomes = new String[0];
    public static int[] dimTrichopitys = new int[]{0};
    public static int minheightTrichopitys = 1;
    public static int maxheightTrichopitys = 105;
    public static double multiplierTrichopitys = 1;
    public static boolean genIsoetes = false;
    public static String[] genIsoetesBlacklistBiomes = new String[0];
    public static String[] genIsoetesOverrideBiomes = new String[0];
    public static int[] dimIsoetes = new int[]{0};
    public static int minheightIsoetes = 1;
    public static int maxheightIsoetes = 0;
    public static double multiplierIsoetes = 1;
    public static boolean spreadIsoetes = true;
    public static boolean genSphenophyllales1 = false;
    public static String[] genSphenophyllales1BlacklistBiomes = new String[0];
    public static String[] genSphenophyllales1OverrideBiomes = new String[0];
    public static int[] dimSphenophyllales1 = new int[]{0};
    public static int minheightSphenophyllales1 = 1;
    public static int maxheightSphenophyllales1 = 90;
    public static double multiplierSphenophyllales1 = 1;
    public static boolean genClaytosmunda = false;
    public static String[] genClaytosmundaBlacklistBiomes = new String[0];
    public static String[] genClaytosmundaOverrideBiomes = new String[0];
    public static int[] dimClaytosmunda = new int[]{0};
    public static int minheightClaytosmunda = 1;
    public static int maxheightClaytosmunda = 90;
    public static double multiplierClaytosmunda = 1;
    
    public static boolean genDictyophyllum = false;
    public static String[] genDictyophyllumBlacklistBiomes = new String[0];
    public static String[] genDictyophyllumOverrideBiomes = new String[0];
    public static int[] dimDictyophyllum = new int[]{0};
    public static int minheightDictyophyllum = 1;
    public static int maxheightDictyophyllum = 90;
    public static double multiplierDictyophyllum = 1;

    public static boolean genOtozamites = false;
    public static String[] genOtozamitesBlacklistBiomes = new String[0];
    public static String[] genOtozamitesOverrideBiomes = new String[0];
    public static int[] dimOtozamites = new int[]{0};
    public static int minheightOtozamites = 1;
    public static int maxheightOtozamites = 90;
    public static double multiplierOtozamites = 1;

    public static boolean genAnomozamites = false;
    public static String[] genAnomozamitesBlacklistBiomes = new String[0];
    public static String[] genAnomozamitesOverrideBiomes = new String[0];
    public static int[] dimAnomozamites = new int[]{0};
    public static int minheightAnomozamites = 1;
    public static int maxheightAnomozamites = 90;
    public static double multiplierAnomozamites = 1;

    public static boolean genPtilophyllum = false;
    public static String[] genPtilophyllumBlacklistBiomes = new String[0];
    public static String[] genPtilophyllumOverrideBiomes = new String[0];
    public static int[] dimPtilophyllum = new int[]{0};
    public static int minheightPtilophyllum = 1;
    public static int maxheightPtilophyllum = 90;
    public static double multiplierPtilophyllum = 1;

    public static boolean genTongchuanophyllum = false;
    public static String[] genTongchuanophyllumBlacklistBiomes = new String[0];
    public static String[] genTongchuanophyllumOverrideBiomes = new String[0];
    public static int[] dimTongchuanophyllum = new int[]{0};
    public static int minheightTongchuanophyllum = 1;
    public static int maxheightTongchuanophyllum = 90;
    public static double multiplierTongchuanophyllum = 1;

    public static boolean genTodites = false;
    public static String[] genToditesBlacklistBiomes = new String[0];
    public static String[] genToditesOverrideBiomes = new String[0];
    public static int[] dimTodites = new int[]{0};
    public static int minheightTodites = 1;
    public static int maxheightTodites = 90;
    public static double multiplierTodites = 1;

    public static boolean genCladophlebis = false;
    public static String[] genCladophlebisBlacklistBiomes = new String[0];
    public static String[] genCladophlebisOverrideBiomes = new String[0];
    public static int[] dimCladophlebis = new int[]{0};
    public static int minheightCladophlebis = 1;
    public static int maxheightCladophlebis = 90;
    public static double multiplierCladophlebis = 1;

    public static boolean genClathropteris = false;
    public static String[] genClathropterisBlacklistBiomes = new String[0];
    public static String[] genClathropterisOverrideBiomes = new String[0];
    public static int[] dimClathropteris = new int[]{0};
    public static int minheightClathropteris = 1;
    public static int maxheightClathropteris = 90;
    public static double multiplierClathropteris = 1;

    public static boolean genIschnophyton = false;
    public static String[] genIschnophytonBlacklistBiomes = new String[0];
    public static String[] genIschnophytonOverrideBiomes = new String[0];
    public static int[] dimIschnophyton = new int[]{0};
    public static int minheightIschnophyton = 1;
    public static int maxheightIschnophyton = 90;
    public static double multiplierIschnophyton = 1;

    public static boolean genPetriellales = false;
    public static String[] genPetriellalesBlacklistBiomes = new String[0];
    public static String[] genPetriellalesOverrideBiomes = new String[0];
    public static int[] dimPetriellales = new int[]{0};
    public static int minheightPetriellales = 1;
    public static int maxheightPetriellales = 90;
    public static double multiplierPetriellales = 1;

    public static boolean genSanmiguelia = false;
    public static String[] genSanmigueliaBlacklistBiomes = new String[0];
    public static String[] genSanmigueliaOverrideBiomes = new String[0];
    public static int[] dimSanmiguelia = new int[]{0};
    public static int minheightSanmiguelia = 1;
    public static int maxheightSanmiguelia = 90;
    public static double multiplierSanmiguelia = 1;

    public static boolean genConiopteris = false;
    public static String[] genConiopterisBlacklistBiomes = new String[0];
    public static String[] genConiopterisOverrideBiomes = new String[0];
    public static int[] dimConiopteris = new int[]{0};
    public static int minheightConiopteris = 1;
    public static int maxheightConiopteris = 90;
    public static double multiplierConiopteris = 1;

    public static boolean genXihuphyllum = false;
    public static String[] genXihuphyllumBlacklistBiomes = new String[0];
    public static String[] genXihuphyllumOverrideBiomes = new String[0];
    public static int[] dimXihuphyllum = new int[]{0};
    public static int minheightXihuphyllum = 1;
    public static int maxheightXihuphyllum = 90;
    public static double multiplierXihuphyllum = 1;

    public static boolean genMacrotaeniopteris = false;
    public static String[] genMacrotaeniopterisBlacklistBiomes = new String[0];
    public static String[] genMacrotaeniopterisOverrideBiomes = new String[0];
    public static int[] dimMacrotaeniopteris = new int[]{0};
    public static int minheightMacrotaeniopteris = 1;
    public static int maxheightMacrotaeniopteris = 90;
    public static double multiplierMacrotaeniopteris = 1;

    public static boolean genStiffCycad = false;
    public static String[] genStiffCycadBlacklistBiomes = new String[0];
    public static String[] genStiffCycadOverrideBiomes = new String[0];
    public static int[] dimStiffCycad = new int[]{0};
    public static int minheightStiffCycad = 1;
    public static int maxheightStiffCycad = 90;
    public static double multiplierStiffCycad = 1;

    public static boolean genTelemachus = false;
    public static String[] genTelemachusBlacklistBiomes = new String[0];
    public static String[] genTelemachusOverrideBiomes = new String[0];
    public static int[] dimTelemachus = new int[]{0};
    public static int minheightTelemachus = 1;
    public static int maxheightTelemachus = 120;
    public static double multiplierTelemachus = 1;

    public static boolean genSphenobaiera = false;
    public static String[] genSphenobaieraBlacklistBiomes = new String[0];
    public static String[] genSphenobaieraOverrideBiomes = new String[0];
    public static int[] dimSphenobaiera = new int[]{0};
    public static int minheightSphenobaiera = 1;
    public static int maxheightSphenobaiera = 90;
    public static double multiplierSphenobaiera = 1;

    public static boolean genBeech = false;
    public static String[] genBeechBlacklistBiomes = new String[0];
    public static String[] genBeechOverrideBiomes = new String[0];
    public static int[] dimBeech = new int[]{0};
    public static int minheightBeech = 1;
    public static int maxheightBeech = 90;
    public static double multiplierBeech = 1;

    public static boolean genPlane = false;
    public static String[] genPlaneBlacklistBiomes = new String[0];
    public static String[] genPlaneOverrideBiomes = new String[0];
    public static int[] dimPlane = new int[]{0};
    public static int minheightPlane = 1;
    public static int maxheightPlane = 90;
    public static double multiplierPlane = 1;

    public static boolean genSycamore = false;
    public static String[] genSycamoreBlacklistBiomes = new String[0];
    public static String[] genSycamoreOverrideBiomes = new String[0];
    public static int[] dimSycamore = new int[]{0};
    public static int minheightSycamore = 1;
    public static int maxheightSycamore = 90;
    public static double multiplierSycamore = 1;

    public static boolean genFurcula = false;
    public static String[] genFurculaBlacklistBiomes = new String[0];
    public static String[] genFurculaOverrideBiomes = new String[0];
    public static int[] dimFurcula = new int[]{0};
    public static int minheightFurcula = 1;
    public static int maxheightFurcula = 90;
    public static double multiplierFurcula = 1;
    
    public static boolean genScolecopteris = false;
    public static String[] genScolecopterisBlacklistBiomes = new String[0];
    public static String[] genScolecopterisOverrideBiomes = new String[0];
    public static int[] dimScolecopteris = new int[]{0};
    public static int minheightScolecopteris = 1;
    public static int maxheightScolecopteris = 90;
    public static double multiplierScolecopteris = 1;
    
    public static boolean genWachtleria = false;
    public static String[] genWachtleriaBlacklistBiomes = new String[0];
    public static String[] genWachtleriaOverrideBiomes = new String[0];
    public static int[] dimWachtleria = new int[]{0};
    public static int minheightWachtleria = 1;
    public static int maxheightWachtleria = 90;
    public static double multiplierWachtleria = 1;
    public static boolean genScytophyllum = false;
    public static String[] genScytophyllumBlacklistBiomes = new String[0];
    public static String[] genScytophyllumOverrideBiomes = new String[0];
    public static int[] dimScytophyllum = new int[]{0};
    public static int minheightScytophyllum = 1;
    public static int maxheightScytophyllum = 90;
    public static double multiplierScytophyllum = 1;
    public static boolean genAethophyllum = false;
    public static String[] genAethophyllumBlacklistBiomes = new String[0];
    public static String[] genAethophyllumOverrideBiomes = new String[0];
    public static int[] dimAethophyllum = new int[]{0};
    public static int minheightAethophyllum = 1;
    public static int maxheightAethophyllum = 90;
    public static double multiplierAethophyllum = 1;
    public static boolean genDicranophyllum = false;
    public static String[] genDicranophyllumBlacklistBiomes = new String[0];
    public static String[] genDicranophyllumOverrideBiomes = new String[0];
    public static int[] dimDicranophyllum = new int[]{0};
    public static int minheightDicranophyllum = 1;
    public static int maxheightDicranophyllum = 90;
    public static double multiplierDicranophyllum = 1;
    public static boolean genProtolepidodendropsis = false;
    public static String[] genProtolepidodendropsisBlacklistBiomes = new String[0];
    public static String[] genProtolepidodendropsisOverrideBiomes = new String[0];
    public static int[] dimProtolepidodendropsis = new int[]{0};
    public static int minheightProtolepidodendropsis = 1;
    public static int maxheightProtolepidodendropsis = 90;
    public static double multiplierProtolepidodendropsis = 1;
    public static boolean genHymenaea = false;
    public static String[] genHymenaeaBlacklistBiomes = new String[0];
    public static String[] genHymenaeaOverrideBiomes = new String[0];
    public static int[] dimHymenaea = new int[]{0};
    public static int minheightHymenaea = 1;
    public static int maxheightHymenaea = 120;
    public static double multiplierHymenaea = 1;
    public static boolean genAraucariaMirabilis = false;
    public static String[] genAraucariaMirabilisBlacklistBiomes = new String[0];
    public static String[] genAraucariaMirabilisOverrideBiomes = new String[0];
    public static int[] dimAraucariaMirabilis = new int[]{0};
    public static int minheightAraucariaMirabilis = 1;
    public static int maxheightAraucariaMirabilis = 90;
    public static double multiplierAraucariaMirabilis = 1;
    public static boolean genNelumbo = false;
    public static String[] genNelumboBlacklistBiomes = new String[0];
    public static String[] genNelumboOverrideBiomes = new String[0];
    public static int[] dimNelumbo = new int[]{0};
    public static int minheightNelumbo = 1;
    public static int maxheightNelumbo = 90;
    public static double multiplierNelumbo = 1;
    public static boolean genBolbitis = false;
    public static String[] genBolbitisBlacklistBiomes = new String[0];
    public static String[] genBolbitisOverrideBiomes = new String[0];
    public static int[] dimBolbitis = new int[]{0};
    public static int minheightBolbitis = 1;
    public static int maxheightBolbitis = 90;
    public static double multiplierBolbitis = 1;
    public static boolean genAlpia = false;
    public static String[] genAlpiaBlacklistBiomes = new String[0];
    public static String[] genAlpiaOverrideBiomes = new String[0];
    public static int[] dimAlpia = new int[]{0};
    public static int minheightAlpia = 90;
    public static int maxheightAlpia = 130;
    public static double multiplierAlpia = 1;
    public static boolean genKomlopteris = false;
    public static String[] genKomlopterisBlacklistBiomes = new String[0];
    public static String[] genKomlopterisOverrideBiomes = new String[0];
    public static int[] dimKomlopteris = new int[]{0};
    public static int minheightKomlopteris = 75;
    public static int maxheightKomlopteris = 90;
    public static double multiplierKomlopteris = 1;
    public static boolean genMedullosales = false;
    public static String[] genMedullosalesBlacklistBiomes = new String[0];
    public static String[] genMedullosalesOverrideBiomes = new String[0];
    public static int[] dimMedullosales = new int[]{0};
    public static int minheightMedullosales = 1;
    public static int maxheightMedullosales = 90;
    public static double multiplierMedullosales = 1;
    public static boolean genBaragwanathia = false;
    public static String[] genBaragwanathiaBlacklistBiomes = new String[0];
    public static String[] genBaragwanathiaOverrideBiomes = new String[0];
    public static int[] dimBaragwanathia = new int[]{0};
    public static int minheightBaragwanathia = 1;
    public static int maxheightBaragwanathia = 90;
    public static double multiplierBaragwanathia = 1;
    public static boolean spreadBaragwanathia = true;
    public static boolean genGigantopterid = false;
    public static String[] genGigantopteridBlacklistBiomes = new String[0];
    public static String[] genGigantopteridOverrideBiomes = new String[0];
    public static int[] dimGigantopterid = new int[]{0};
    public static int minheightGigantopterid = 1;
    public static int maxheightGigantopterid = 90;
    public static double multiplierGigantopterid = 1;
    public static boolean genEmplectopteris = false;
    public static String[] genEmplectopterisBlacklistBiomes = new String[0];
    public static String[] genEmplectopterisOverrideBiomes = new String[0];
    public static int[] dimEmplectopteris = new int[]{0};
    public static int minheightEmplectopteris = 1;
    public static int maxheightEmplectopteris = 90;
    public static double multiplierEmplectopteris = 1;
    public static boolean genBristlecone = false;
    public static String[] genBristleconeBlacklistBiomes = new String[0];
    public static String[] genBristleconeOverrideBiomes = new String[0];
    public static int[] dimBristlecone = new int[]{0};
    public static int minheightBristlecone = 120;
    public static int maxheightBristlecone = 0;
    public static double multiplierBristlecone = 1;

    public static boolean genOrtiseia = false;
    public static String[] genOrtiseiaBlacklistBiomes = new String[0];
    public static String[] genOrtiseiaOverrideBiomes = new String[0];
    public static int[] dimOrtiseia = new int[]{0};
    public static int minheightOrtiseia = 110;
    public static int maxheightOrtiseia = 0;
    public static double multiplierOrtiseia = 1;
    
    public static boolean genHironoia = false;
    public static String[] genHironoiaBlacklistBiomes = new String[0];
    public static String[] genHironoiaOverrideBiomes = new String[0];
    public static int[] dimHironoia = new int[]{0};
    public static int minheightHironoia = 1;
    public static int maxheightHironoia = 100;
    public static double multiplierHironoia = 1;
    public static boolean genMatonia = false;
    public static String[] genMatoniaBlacklistBiomes = new String[0];
    public static String[] genMatoniaOverrideBiomes = new String[0];
    public static int[] dimMatonia = new int[]{0};
    public static int minheightMatonia = 1;
    public static int maxheightMatonia = 100;
    public static double multiplierMatonia = 1;
    public static boolean genArchaeopteris = false;
    public static String[] genArchaeopterisBlacklistBiomes = new String[0];
    public static String[] genArchaeopterisOverrideBiomes = new String[0];
    public static int[] dimArchaeopteris = new int[]{0};
    public static int minheightArchaeopteris = 1;
    public static int maxheightArchaeopteris = 120;
    public static double multiplierArchaeopteris = 1;
    public static boolean genDollyphyton = false;
    public static String[] genDollyphytonBlacklistBiomes = new String[0];
    public static String[] genDollyphytonOverrideBiomes = new String[0];
    public static int[] dimDollyphyton = new int[]{0};
    public static int minheightDollyphyton = 1;
    public static int maxheightDollyphyton = 0;
    public static double multiplierDollyphyton = 1;
    public static int radiusDollyphyton = 3;
    public static boolean genNematophyta = false;
    public static String[] genNematophytaBlacklistBiomes = new String[0];
    public static String[] genNematophytaOverrideBiomes = new String[0];
    public static int[] dimNematophyta = new int[]{0};
    public static int minheightNematophyta = 1;
    public static int maxheightNematophyta = 0;
    public static double multiplierNematophyta = 1;
    public static int radiusNematophyta = 2;
    public static boolean genRhacophyton = false;
    public static String[] genRhacophytonBlacklistBiomes = new String[0];
    public static String[] genRhacophytonOverrideBiomes = new String[0];
    public static int[] dimRhacophyton = new int[]{0};
    public static int minheightRhacophyton = 1;
    public static int maxheightRhacophyton = 90;
    public static double multiplierRhacophyton = 1;
    public static boolean genPertica = false;
    public static String[] genPerticaBlacklistBiomes = new String[0];
    public static String[] genPerticaOverrideBiomes = new String[0];
    public static int[] dimPertica = new int[]{0};
    public static int minheightPertica = 1;
    public static int maxheightPertica = 90;
    public static double multiplierPertica = 1;
    public static boolean genTetraxylopteris = false;
    public static String[] genTetraxylopterisBlacklistBiomes = new String[0];
    public static String[] genTetraxylopterisOverrideBiomes = new String[0];
    public static int[] dimTetraxylopteris = new int[]{0};
    public static int minheightTetraxylopteris = 1;
    public static int maxheightTetraxylopteris = 90;
    public static double multiplierTetraxylopteris = 1;
    public static boolean genOsmunda = false;
    public static String[] genOsmundaBlacklistBiomes = new String[0];
    public static String[] genOsmundaOverrideBiomes = new String[0];
    public static int[] dimOsmunda = new int[]{0};
    public static int minheightOsmunda = 1;
    public static int maxheightOsmunda = 90;
    public static double multiplierOsmunda = 1;
    public static boolean genStauropteris = false;
    public static String[] genStauropterisBlacklistBiomes = new String[0];
    public static String[] genStauropterisOverrideBiomes = new String[0];
    public static int[] dimStauropteris = new int[]{0};
    public static int minheightStauropteris = 1;
    public static int maxheightStauropteris = 90;
    public static double multiplierStauropteris = 1;
    public static boolean genSkaaripteris = false;
    public static String[] genSkaaripterisBlacklistBiomes = new String[0];
    public static String[] genSkaaripterisOverrideBiomes = new String[0];
    public static int[] dimSkaaripteris = new int[]{0};
    public static int minheightSkaaripteris = 1;
    public static int maxheightSkaaripteris = 90;
    public static double multiplierSkaaripteris = 1;
    public static boolean genNeuropteridium = false;
    public static String[] genNeuropteridiumBlacklistBiomes = new String[0];
    public static String[] genNeuropteridiumOverrideBiomes = new String[0];
    public static int[] dimNeuropteridium = new int[]{0};
    public static int minheightNeuropteridium = 1;
    public static int maxheightNeuropteridium = 90;
    public static double multiplierNeuropteridium = 1;
    public static boolean genNilssoniocladusRedwood = false;
    public static boolean genNilssoniocladusAgathis = false;
    public static boolean genNilssoniocladusPararaucaria = false;
    public static boolean genNilssoniocladusAraucariaAraucana = false;
    public static boolean genNilssoniocladusMirabilis = false;
    public static String[] genNilssoniocladusBlacklistBiomes = new String[0];
    public static String[] genNilssoniocladusOverrideBiomes = new String[0];
    public static int[] dimNilssoniocladus = new int[]{0};
    public static boolean genLygodiumMonkeypuzzle = false;
    public static String[] genLygodiumBlacklistBiomes = new String[0];
    public static String[] genLygodiumOverrideBiomes = new String[0];
    public static int[] dimLygodium = new int[]{0};
    public static boolean genPalaeognetaleanaGangamopteris = false;
    public static boolean genPalaeognetaleanaGlossopteris = false;
    public static String[] genPalaeognetaleanaBlacklistBiomes = new String[0];
    public static String[] genPalaeognetaleanaOverrideBiomes = new String[0];
    public static int[] dimPalaeognetaleana = new int[]{0};
    public static boolean genOdontopterisLepidodendron = false;
    public static boolean genOdontopterisDiaphorodendron = false;
    public static boolean genOdontopterisCordaites = false;
    public static boolean genOdontopterisBothrodendron = false;
    public static boolean genOdontopterisSigillaria = false;
    public static String[] genOdontopterisBlacklistBiomes = new String[0];
    public static String[] genOdontopterisOverrideBiomes = new String[0];
    public static int[] dimOdontopteris = new int[]{0};
    
    public static boolean genLyginopterisPitys = false;
    public static String[] genLyginopterisBlacklistBiomes = new String[0];
    public static String[] genLyginopterisOverrideBiomes = new String[0];
    public static int[] dimLyginopteris = new int[]{0};

    public static boolean genAnkyropterisWalchia = false;
    public static boolean genAnkyropterisPitys = false;
    public static boolean genAnkyropterisSigillaria = false;
    public static boolean genAnkyropterisCalamites = false;
    public static boolean genAnkyropterisArthropitys = false;
    public static String[] genAnkyropterisBlacklistBiomes = new String[0];
    public static String[] genAnkyropterisOverrideBiomes = new String[0];
    public static int[] dimAnkyropteris = new int[]{0};

    public static boolean genCinnamonFern = false;
    public static String[] genCinnamonFernBlacklistBiomes = new String[0];
    public static String[] genCinnamonFernOverrideBiomes = new String[0];
    public static int[] dimCinnamonFern = new int[]{0};
    public static int minheightCinnamonFern = 1;
    public static int maxheightCinnamonFern = 110;
    public static double multiplierCinnamonFern = 1;
    public static boolean genDawnRedwood = false;
    public static String[] genDawnRedwoodBlacklistBiomes = new String[0];
    public static String[] genDawnRedwoodOverrideBiomes = new String[0];
    public static int[] dimDawnRedwood = new int[]{0};
    public static int minheightDawnRedwood = 1;
    public static int maxheightDawnRedwood = 90;
    public static double multiplierDawnRedwood = 1;
    
    public static boolean genBelemnopteris = false;
    public static String[] genBelemnopterisBlacklistBiomes = new String[0];
    public static String[] genBelemnopterisOverrideBiomes = new String[0];
    public static int[] dimBelemnopteris = new int[]{0};
    public static int minheightBelemnopteris = 1;
    public static int maxheightBelemnopteris = 0;
    public static double multiplierBelemnopteris = 1;

    public static boolean genBrasilodendron = false;
    public static String[] genBrasilodendronBlacklistBiomes = new String[0];
    public static String[] genBrasilodendronOverrideBiomes = new String[0];
    public static int[] dimBrasilodendron = new int[]{0};
    public static int minheightBrasilodendron = 1;
    public static int maxheightBrasilodendron = 0;
    public static double multiplierBrasilodendron = 1;
    
    public static boolean genPaurodendron = false;
    public static String[] genPaurodendronBlacklistBiomes = new String[0];
    public static String[] genPaurodendronOverrideBiomes = new String[0];
    public static int[] dimPaurodendron = new int[]{0};
    public static int minheightPaurodendron = 1;
    public static int maxheightPaurodendron = 0;
    public static double multiplierPaurodendron = 1;

    public static boolean genSurangephyllum = false;
    public static String[] genSurangephyllumBlacklistBiomes = new String[0];
    public static String[] genSurangephyllumOverrideBiomes = new String[0];
    public static int[] dimSurangephyllum = new int[]{0};
    public static int minheightSurangephyllum = 1;
    public static int maxheightSurangephyllum = 0;
    public static double multiplierSurangephyllum = 1;

    public static boolean genCyclodendron = false;
    public static String[] genCyclodendronBlacklistBiomes = new String[0];
    public static String[] genCyclodendronOverrideBiomes = new String[0];
    public static int[] dimCyclodendron = new int[]{0};
    public static int minheightCyclodendron = 1;
    public static int maxheightCyclodendron = 0;
    public static double multiplierCyclodendron = 1;

    public static boolean genPseudovoltzia = false;
    public static String[] genPseudovoltziaBlacklistBiomes = new String[0];
    public static String[] genPseudovoltziaOverrideBiomes = new String[0];
    public static int[] dimPseudovoltzia = new int[]{0};
    public static int minheightPseudovoltzia = 1;
    public static int maxheightPseudovoltzia = 0;
    public static double multiplierPseudovoltzia = 1;

    public static boolean genWachtlerina = false;
    public static String[] genWachtlerinaBlacklistBiomes = new String[0];
    public static String[] genWachtlerinaOverrideBiomes = new String[0];
    public static int[] dimWachtlerina = new int[]{0};
    public static int minheightWachtlerina = 1;
    public static int maxheightWachtlerina = 0;
    public static double multiplierWachtlerina = 1;

    public static boolean genThucydia = false;
    public static String[] genThucydiaBlacklistBiomes = new String[0];
    public static String[] genThucydiaOverrideBiomes = new String[0];
    public static int[] dimThucydia = new int[]{0};
    public static int minheightThucydia = 1;
    public static int maxheightThucydia = 0;
    public static double multiplierThucydia = 1;

    public static boolean genQuadrocladus = false;
    public static String[] genQuadrocladusBlacklistBiomes = new String[0];
    public static String[] genQuadrocladusOverrideBiomes = new String[0];
    public static int[] dimQuadrocladus = new int[]{0};
    public static int minheightQuadrocladus = 1;
    public static int maxheightQuadrocladus = 0;
    public static double multiplierQuadrocladus = 1;

    public static boolean genBuriadia = false;
    public static String[] genBuriadiaBlacklistBiomes = new String[0];
    public static String[] genBuriadiaOverrideBiomes = new String[0];
    public static int[] dimBuriadia = new int[]{0};
    public static int minheightBuriadia = 1;
    public static int maxheightBuriadia = 0;
    public static double multiplierBuriadia = 1;
    
    public static boolean genAlethopteris = false;
    public static String[] genAlethopterisBlacklistBiomes = new String[0];
    public static String[] genAlethopterisOverrideBiomes = new String[0];
    public static int[] dimAlethopteris = new int[]{0};
    public static int minheightAlethopteris = 1;
    public static int maxheightAlethopteris = 90;
    public static double multiplierAlethopteris = 1;
    public static boolean genEphedra = false;
    public static String[] genEphedraBlacklistBiomes = new String[0];
    public static String[] genEphedraOverrideBiomes = new String[0];
    public static int[] dimEphedra = new int[]{0};
    public static int minheightEphedra = 1;
    public static int maxheightEphedra = 0;
    public static double multiplierEphedra = 1;
    public static boolean genGuangdedendron = false;
    public static String[] genGuangdedendronBlacklistBiomes = new String[0];
    public static String[] genGuangdedendronOverrideBiomes = new String[0];
    public static int[] dimGuangdedendron = new int[]{0};
    public static int minheightGuangdedendron = 1;
    public static int maxheightGuangdedendron = 80;
    public static double multiplierGuangdedendron = 1;
    public static boolean genMarattia = false;
    public static String[] genMarattiaBlacklistBiomes = new String[0];
    public static String[] genMarattiaOverrideBiomes = new String[0];
    public static int[] dimMarattia = new int[]{0};
    public static int minheightMarattia = 1;
    public static int maxheightMarattia = 90;
    public static double multiplierMarattia = 1;
    public static boolean genEdwardsiphyton = false;
    public static String[] genEdwardsiphytonBlacklistBiomes = new String[0];
    public static String[] genEdwardsiphytonOverrideBiomes = new String[0];
    public static int[] dimEdwardsiphyton = new int[]{0};
    public static int minheightEdwardsiphyton = 1;
    public static int maxheightEdwardsiphyton = 0;
    public static double multiplierEdwardsiphyton = 1;
    public static int radiusEdwardsiphyton = 3;
    public static boolean genMaple = false;
    public static String[] genMapleBlacklistBiomes = new String[0];
    public static String[] genMapleOverrideBiomes = new String[0];
    public static int[] dimMaple = new int[]{0};
    public static int minheightMaple = 1;
    public static int maxheightMaple = 110;
    public static double multiplierMaple = 1;
    public static boolean genArchaefructus = false;
    public static String[] genArchaefructusBlacklistBiomes = new String[0];
    public static String[] genArchaefructusOverrideBiomes = new String[0];
    public static int[] dimArchaefructus = new int[]{0};
    public static int minheightArchaefructus = 1;
    public static int maxheightArchaefructus = 100;
    public static double multiplierArchaefructus = 1;
    public static boolean spreadArchaefructus = true;
    public static boolean genWaterHorsetail = false;
    public static String[] genWaterHorsetailBlacklistBiomes = new String[0];
    public static String[] genWaterHorsetailOverrideBiomes = new String[0];
    public static int[] dimWaterHorsetail = new int[]{0};
    public static int minheightWaterHorsetail = 1;
    public static int maxheightWaterHorsetail = 0;
    public static double multiplierWaterHorsetail = 1;
    public static boolean spreadWaterHorsetail = true;
    public static boolean genTyrmia = false;
    public static String[] genTyrmiaBlacklistBiomes = new String[0];
    public static String[] genTyrmiaOverrideBiomes = new String[0];
    public static int[] dimTyrmia = new int[]{0};
    public static int minheightTyrmia = 1;
    public static int maxheightTyrmia = 100;
    public static double multiplierTyrmia = 1;
    public static boolean genWielandiella = false;
    public static String[] genWielandiellaBlacklistBiomes = new String[0];
    public static String[] genWielandiellaOverrideBiomes = new String[0];
    public static int[] dimWielandiella = new int[]{0};
    public static int minheightWielandiella = 1;
    public static int maxheightWielandiella = 100;
    public static double multiplierWielandiella = 1;
    public static boolean genWoodHorsetail = false;
    public static String[] genWoodHorsetailBlacklistBiomes = new String[0];
    public static String[] genWoodHorsetailOverrideBiomes = new String[0];
    public static int[] dimWoodHorsetail = new int[]{0};
    public static int minheightWoodHorsetail = 1;
    public static int maxheightWoodHorsetail = 0;
    public static double multiplierWoodHorsetail = 1;
    public static boolean spreadWoodHorsetail = true;
    public static boolean genFieldHorsetail = false;
    public static String[] genFieldHorsetailBlacklistBiomes = new String[0];
    public static String[] genFieldHorsetailOverrideBiomes = new String[0];
    public static int[] dimFieldHorsetail = new int[]{0};
    public static int minheightFieldHorsetail = 1;
    public static int maxheightFieldHorsetail = 0;
    public static double multiplierFieldHorsetail = 1;
    public static boolean spreadFieldHorsetail = true;
    public static boolean genLadinia = false;
    public static String[] genLadiniaBlacklistBiomes = new String[0];
    public static String[] genLadiniaOverrideBiomes = new String[0];
    public static int[] dimLadinia = new int[]{0};
    public static int minheightLadinia = 1;
    public static int maxheightLadinia = 120;
    public static double multiplierLadinia = 1;
    public static boolean genUmaltolepis = false;
    public static String[] genUmaltolepisBlacklistBiomes = new String[0];
    public static String[] genUmaltolepisOverrideBiomes = new String[0];
    public static int[] dimUmaltolepis = new int[]{0};
    public static int minheightUmaltolepis = 1;
    public static int maxheightUmaltolepis = 90;
    public static double multiplierUmaltolepis = 1;
    public static boolean genArtocarpus = false;
    public static String[] genArtocarpusBlacklistBiomes = new String[0];
    public static String[] genArtocarpusOverrideBiomes = new String[0];
    public static int[] dimArtocarpus = new int[]{0};
    public static int minheightArtocarpus = 1;
    public static int maxheightArtocarpus = 90;
    public static double multiplierArtocarpus = 1;
    public static boolean genSphenopteris = false;
    public static String[] genSphenopterisBlacklistBiomes = new String[0];
    public static String[] genSphenopterisOverrideBiomes = new String[0];
    public static int[] dimSphenopteris = new int[]{0};
    public static int minheightSphenopteris = 1;
    public static int maxheightSphenopteris = 100;
    public static double multiplierSphenopteris = 1;
    public static boolean genEquisetites = false;
    public static String[] genEquisetitesBlacklistBiomes = new String[0];
    public static String[] genEquisetitesOverrideBiomes = new String[0];
    public static int[] dimEquisetites = new int[]{0};
    public static int minheightEquisetites = 1;
    public static int maxheightEquisetites = 90;
    public static double multiplierEquisetites = 1;
    public static boolean genSchizoneura = false;
    public static String[] genSchizoneuraBlacklistBiomes = new String[0];
    public static String[] genSchizoneuraOverrideBiomes = new String[0];
    public static int[] dimSchizoneura = new int[]{0};
    public static int minheightSchizoneura = 1;
    public static int maxheightSchizoneura = 90;
    public static double multiplierSchizoneura = 1;
    public static boolean genNothofagus = false;
    public static String[] genNothofagusBlacklistBiomes = new String[0];
    public static String[] genNothofagusOverrideBiomes = new String[0];
    public static int[] dimNothofagus = new int[]{0};
    public static int minheightNothofagus = 75;
    public static int maxheightNothofagus = 110;
    public static double multiplierNothofagus = 1;
    public static int podzolNothofagus = 4;

    public static boolean genPachypteris = false;
    public static String[] genPachypterisBlacklistBiomes = new String[0];
    public static String[] genPachypterisOverrideBiomes = new String[0];
    public static int[] dimPachypteris = new int[]{0};
    public static int minheightPachypteris = 1;
    public static int maxheightPachypteris = 90;
    public static double multiplierPachypteris = 1;

    public static String[] genStromatoliteBlacklistBiomes = new String[0];
    public static String[] genStromatoliteOverrideBiomes = new String[0];
    public static int[] dimStromatolite = new int[]{0};

    public static String[] genReefBlacklistBiomes = new String[0];
    public static String[] genReefOverrideBiomes = new String[0];
    public static int[] dimReef = new int[]{0};

    public static String[] genShellyReefBlacklistBiomes = new String[0];
    public static String[] genShellyReefOverrideBiomes = new String[0];
    public static int[] dimShellyReef = new int[]{};

    public static int[] dimEdiacaran = new int[0];
    //public static boolean animateEdiacaran = true;
    public static int weightEdiacaran = 100;

    public static int[] dimCrinoid = new int[0];
    public static String[] genCrinoidBlacklistBiomes = new String[0];
    public static String[] genCrinoidOverrideBiomes = new String[0];
    public static int weightCrinoid = 100;

    public static int[] dimWebsteroprion = new int[0];
    public static String[] genWebsteroprionBlacklistBiomes = new String[0];
    public static String[] genWebsteroprionOverrideBiomes = new String[0];
    public static int weightWebsteroprion = 100;

    public static int[] dimAlgae = new int[]{0};
    public static String[] genMacrocystisBlacklistBiomes = new String[0];
    public static String[] genMacrocystisOverrideBiomes = new String[0];
    public static int weightMacrocystis = 100;
    public static String[] genNereocystisBlacklistBiomes = new String[0];
    public static String[] genNereocystisOverrideBiomes = new String[0];
    public static int weightNereocystis = 100;
    public static String[] genBrownLeafyAlgaeBlacklistBiomes = new String[0];
    public static String[] genBrownLeafyAlgaeOverrideBiomes = new String[0];
    public static int weightBrownLeafyAlgae = 100;
    public static String[] genBrownStalkyAlgaeBlacklistBiomes = new String[0];
    public static String[] genBrownStalkyAlgaeOverrideBiomes = new String[0];
    public static int weightBrownStalkyAlgae = 100;
    public static String[] genGreenAlgaeMatBlacklistBiomes = new String[0];
    public static String[] genGreenAlgaeMatOverrideBiomes = new String[0];
    public static int weightGreenAlgaeMat = 100;
    public static String[] genGreenBranchedAlgaeBlacklistBiomes = new String[0];
    public static String[] genGreenBranchedAlgaeOverrideBiomes = new String[0];
    public static int weightGreenBranchedAlgae = 100;
    public static String[] genGreenCharaAlgaeBlacklistBiomes = new String[0];
    public static String[] genGreenCharaAlgaeOverrideBiomes = new String[0];
    public static int weightGreenCharaAlgae = 100;
    public static String[] genGreenCrustedAlgaeBlacklistBiomes = new String[0];
    public static String[] genGreenCrustedAlgaeOverrideBiomes = new String[0];
    public static int weightGreenCrustedAlgae = 100;
    public static String[] genGreenLeafyAlgaeBlacklistBiomes = new String[0];
    public static String[] genGreenLeafyAlgaeOverrideBiomes = new String[0];
    public static int weightGreenLeafyAlgae = 100;
    public static String[] genRedAlgaeMatBlacklistBiomes = new String[0];
    public static String[] genRedAlgaeMatOverrideBiomes = new String[0];
    public static int weightRedAlgaeMat = 100;
    public static String[] genRedLeafyAlgaeBlacklistBiomes = new String[0];
    public static String[] genRedLeafyAlgaeOverrideBiomes = new String[0];
    public static int weightRedLeafyAlgae = 100;
    public static String[] genRedTuftedAlgaeBlacklistBiomes = new String[0];
    public static String[] genRedTuftedAlgaeOverrideBiomes = new String[0];
    public static int weightRedTuftedAlgae = 100;
    public static String[] genSeaweedBlacklistBiomes = new String[0];
    public static String[] genSeaweedOverrideBiomes = new String[0];
    public static int weightSeaweed = 100;
    public static String[] genFilamentousAlgaeBlacklistBiomes = new String[0];
    public static String[] genFilamentousAlgaeOverrideBiomes = new String[0];
    public static int weightFilamentousAlgae = 100;
    public static boolean spreadFilamentousAlgae = true;
    public static String[] genPiledAlgaeBlacklistBiomes = new String[0];
    public static String[] genPiledAlgaeOverrideBiomes = new String[0];
    public static int weightPiledAlgae = 100;
    public static String[] genStalkedAlgaeBlacklistBiomes = new String[0];
    public static String[] genStalkedAlgaeOverrideBiomes = new String[0];
    public static int weightStalkedAlgae = 100;
    public static String[] genGreenSproutingAlgaeBlacklistBiomes = new String[0];
    public static String[] genGreenSproutingAlgaeOverrideBiomes = new String[0];
    public static int weightGreenSproutingAlgae = 100;
    public static String[] genGreenStemmedAlgaeBlacklistBiomes = new String[0];
    public static String[] genGreenStemmedAlgaeOverrideBiomes = new String[0];
    public static int weightGreenStemmedAlgae = 100;

    public static String[] genOrangeSpongeBlacklistBiomes = new String[0];
    public static String[] genOrangeSpongeOverrideBiomes = new String[0];
    public static int weightOrangeSponge = 10;
    public static String[] genRedSpongeBlacklistBiomes = new String[0];
    public static String[] genRedSpongeOverrideBiomes = new String[0];
    public static int weightRedSponge = 10;
    public static String[] genWhiteSpongeBlacklistBiomes = new String[0];
    public static String[] genWhiteSpongeOverrideBiomes = new String[0];
    public static int weightWhiteSponge = 10;
    public static String[] genFireSpongeBlacklistBiomes = new String[0];
    public static String[] genFireSpongeOverrideBiomes = new String[0];
    public static int weightFireSponge = 10;
    public static String[] genDarkPinkSpongeBlacklistBiomes = new String[0];
    public static String[] genDarkPinkSpongeOverrideBiomes = new String[0];
    public static int weightDarkPinkSponge = 10;
    public static String[] genPinkSpongeBlacklistBiomes = new String[0];
    public static String[] genPinkSpongeOverrideBiomes = new String[0];
    public static int weightPinkSponge = 10;
    public static String[] genYellowSpongeBlacklistBiomes = new String[0];
    public static String[] genYellowSpongeOverrideBiomes = new String[0];
    public static int weightYellowSponge = 10;
    public static String[] genBlueSpongeBlacklistBiomes = new String[0];
    public static String[] genBlueSpongeOverrideBiomes = new String[0];
    public static int weightBlueSponge = 10;
    public static String[] genBrownSpongeBlacklistBiomes = new String[0];
    public static String[] genBrownSpongeOverrideBiomes = new String[0];
    public static int weightBrownSponge = 10;
    public static String[] genBranchedSpongeBlacklistBiomes = new String[0];
    public static String[] genBranchedSpongeOverrideBiomes = new String[0];
    public static int weightBranchedSponge = 10;
    public static String[] genGigantospongiaBlacklistBiomes = new String[0];
    public static String[] genGigantospongiaOverrideBiomes = new String[0];
    public static int weightGigantospongia = 10;

    public static int[] dimRugosa = new int[0];
    public static String[] genRugosaBlacklistBiomes = new String[0];
    public static String[] genRugosaOverrideBiomes = new String[0];
    public static int weightRugosa = 10;

    public static int[] dimTabulata = new int[0];
    public static String[] genTabulataBlacklistBiomes = new String[0];
    public static String[] genTabulataOverrideBiomes = new String[0];
    public static int weightTabulata = 10;

    public static int[] dimFenestella = new int[0];
    public static String[] genFenestellaBlacklistBiomes = new String[0];
    public static String[] genFenestellaOverrideBiomes = new String[0];
    public static int weightFenestella = 10;

    public static int[] dimAnemone = new int[]{0};
    public static String[] genAnemoneBlacklistBiomes = new String[0];
    public static String[] genAnemoneOverrideBiomes = new String[0];
    public static int weightAnemone = 10;

    public static boolean genNathorstiana = false;
    public static String[] genNathorstianaBlacklistBiomes = new String[0];
    public static String[] genNathorstianaOverrideBiomes = new String[0];
    public static int[] dimNathorstiana = new int[]{0};
    public static int minheightNathorstiana = 1;
    public static int maxheightNathorstiana = 0;
    public static double multiplierNathorstiana = 1;
    public static boolean spreadNathorstiana = true;
    public static boolean genOmphalophloios = false;
    public static String[] genOmphalophloiosBlacklistBiomes = new String[0];
    public static String[] genOmphalophloiosOverrideBiomes = new String[0];
    public static int[] dimOmphalophloios = new int[]{0};
    public static int minheightOmphalophloios = 1;
    public static int maxheightOmphalophloios = 100;
    public static double multiplierOmphalophloios = 1;

    public static boolean genNeocalamites = false;
    public static String[] genNeocalamitesBlacklistBiomes = new String[0];
    public static String[] genNeocalamitesOverrideBiomes = new String[0];
    public static int[] dimNeocalamites = new int[]{0};
    public static int minheightNeocalamites = 1;
    public static int maxheightNeocalamites = 90;
    public static double multiplierNeocalamites = 1;

    public static boolean genPhyllotheca = false;
    public static String[] genPhyllothecaBlacklistBiomes = new String[0];
    public static String[] genPhyllothecaOverrideBiomes = new String[0];
    public static int[] dimPhyllotheca = new int[]{0};
    public static int minheightPhyllotheca = 1;
    public static int maxheightPhyllotheca = 90;
    public static double multiplierPhyllotheca = 1;

    public static boolean genEquisetitesReed = false;
    public static String[] genEquisetitesReedBlacklistBiomes = new String[0];
    public static String[] genEquisetitesReedOverrideBiomes = new String[0];
    public static int[] dimEquisetitesReed = new int[]{0};
    public static int minheightEquisetitesReed = 1;
    public static int maxheightEquisetitesReed = 120;
    public static double multiplierEquisetitesReed = 1;

    public static boolean genYew = false;
    public static String[] genYewBlacklistBiomes = new String[0];
    public static String[] genYewOverrideBiomes = new String[0];
    public static int[] dimYew = new int[]{0};
    public static int minheightYew = 1;
    public static int maxheightYew = 110;
    public static double multiplierYew = 1;

    public static boolean genBrachyphyllum = false;
    public static String[] genBrachyphyllumBlacklistBiomes = new String[0];
    public static String[] genBrachyphyllumOverrideBiomes = new String[0];
    public static int[] dimBrachyphyllum = new int[]{0};
    public static int minheightBrachyphyllum = 1;
    public static int maxheightBrachyphyllum = 110;
    public static double multiplierBrachyphyllum = 1;

    public static boolean genCzekanowskia = false;
    public static String[] genCzekanowskiaBlacklistBiomes = new String[0];
    public static String[] genCzekanowskiaOverrideBiomes = new String[0];
    public static int[] dimCzekanowskia = new int[]{0};
    public static int minheightCzekanowskia = 1;
    public static int maxheightCzekanowskia = 110;
    public static double multiplierCzekanowskia = 1;

    public static boolean genPterophyllum = false;
    public static String[] genPterophyllumBlacklistBiomes = new String[0];
    public static String[] genPterophyllumOverrideBiomes = new String[0];
    public static int[] dimPterophyllum = new int[]{0};
    public static int minheightPterophyllum = 1;
    public static int maxheightPterophyllum = 90;
    public static double multiplierPterophyllum = 1;

    public static boolean genPhasmatocycas = false;
    public static String[] genPhasmatocycasBlacklistBiomes = new String[0];
    public static String[] genPhasmatocycasOverrideBiomes = new String[0];
    public static int[] dimPhasmatocycas = new int[]{0};
    public static int minheightPhasmatocycas = 1;
    public static int maxheightPhasmatocycas = 90;
    public static double multiplierPhasmatocycas = 1;

    public static boolean genQuasistrobus = false;
    public static String[] genQuasistrobusBlacklistBiomes = new String[0];
    public static String[] genQuasistrobusOverrideBiomes = new String[0];
    public static int[] dimQuasistrobus = new int[]{0};
    public static int minheightQuasistrobus = 1;
    public static int maxheightQuasistrobus = 85;
    public static double multiplierQuasistrobus = 1;
    public static boolean genUtrechtia = false;
    public static String[] genUtrechtiaBlacklistBiomes = new String[0];
    public static String[] genUtrechtiaOverrideBiomes = new String[0];
    public static int[] dimUtrechtia = new int[]{0};
    public static int minheightUtrechtia = 1;
    public static int maxheightUtrechtia = 110;
    public static double multiplierUtrechtia = 1;

    public static boolean genSelaginella = false;
    public static String[] genSelaginellaBlacklistBiomes = new String[0];
    public static String[] genSelaginellaOverrideBiomes = new String[0];
    public static int[] dimSelaginella = new int[]{0};
    public static int minheightSelaginella = 1;
    public static int maxheightSelaginella = 0;
    public static double multiplierSelaginella = 1;
    public static int radiusSelaginella = 1;

    public static boolean genCobbania = false;
    public static String[] genCobbaniaBlacklistBiomes = new String[0];
    public static String[] genCobbaniaOverrideBiomes = new String[0];
    public static int[] dimCobbania = new int[]{0};
    public static int minheightCobbania = 1;
    public static int maxheightCobbania = 80;
    public static double multiplierCobbania = 1;
    public static boolean spreadCobbania = true;

    public static boolean genElkinsia = false;
    public static String[] genElkinsiaBlacklistBiomes = new String[0];
    public static String[] genElkinsiaOverrideBiomes = new String[0];
    public static int[] dimElkinsia = new int[]{0};
    public static int minheightElkinsia = 1;
    public static int maxheightElkinsia = 95;
    public static double multiplierElkinsia = 1;

    public static boolean genPalaeostachya = false;
    public static String[] genPalaeostachyaBlacklistBiomes = new String[0];
    public static String[] genPalaeostachyaOverrideBiomes = new String[0];
    public static int[] dimPalaeostachya = new int[]{0};
    public static int minheightPalaeostachya = 1;
    public static int maxheightPalaeostachya = 95;
    public static double multiplierPalaeostachya = 1;

    public static boolean genCallistophytalesLepidodendron = false;
    public static boolean genCallistophytalesCordaites = false;
    public static boolean genCallistophytalesBothrodendron = false;
    public static boolean genCallistophytalesDiaphorodendron = false;
    public static String[] genCallistophytalesBlacklistBiomes = new String[0];
    public static String[] genCallistophytalesOverrideBiomes = new String[0];
    public static int[] dimCallistophytales = new int[]{0};
    public static boolean genPseudobornia = false;
    public static String[] genPseudoborniaBlacklistBiomes = new String[0];
    public static String[] genPseudoborniaOverrideBiomes = new String[0];
    public static int[] dimPseudobornia = new int[]{0};
    public static int minheightPseudobornia = 1;
    public static int maxheightPseudobornia = 90;
    public static double multiplierPseudobornia = 1;
    public static boolean genEremopteris = false;
    public static String[] genEremopterisBlacklistBiomes = new String[0];
    public static String[] genEremopterisOverrideBiomes = new String[0];
    public static int[] dimEremopteris = new int[]{0};
    public static int minheightEremopteris = 1;
    public static int maxheightEremopteris = 90;
    public static double multiplierEremopteris = 1;
    public static boolean genAdoketophyton = false;
    public static String[] genAdoketophytonBlacklistBiomes = new String[0];
    public static String[] genAdoketophytonOverrideBiomes = new String[0];
    public static int[] dimAdoketophyton = new int[]{0};
    public static int waterAdoketophytonHorizontal = 3;
    public static int waterAdoketophytonVertical = 0;
    public static int minheightAdoketophyton = 1;
    public static int maxheightAdoketophyton = 90;
    public static double multiplierAdoketophyton = 1;
    public static boolean spreadAdoketophyton = true;

    public static int[] dimTmesipteris = new int[]{0};
    public static boolean genTmesipteris = false;
    public static String[] genTmesipterisBlacklistBiomes = new String[0];
    public static String[] genTmesipterisOverrideBiomes = new String[0];
    public static double multiplierTmesipteris = 1;

    public static int[] dimFernEpiphyte = new int[]{0};
    public static boolean genFernEpiphyte = false;
    public static String[] genFernEpiphyteBlacklistBiomes = new String[0];
    public static String[] genFernEpiphyteOverrideBiomes = new String[0];
    public static double multiplierFernEpiphyte = 1;

    public static int[] dimLeptopterisEpiphyte = new int[]{0};
    public static boolean genLeptopterisEpiphyte = false;
    public static String[] genLeptopterisEpiphyteBlacklistBiomes = new String[0];
    public static String[] genLeptopterisEpiphyteOverrideBiomes = new String[0];
    public static double multiplierLeptopterisEpiphyte = 1;

    public static int[] dimMossWood = new int[]{0};
    public static boolean genMossWood = false;
    public static String[] genMossWoodBlacklistBiomes = new String[0];
    public static String[] genMossWoodOverrideBiomes = new String[0];
    public static double multiplierMossWood = 1;

    public static boolean genPrimaevalGrass = false;
    public static String[] genPrimaevalGrassBlacklistBiomes = new String[0];
    public static String[] genPrimaevalGrassOverrideBiomes = new String[0];
    public static int[] dimPrimaevalGrass = new int[]{0};
    public static int minheightPrimaevalGrass = 1;
    public static int maxheightPrimaevalGrass = 0;
    public static double multiplierPrimaevalGrass = 1;
    public static boolean spreadPrimaevalGrass = true;
    
    public static boolean genSwampHorsetail = false;
    public static String[] genSwampHorsetailBlacklistBiomes = new String[0];
    public static String[] genSwampHorsetailOverrideBiomes = new String[0];
    public static int[] dimSwampHorsetail = new int[]{0};
    public static int minheightSwampHorsetail = 1;
    public static int maxheightSwampHorsetail = 0;
    public static double multiplierSwampHorsetail = 1;
    public static boolean spreadSwampHorsetail = true;

    public static int waterHibbertopterus = 2;
    public static int waterLimnoscelis = 10;
    public static int waterEryops = 4;
    public static int waterAcanthostomatops = 6;
    public static int waterProterogyrinus = 7;
    public static int waterAmphibamus = 8;
    public static int waterIchthyostega = 6;
    public static int waterPrionosuchus = 6;
    public static int waterPholiderpeton = 7;
    public static int waterMesosaurus = 5; //not editable - does not affect mob health, only AI
    public static int waterClaudiosaurus = 5; //not editable - does not affect mob health, only AI
    public static int waterKalbarria = 2;
    public static int waterAcanthostega = 2;
    public static int waterMegalocephalus = 4;
    public static int waterSpathicephalus = 4;
    public static boolean colourPulmonoscorpius = true;
    public static int waterPederpes = 16;
    public static int waterPlatyhystrix = 16;

    public LepidodendronConfig() {
    }

    public static void load(FMLPreInitializationEvent event) {
        cfg = new Configuration(event.getSuggestedConfigurationFile(), "1.0", false);
        MinecraftForge.EVENT_BUS.register(instance);
        syncConfigPlants();
        syncConfigGeneral();
    }

    @SubscribeEvent
    public void update(OnConfigChangedEvent event) {
        if (event.getModID().equals("lepidodendron")) {
            syncConfigPlants();
            syncConfigGeneral();
        }

    }

    public static boolean syncConfigPlants() {
        List<String> propOrder = Lists.newArrayList();
        Property prop = cfg.get("Global World-Gen", "genGlobalBlacklist", genGlobalBlacklist);
        prop.setComment("List of biomes all plants are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGlobalBlacklist = prop.getStringList();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "doSpores", doSpores);
        prop.setComment("Use spore propagation method instead of sapling-drops for appropriate plants [default: true]");
        doSpores = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("Global World-Gen", "doFruits", doFruits);
        prop.setComment("Use fruits and cones propagation method instead of sapling-drops for appropriate plants [default: true]");
        doFruits = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("Global World-Gen", "doSeeds", doSeeds);
        prop.setComment("Use seed propagation method instead of sapling-drops for appropriate plants [default: true]");
        doSeeds = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("Global World-Gen", "doFlowers", doFlowers);
        prop.setComment("Use flowers and pollination propagation method instead of sapling-drops for appropriate plants [default: true]");
        doFlowers = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "genAllPlants", genAllPlants);
        prop.setComment("If set to true then all plants from this mod will generate, no matter how you set them below. You can still block them from biomes and dimensions in their individual settings. This setting does not affect algae. [default: false]");
        genAllPlants = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "spreadPlants", spreadPlants);
        prop.setComment("Percentage chance that a spreadable plant tries to spread when it receives a random tick (or is bonemealed). Does not affect other growth, only spread. (1 to 100) [default: 70]");
        spreadPlants = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "radiusBacterialCrust", radiusBacterialCrust);
        prop.setComment("Radius Bacterial Crust can spread (0 to 8) [default: 6]");
        radiusBacterialCrust = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "radiusLichen", radiusLichen);
        prop.setComment("Radius Lichen can spread (0 to 8) [default: 2]");
        radiusLichen = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "genLogResin", genLogResin);
        prop.setComment("List of log blocks which produce resin, in the format: modid:blockid:meta [default: \"minecraft:log:1\", \"lepidodendron:hymenaea_log\", \"lepidodendron:agathis_log\", \"lepidodendron:araucarioxylon_log\", \"lepidodendron:bunya_log\", \"lepidodendron:columnaris_log\", \"lepidodendron:monkeypuzzle_log\", \"lepidodendron:sciadopitys_log\", \"lepidodendron:wollemi_log\", \"biomesoplenty:log_2:6\", \"biomesoplenty:log_0:7\", \"jurassicraft:araucaria_log\", \"wildnature:cedar_log\", \"wildnature:fir_log\", \"wildnature:pine_log\"]");
        genLogResin = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Prehistoric Ground Cover", "genPlantPrehistoric", genPlantPrehistoric);
        prop.setComment("List of blocks and items from OTHER mods which can be used to craft Prehistoric Ground Cover, in the format: modid:blockid:meta [default: \"fossil:bennettitales_large\",\"fossil:bennettitales_small\",\"fossil:calamites_leaves\",\"fossil:calamites_sapling\",\"fossil:cordaites_leaves\",\"fossil:cordaites_sapling\",\"fossil:crataegus\",\"fossil:cyathea\",\"fossil:dictyophyllum\",\"fossil:dillhoffia_flower\",\"fossil:dipteris\",\"fossil:duisbergia\",\"fossil:ependra\",\"fossil:fern_block\",\"fossil:florissantia\",\"fossil:foozia\",\"fossil:fossil_sapling_calamites\",\"fossil:fossil_sapling_cordaites\",\"fossil:fossil_sapling_palae\",\"fossil:fossil_sapling_sigillaria\",\"fossil:horsetail_small\",\"fossil:licopodiophyta\",\"fossil:osmunda\",\"fossil:palm_leaves\",\"fossil:palm_sapling\",\"fossil:sagenopteris\",\"fossil:sarracenia\",\"fossil:sigillaria_leaves\",\"fossil:sigillaria_sapling\",\"fossil:tempskya\",\"fossil:vaccinium\",\"fossil:welwitschia\",\"fossil:zamites\",\"jurassicraft:ajuginucula_smithii\",\"jurassicraft:ajuginucula_smithii_leaves\",\"jurassicraft:araucaria_leaves\",\"jurassicraft:araucaria_sapling\",\"jurassicraft:bennettitalean_cycadeoidea\",\"jurassicraft:bristle_fern\",\"jurassicraft:calamites_leaves\",\"jurassicraft:calamites_sapling\",\"jurassicraft:cinnamon_fern\",\"jurassicraft:cry_pansy\",\"jurassicraft:cycad_zamites\",\"jurassicraft:dicksonia\",\"jurassicraft:dicroidium_zuberi\",\"jurassicraft:dictyophyllum\",\"jurassicraft:encephalartos\",\"jurassicraft:ginkgo_leaves\",\"jurassicraft:ginkgo_sapling\",\"jurassicraft:gracilaria_seaweed\",\"jurassicraft:graminidites_bambusoides\",\"jurassicraft:heliconia\",\"jurassicraft:ladinia_simplex\",\"jurassicraft:moss\",\"jurassicraft:orontium_mackii\",\"jurassicraft:paleo_bale_cycad\",\"jurassicraft:paleo_bale_cycadeoidea\",\"jurassicraft:paleo_bale_fern\",\"jurassicraft:paleo_bale_leaves\",\"jurassicraft:paleo_bale_other\",\"jurassicraft:phoenix_leaves\",\"jurassicraft:phoenix_sapling\",\"jurassicraft:psaronius_leaves\",\"jurassicraft:psaronius_sapling\",\"jurassicraft:raphaelia\",\"jurassicraft:rhacophyton\",\"jurassicraft:rhamnus_salicifolius\",\"jurassicraft:scaly_tree_fern\",\"jurassicraft:serenna_veriformans\",\"jurassicraft:small_chain_fern\",\"jurassicraft:small_cycad\",\"jurassicraft:small_royal_fern\",\"jurassicraft:tempskya\",\"jurassicraft:umaltolepis\",\"jurassicraft:west_indian_lilac\",\"jurassicraft:woolly_stalked_begonia\",\"rebornmod:ajuginucula_smithii\",\"rebornmod:ajuginucula_smithii_leaves\",\"rebornmod:araucaria_leaves\",\"rebornmod:araucaria_sapling\",\"rebornmod:bennettitalean_cycadeoidea\",\"rebornmod:bristle_fern\",\"rebornmod:calamites_leaves\",\"rebornmod:calamites_sapling\",\"rebornmod:cinnamon_fern\",\"rebornmod:cry_pansy\",\"rebornmod:cycad_zamites\",\"rebornmod:dicksonia\",\"rebornmod:dicroidium_zuberi\",\"rebornmod:dictyophyllum\",\"rebornmod:encephalartos\",\"rebornmod:ginkgo_leaves\",\"rebornmod:ginkgo_sapling\",\"rebornmod:gracilaria_seaweed\",\"rebornmod:graminidites_bambusoides\",\"rebornmod:heliconia\",\"rebornmod:ladinia_simplex\",\"rebornmod:moss\",\"rebornmod:orontium_mackii\",\"rebornmod:paleo_bale_cycad\",\"rebornmod:paleo_bale_cycadeoidea\",\"rebornmod:paleo_bale_fern\",\"rebornmod:paleo_bale_leaves\",\"rebornmod:paleo_bale_other\",\"rebornmod:phoenix_leaves\",\"rebornmod:phoenix_sapling\",\"rebornmod:psaronius_leaves\",\"rebornmod:psaronius_sapling\",\"rebornmod:raphaelia\",\"rebornmod:rhacophyton\",\"rebornmod:rhamnus_salicifolius\",\"rebornmod:scaly_tree_fern\",\"rebornmod:serenna_veriformans\",\"rebornmod:small_chain_fern\",\"rebornmod:small_cycad\",\"rebornmod:small_royal_fern\",\"rebornmod:tempskya\",\"rebornmod:umaltolepis\",\"rebornmod:west_indian_lilac\",\"rebornmod:woolly_stalked_begonia\"]");
        genPlantPrehistoric = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Prehistoric Ground Cover", "waterSandHorizontal", waterSandHorizontal);
        prop.setComment("Distance NSEW from water that sandy prehistoric ground can exist and spread onto neighbouring sand (1 to 16) [default: 6]");
        waterSandHorizontal = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Prehistoric Ground Cover", "waterSandVertical", waterSandVertical);
        prop.setComment("Distance above water required for sandy prehistoric ground to exist (0 to 6) [default: 0]");
        waterSandVertical = prop.getInt();
        propOrder.add(prop.getName());prop = cfg.get("Prehistoric Ground Cover", "waterPangaeanHorizontal", waterPangaeanHorizontal);
        prop.setComment("Distance NSEW from water that Pangaean sandy prehistoric ground can exist and spread onto neighbouring sand (1 to 16) [default: 3]");
        waterPangaeanHorizontal = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Prehistoric Ground Cover", "waterPangaeanVertical", waterPangaeanVertical);
        prop.setComment("Distance above water required for Pangaean sandy prehistoric ground to exist (0 to 6) [default: 0]");
        waterPangaeanVertical = prop.getInt();
        propOrder.add(prop.getName());


        prop = cfg.get("~EXPERIMENTAL OPTION: Terraform (not guaranteed - experiment at your own risk)", "genTransformBiomes", genTransformBiomes);
        prop.setComment("List of vanilla biomes to terraform (CPU-heavy!). This will make the plants from this mod generate far more densely, like forests. It will also remove all vanilla trees, plants, etc. from the chosen biomes, unless you retain them using the options below. This is not a true world-gen setting but works on every new chunk loaded while this option is on. Remember to turn it off again if you load a world you don't want terraforming! CAUTION: there is no way to re-add removed vanilla plants after this option removes them. This will not affect modded biomes or any modded trees or other decorations. In the format: minecraft:biomeid or just \"minecraft\" to apply to all vanilla biomes (cannot be applied globally to non-vanilla biomes at present, so you would need to list non-vanilla ones by biomeid) [default: empty]");
        genTransformBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("~EXPERIMENTAL OPTION: Terraform (not guaranteed - experiment at your own risk)", "genTransformBiomesTrees", genTransformBiomesTrees);
        prop.setComment("Retain vanilla trees in terraformed biomes [default: false]");
        genTransformBiomesTrees = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("~EXPERIMENTAL OPTION: Terraform (not guaranteed - experiment at your own risk)", "genTransformBiomesCactus", genTransformBiomesCactus);
        prop.setComment("Retain vanilla cactus in terraformed biomes [default: false]");
        genTransformBiomesCactus = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("~EXPERIMENTAL OPTION: Terraform (not guaranteed - experiment at your own risk)", "genTransformBiomesMushrooms", genTransformBiomesMushrooms);
        prop.setComment("Retain vanilla mushrooms in terraformed biomes [default: false]");
        genTransformBiomesMushrooms = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("~EXPERIMENTAL OPTION: Terraform (not guaranteed - experiment at your own risk)", "genTransformBiomesFlowers", genTransformBiomesFlowers);
        prop.setComment("Retain vanilla flowers and lilypads in terraformed biomes [default: false]");
        genTransformBiomesFlowers = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("~EXPERIMENTAL OPTION: Terraform (not guaranteed - experiment at your own risk)", "genTransformBiomesPumpkins", genTransformBiomesPumpkins);
        prop.setComment("Retain vanilla pumpkins and melons in terraformed biomes [default: false]");
        genTransformBiomesPumpkins = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("~EXPERIMENTAL OPTION: Terraform (not guaranteed - experiment at your own risk)", "genTransformBiomesReeds", genTransformBiomesReeds);
        prop.setComment("Retain vanilla sugarcane in terraformed biomes [default: false]");
        genTransformBiomesReeds = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Stromatolite", "dimStromatolite", dimStromatolite);
        prop.setComment("List of dimension IDs Stromatolites can generate in [default: 0]");
        dimStromatolite = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stromatolite", "genStromatoliteBlacklistBiomes", genStromatoliteBlacklistBiomes);
        prop.setComment("List of biomes Stromatolite are blacklisted from, in the format: modid:biomeid [default: empty]");
        genStromatoliteBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stromatolite", "genStromatoliteOverrideBiomes", genStromatoliteOverrideBiomes);
        prop.setComment("List of biomes Stromatolites are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genStromatoliteOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Reef", "dimReef", dimReef);
        prop.setComment("List of dimension IDs Coral Reef blocks can generate in [default: 0]");
        dimReef = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reef", "genReefBlacklistBiomes", genReefBlacklistBiomes);
        prop.setComment("List of biomes Coral Reef blocks are blacklisted from, in the format: modid:biomeid [default: empty]");
        genReefBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reef", "genReefOverrideBiomes", genReefOverrideBiomes);
        prop.setComment("List of biomes Coral Reef blocks are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genReefOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Reef", "dimShellyReef", dimShellyReef);
        prop.setComment("List of dimension IDs Shelly Reef blocks can generate in [default: empty]");
        dimShellyReef = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reef", "genShellyReefBlacklistBiomes", genShellyReefBlacklistBiomes);
        prop.setComment("List of biomes Shelly Reef blocks are blacklisted from, in the format: modid:biomeid [default: empty]");
        genShellyReefBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reef", "genShellyReefOverrideBiomes", genShellyReefOverrideBiomes);
        prop.setComment("List of biomes Shelly Reef blocks are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genShellyReefOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ediacaran", "dimEdiacaran", dimEdiacaran);
        prop.setComment("List of dimension IDs the Ediacaran Biota can generate in [default: empty]");
        dimEdiacaran = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ediacaran", "weightEdiacaran", weightEdiacaran);
        prop.setComment("Percentage chance that non-mob-like members of the Ediacaran Biota generate in a suitable chunk (0 to 100) [default: 100]");
        weightEdiacaran = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "dimAlgae", dimAlgae);
        prop.setComment("List of dimension IDs Algae and Sponges can generate in [default: 0]");
        dimAlgae = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genMacrocystisBlacklistBiomes", genMacrocystisBlacklistBiomes);
        prop.setComment("List of biomes Macrocystis Kelp is blacklisted from, in the format: modid:biomeid [default: empty]");
        genMacrocystisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genMacrocystisOverrideBiomes", genMacrocystisOverrideBiomes);
        prop.setComment("List of biomes Macrocystis Kelp is forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genMacrocystisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightMacrocystis", weightMacrocystis);
        prop.setComment("Percentage chance that Macrocysistis Kelp generates in a suitable chunk (0 to 100) [default: 100]");
        weightMacrocystis = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genFilamentousAlgaeBlacklistBiomes", genFilamentousAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Filamentous Algae is blacklisted from, in the format: modid:biomeid [default: empty]");
        genFilamentousAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genFilamentousAlgaeOverrideBiomes", genFilamentousAlgaeOverrideBiomes);
        prop.setComment("List of biomes Filamentous Algae is forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genFilamentousAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightFilamentousAlgae", weightFilamentousAlgae);
        prop.setComment("Percentage chance that Filamentous Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightFilamentousAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "spreadFilamentousAlgae", spreadFilamentousAlgae);
        prop.setComment("Set to true for Filamentous Algae to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadFilamentousAlgae = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Crinoids", "dimCrinoid", dimCrinoid);
        prop.setComment("List of dimension IDs Crinoids, Cystoids, Graptolites, and other sessile creatures etc. can generate in [default: empty]");
        dimCrinoid = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Crinoids", "genCrinoidBlacklistBiomes", genCrinoidBlacklistBiomes);
        prop.setComment("List of biomes Crinoids, Cystoids, Graptolites, and other sessile creatures etc. are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCrinoidBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Crinoids", "genCrinoidOverrideBiomes", genCrinoidOverrideBiomes);
        prop.setComment("List of biomes Crinoids, Cystoids, Graptolites, and other sessile creatures etc. are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genCrinoidOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Crinoids", "weightCrinoid", weightCrinoid);
        prop.setComment("Percentage chance that Crinoids, Cystoids, Graptolites, and other sessile creatures etc. generate in a suitable chunk (0 to 100) [default: 100]");
        weightCrinoid = prop.getInt();
        propOrder.add(prop.getName());
        
        prop = cfg.get("WorldGen Websteroprion", "dimWebsteroprion", dimWebsteroprion);
        prop.setComment("List of dimension IDs Websteroprion burrows can generate in [default: empty]");
        dimWebsteroprion = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Websteroprion", "genWebsteroprionBlacklistBiomes", genWebsteroprionBlacklistBiomes);
        prop.setComment("List of biomes Websteroprion burrows are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWebsteroprionBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Websteroprion", "genWebsteroprionOverrideBiomes", genWebsteroprionOverrideBiomes);
        prop.setComment("List of biomes Websteroprion burrows are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genWebsteroprionOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Websteroprion", "weightWebsteroprion", weightWebsteroprion);
        prop.setComment("Percentage chance that Websteroprion burrows generate in a suitable chunk (0 to 100) [default: 100]");
        weightWebsteroprion = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genNereocystisBlacklistBiomes", genNereocystisBlacklistBiomes);
        prop.setComment("List of biomes Nereocystis Kelp is blacklisted from, in the format: modid:biomeid [default: empty]");
        genNereocystisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genNereocystisOverrideBiomes", genNereocystisOverrideBiomes);
        prop.setComment("List of biomes Nereocystis Kelp is forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genNereocystisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightNereocystis", weightNereocystis);
        prop.setComment("Percentage chance that Nereocystis Kelp generates in a suitable chunk (0 to 100) [default: 100]");
        weightNereocystis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genBrownLeafyAlgaeBlacklistBiomes", genBrownLeafyAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Brown Leafy Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBrownLeafyAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genBrownLeafyAlgaeOverrideBiomes", genBrownLeafyAlgaeOverrideBiomes);
        prop.setComment("List of biomes Brown Leafy Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genBrownLeafyAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightBrownLeafyAlgae", weightBrownLeafyAlgae);
        prop.setComment("Percentage chance thatBrown Leafy Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightBrownLeafyAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genBrownStalkyAlgaeBlacklistBiomes", genBrownStalkyAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Brown Stalky Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBrownStalkyAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genBrownStalkyAlgaeOverrideBiomes", genBrownStalkyAlgaeOverrideBiomes);
        prop.setComment("List of biomes Brown Stalky Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genBrownStalkyAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightBrownStalkyAlgae", weightBrownStalkyAlgae);
        prop.setComment("Percentage chance that Brown Stalky Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightBrownStalkyAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenAlgaeMatBlacklistBiomes", genGreenAlgaeMatBlacklistBiomes);
        prop.setComment("List of biomes Green Algae Mats are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGreenAlgaeMatBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenAlgaeMatOverrideBiomes", genGreenAlgaeMatOverrideBiomes);
        prop.setComment("List of biomes Green Algae Mats are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genGreenAlgaeMatOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightGreenAlgaeMat", weightGreenAlgaeMat);
        prop.setComment("Percentage chance that Green Algae Mats generate in a suitable chunk (0 to 100) [default: 100]");
        weightGreenAlgaeMat = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenBranchedAlgaeBlacklistBiomes", genGreenBranchedAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Green Branched Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGreenBranchedAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenBranchedAlgaeOverrideBiomes", genGreenBranchedAlgaeOverrideBiomes);
        prop.setComment("List of biomes Green Branched Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genGreenBranchedAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightGreenBranchedAlgae", weightGreenBranchedAlgae);
        prop.setComment("Percentage chance that Green Branched Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightGreenBranchedAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenCharaAlgaeBlacklistBiomes", genGreenCharaAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Green Chara Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGreenCharaAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenCharaAlgaeOverrideBiomes", genGreenCharaAlgaeOverrideBiomes);
        prop.setComment("List of biomes Green Chara Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genGreenCharaAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightGreenCharaAlgae", weightGreenCharaAlgae);
        prop.setComment("Percentage chance that Green Chara Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightGreenCharaAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenCrustedAlgaeBlacklistBiomes", genGreenCrustedAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Green Crusted Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGreenCrustedAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenCrustedAlgaeOverrideBiomes", genGreenCrustedAlgaeOverrideBiomes);
        prop.setComment("List of biomes Green Crusted Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genGreenCrustedAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightGreenCrustedAlgae", weightGreenCrustedAlgae);
        prop.setComment("Percentage chance that Green Crusted Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightGreenCrustedAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenLeafyAlgaeBlacklistBiomes", genGreenLeafyAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Green Leafy Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGreenLeafyAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenLeafyAlgaeOverrideBiomes", genGreenLeafyAlgaeOverrideBiomes);
        prop.setComment("List of biomes Green Leafy Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genGreenLeafyAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightGreenLeafyAlgae", weightGreenLeafyAlgae);
        prop.setComment("Percentage chance that Green Leafy Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightGreenLeafyAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genRedAlgaeMatBlacklistBiomes", genRedAlgaeMatBlacklistBiomes);
        prop.setComment("List of biomes Red Algae Mats are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRedAlgaeMatBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genRedAlgaeMatOverrideBiomes", genRedAlgaeMatOverrideBiomes);
        prop.setComment("List of biomes Red Algae Mats are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genRedAlgaeMatOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightRedAlgaeMat", weightRedAlgaeMat);
        prop.setComment("Percentage chance that Red Algae Mats generate in a suitable chunk (0 to 100) [default: 100]");
        weightRedAlgaeMat = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genRedLeafyAlgaeBlacklistBiomes", genRedLeafyAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Red Leafy Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRedLeafyAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genRedLeafyAlgaeOverrideBiomes", genRedLeafyAlgaeOverrideBiomes);
        prop.setComment("List of biomes Red Leafy Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genRedLeafyAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightRedLeafyAlgae", weightRedLeafyAlgae);
        prop.setComment("Percentage chance that Red Leafy Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightRedLeafyAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genRedTuftedAlgaeBlacklistBiomes", genRedTuftedAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Red Tufted Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRedTuftedAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genRedTuftedAlgaeOverrideBiomes", genRedTuftedAlgaeOverrideBiomes);
        prop.setComment("List of biomes Red Tufted Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genRedTuftedAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightRedTuftedAlgae", weightRedTuftedAlgae);
        prop.setComment("Percentage chance that Red Tufted Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightRedTuftedAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genSeaweedBlacklistBiomes", genSeaweedBlacklistBiomes);
        prop.setComment("List of biomes Seaweed is blacklisted from, in the format: modid:biomeid [default: empty]");
        genSeaweedBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genSeaweedOverrideBiomes", genSeaweedOverrideBiomes);
        prop.setComment("List of biomes Seaweed is forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genSeaweedOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightSeaweed", weightSeaweed);
        prop.setComment("Percentage chance that Seaweed generates in a suitable chunk (0 to 100) [default: 100]");
        weightSeaweed = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenSproutingAlgaeBlacklistBiomes", genGreenSproutingAlgaeBlacklistBiomes);
        prop.setComment("List of biomes that Green Sprouting Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGreenSproutingAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenSproutingAlgaeOverrideBiomes", genGreenSproutingAlgaeOverrideBiomes);
        prop.setComment("List of biomes that Green Sprouting Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genGreenSproutingAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightGreenSproutingAlgae", weightGreenSproutingAlgae);
        prop.setComment("Percentage chance that Green Sprouting Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightGreenSproutingAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenStemmedAlgaeBlacklistBiomes", genGreenStemmedAlgaeBlacklistBiomes);
        prop.setComment("List of biomes that Green Stemmed Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGreenStemmedAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGreenStemmedAlgaeOverrideBiomes", genGreenStemmedAlgaeOverrideBiomes);
        prop.setComment("List of biomes that Green Stemmed Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genGreenStemmedAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightGreenStemmedAlgae", weightGreenStemmedAlgae);
        prop.setComment("Percentage chance that Green Stemmed Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightGreenStemmedAlgae = prop.getInt();
        propOrder.add(prop.getName());


        prop = cfg.get("WorldGen Algae-Sponges", "genPiledAlgaeBlacklistBiomes", genPiledAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Piled Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPiledAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genPiledAlgaeOverrideBiomes", genPiledAlgaeOverrideBiomes);
        prop.setComment("List of biomes Piled Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genPiledAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightPiledAlgae", weightPiledAlgae);
        prop.setComment("Percentage chance that Piled Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightPiledAlgae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genStalkedAlgaeBlacklistBiomes", genStalkedAlgaeBlacklistBiomes);
        prop.setComment("List of biomes Stalked Algae are blacklisted from, in the format: modid:biomeid [default: empty]");
        genStalkedAlgaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genStalkedAlgaeOverrideBiomes", genStalkedAlgaeOverrideBiomes);
        prop.setComment("List of biomes Stalked Algae are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genStalkedAlgaeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightStalkedAlgae", weightStalkedAlgae);
        prop.setComment("Percentage chance that Stalked Algae generates in a suitable chunk (0 to 100) [default: 100]");
        weightStalkedAlgae = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genOrangeSpongeBlacklistBiomes", genOrangeSpongeBlacklistBiomes);
        prop.setComment("List of biomes Orange Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genOrangeSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genOrangeSpongeOverrideBiomes", genOrangeSpongeOverrideBiomes);
        prop.setComment("List of biomes Orange Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genOrangeSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightOrangeSponge", weightOrangeSponge);
        prop.setComment("Percentage chance that Orange Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightOrangeSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genRedSpongeBlacklistBiomes", genRedSpongeBlacklistBiomes);
        prop.setComment("List of biomes Red Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRedSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genRedSpongeOverrideBiomes", genRedSpongeOverrideBiomes);
        prop.setComment("List of biomes Red Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genRedSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightRedSponge", weightRedSponge);
        prop.setComment("Percentage chance that Red Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightRedSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genWhiteSpongeBlacklistBiomes", genWhiteSpongeBlacklistBiomes);
        prop.setComment("List of biomes White Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWhiteSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genWhiteSpongeOverrideBiomes", genWhiteSpongeOverrideBiomes);
        prop.setComment("List of biomes White Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genWhiteSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightWhiteSponge", weightWhiteSponge);
        prop.setComment("Percentage chance that White Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightWhiteSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genFireSpongeBlacklistBiomes", genFireSpongeBlacklistBiomes);
        prop.setComment("List of biomes Fire Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genFireSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genFireSpongeOverrideBiomes", genFireSpongeOverrideBiomes);
        prop.setComment("List of biomes Fire Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genFireSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightFireSponge", weightFireSponge);
        prop.setComment("Percentage chance that Fire Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightFireSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genDarkPinkSpongeBlacklistBiomes", genDarkPinkSpongeBlacklistBiomes);
        prop.setComment("List of biomes Dark Pink Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genDarkPinkSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genDarkPinkSpongeOverrideBiomes", genDarkPinkSpongeOverrideBiomes);
        prop.setComment("List of biomes Dark Pink Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genDarkPinkSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightDarkPinkSponge", weightDarkPinkSponge);
        prop.setComment("Percentage chance that Dark Pink Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightDarkPinkSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genPinkSpongeBlacklistBiomes", genPinkSpongeBlacklistBiomes);
        prop.setComment("List of biomes Pink Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPinkSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genPinkSpongeOverrideBiomes", genPinkSpongeOverrideBiomes);
        prop.setComment("List of biomes Pink Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genPinkSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightPinkSponge", weightPinkSponge);
        prop.setComment("Percentage chance that Pink Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightPinkSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genYellowSpongeBlacklistBiomes", genYellowSpongeBlacklistBiomes);
        prop.setComment("List of biomes Yellow Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genYellowSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genYellowSpongeOverrideBiomes", genYellowSpongeOverrideBiomes);
        prop.setComment("List of biomes Yellow Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genYellowSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightYellowSponge", weightYellowSponge);
        prop.setComment("Percentage chance that Yellow Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightYellowSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genBlueSpongeBlacklistBiomes", genBlueSpongeBlacklistBiomes);
        prop.setComment("List of biomes Blue Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBlueSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genBlueSpongeOverrideBiomes", genBlueSpongeOverrideBiomes);
        prop.setComment("List of biomes Blue Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genBlueSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightBlueSponge", weightBlueSponge);
        prop.setComment("Percentage chance that Blue Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightBlueSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genGigantospongiaBlacklistBiomes", genGigantospongiaBlacklistBiomes);
        prop.setComment("List of biomes Gigantospongia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGigantospongiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genGigantospongiaOverrideBiomes", genGigantospongiaOverrideBiomes);
        prop.setComment("List of biomesGigantospongia are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genGigantospongiaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightGigantospongia", weightGigantospongia);
        prop.setComment("Percentage chance that Gigantospongia generates in a suitable chunk (0 to 100) [default: 10]");
        weightGigantospongia = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genBrownSpongeBlacklistBiomes", genBrownSpongeBlacklistBiomes);
        prop.setComment("List of biomes Brown Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBrownSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genBrownSpongeOverrideBiomes", genBrownSpongeOverrideBiomes);
        prop.setComment("List of biomes Brown Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genBrownSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightBrownSponge", weightBrownSponge);
        prop.setComment("Percentage chance that Brown Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightBrownSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Algae-Sponges", "genBranchedSpongeBlacklistBiomes", genBranchedSpongeBlacklistBiomes);
        prop.setComment("List of biomes Branched Sponges are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBranchedSpongeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "genBranchedSpongeOverrideBiomes", genBranchedSpongeOverrideBiomes);
        prop.setComment("List of biomes Branched Sponges are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genBranchedSpongeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Algae-Sponges", "weightBranchedSponge", weightBranchedSponge);
        prop.setComment("Percentage chance that Branched Sponges generates in a suitable chunk (0 to 100) [default: 10]");
        weightBranchedSponge = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Corals", "dimRugosa", dimRugosa);
        prop.setComment("List of dimension IDs Rugosa Corals can generate in [default: empty]");
        dimRugosa = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Corals", "genRugosaBlacklistBiomes", genRugosaBlacklistBiomes);
        prop.setComment("List of biomes Rugosa Corals are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRugosaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Corals", "genRugosaOverrideBiomes", genRugosaOverrideBiomes);
        prop.setComment("List of biomes Rugosa Corals are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genRugosaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Corals", "weightRugosa", weightRugosa);
        prop.setComment("Percentage chance that Rugosa Corals generates in a suitable chunk (0 to 100) [default: 10]");
        weightRugosa = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Corals", "dimTabulata", dimTabulata);
        prop.setComment("List of dimension IDs Tabulata Corals can generate in [default: empty]");
        dimTabulata = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Corals", "genTabulataBlacklistBiomes", genTabulataBlacklistBiomes);
        prop.setComment("List of biomes Tabulata Corals are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTabulataBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Corals", "genTabulataOverrideBiomes", genTabulataOverrideBiomes);
        prop.setComment("List of biomes Tabulata Corals are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genTabulataOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Corals", "weightTabulata", weightTabulata);
        prop.setComment("Percentage chance that Tabulata Corals generates in a suitable chunk (0 to 100) [default: 10]");
        weightTabulata = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Fenestella Bryozoans", "dimFenestella", dimFenestella);
        prop.setComment("List of dimension IDs Fenestella Bryozoans can generate in [default: empty]");
        dimFenestella = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Fenestella Bryozoans", "genFenestellaBlacklistBiomes", genFenestellaBlacklistBiomes);
        prop.setComment("List of biomes Fenestella Bryozoans are blacklisted from, in the format: modid:biomeid [default: empty]");
        genFenestellaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Fenestella Bryozoans", "genFenestellaOverrideBiomes", genFenestellaOverrideBiomes);
        prop.setComment("List of biomes Fenestella Bryozoans are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genFenestellaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Fenestella Bryozoans", "weightFenestella", weightFenestella);
        prop.setComment("Percentage chance that Fenestella Bryozoans generates in a suitable chunk (0 to 100) [default: 10]");
        weightFenestella = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sea Anemones", "dimAnemone", dimAnemone);
        prop.setComment("List of dimension IDs Sea Anemones can generate in [default: 0]");
        dimAnemone = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sea Anemones", "genAnemoneBlacklistBiomes", genAnemoneBlacklistBiomes);
        prop.setComment("List of biomes Sea Anemones are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAnemoneBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sea Anemones", "genAnemoneOverrideBiomes", genAnemoneOverrideBiomes);
        prop.setComment("List of biomes Sea Anemones are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genAnemoneOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sea Anemones", "weightAnemone", weightAnemone);
        prop.setComment("Percentage chance that Sea Anemones generates in a suitable chunk (0 to 100) [default: 10]");
        weightAnemone = prop.getInt();
        propOrder.add(prop.getName());


        prop = cfg.get("WorldGen Lepidodendron", "genLepidodendron", genLepidodendron);
        prop.setComment("Set to true to generate Lepidodendron trees naturally [default: false]");
        genLepidodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidodendron", "genLepidodendronBlacklistBiomes", genLepidodendronBlacklistBiomes);
        prop.setComment("List of biomes Lepidodendron trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLepidodendronBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidodendron", "genLepidodendronOverrideBiomes", genLepidodendronOverrideBiomes);
        prop.setComment("List of biomes Lepidodendron trees are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genLepidodendronOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidodendron", "dimLepidodendron", dimLepidodendron);
        prop.setComment("List of dimension IDs Lepidodendron trees can generate in [default: 0]");
        dimLepidodendron = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidodendron", "minheightLepidodendron", minheightLepidodendron);
        prop.setComment("Minimum height that Lepidodendron trees can generate (1 to 250) [default: 1]");
        minheightLepidodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidodendron", "maxheightLepidodendron", maxheightLepidodendron);
        prop.setComment("Maximum height that Lepidodendron trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightLepidodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidodendron", "multiplierLepidodendron", multiplierLepidodendron);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierLepidodendron = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Podocarp", "genPodocarp", genPodocarp);
        prop.setComment("Set to true to generate Primaeval Podocarp trees tree trees naturally [default: false]");
        genPodocarp = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podocarp", "genPodocarpBlacklistBiomes", genPodocarpBlacklistBiomes);
        prop.setComment("List of biomes Primaeval Podocarp trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPodocarpBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podocarp", "genPodocarpOverrideBiomes", genPodocarpOverrideBiomes);
        prop.setComment("List of biomes Primaeval Podocarp trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPodocarpOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Podocarp", "genPodocarpBush", genPodocarpBush);
        prop.setComment("Set to true to generate Primaeval Podocarp bushy variants naturally [default: false]");
        genPodocarpBush = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podocarp", "dimPodocarp", dimPodocarp);
        prop.setComment("List of dimension IDs Primaeval Podocarp trees can generate in [default: 0]");
        dimPodocarp = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podocarp", "minheightPodocarp", minheightPodocarp);
        prop.setComment("Minimum height that Primaeval Podocarp trees can generate (1 to 250) [default: 1]");
        minheightPodocarp = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podocarp", "maxheightPodocarp", maxheightPodocarp);
        prop.setComment("Maximum height that Primaeval Podocarp trees can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightPodocarp = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podocarp", "multiplierPodocarp", multiplierPodocarp);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPodocarp = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Glossopteris", "genGlossopteris", genGlossopteris);
        prop.setComment("Set to true to generate Glossopteris trees naturally [default: false]");
        genGlossopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glossopteris", "genGlossopterisBlacklistBiomes", genGlossopterisBlacklistBiomes);
        prop.setComment("List of biomes Glossopteris trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGlossopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glossopteris", "genGlossopterisOverrideBiomes", genGlossopterisOverrideBiomes);
        prop.setComment("List of biomes Glossopteris trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genGlossopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Glossopteris", "genGlossopterisBush", genGlossopterisBush);
        prop.setComment("Set to true to generate Glossopteris bushy variants naturally [default: false]");
        genGlossopterisBush = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glossopteris", "dimGlossopteris", dimGlossopteris);
        prop.setComment("List of dimension IDs Glossopteris trees can generate in [default: 0]");
        dimGlossopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glossopteris", "minheightGlossopteris", minheightGlossopteris);
        prop.setComment("Minimum height that Glossopteris trees can generate (1 to 250) [default: 1]");
        minheightGlossopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glossopteris", "maxheightGlossopteris", maxheightGlossopteris);
        prop.setComment("Maximum height that Glossopteris trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightGlossopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glossopteris", "multiplierGlossopteris", multiplierGlossopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierGlossopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Liriodendron", "genLiriodendron", genLiriodendron);
        prop.setComment("Set to true to generate Liriodendron (Tulip trees) naturally [default: false]");
        genLiriodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Liriodendron", "genLiriodendronBlacklistBiomes", genLiriodendronBlacklistBiomes);
        prop.setComment("List of biomes Liriodendron (Tulip trees) are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLiriodendronBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Liriodendron", "genLiriodendronOverrideBiomes", genLiriodendronOverrideBiomes);
        prop.setComment("List of biomes Liriodendron (Tulip trees) are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genLiriodendronOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Liriodendron", "dimLiriodendron", dimLiriodendron);
        prop.setComment("List of dimension IDs Liriodendron (Tulip trees) can generate in [default: 0]");
        dimLiriodendron = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Liriodendron", "minheightLiriodendron", minheightLiriodendron);
        prop.setComment("Minimum height that Liriodendron (Tulip trees) can generate (1 to 250) [default: 1]");
        minheightLiriodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Liriodendron", "maxheightLiriodendron", maxheightLiriodendron);
        prop.setComment("Maximum height that Liriodendron (Tulip trees) can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightLiriodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Liriodendron", "multiplierLiriodendron", multiplierLiriodendron);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierLiriodendron = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Magnolia", "genMagnolia", genMagnolia);
        prop.setComment("Set to true to generate Magnolia trees naturally [default: false]");
        genMagnolia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Magnolia", "genMagnoliaBlacklistBiomes", genMagnoliaBlacklistBiomes);
        prop.setComment("List of biomes Magnolia trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genMagnoliaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Magnolia", "genMagnoliaOverrideBiomes", genMagnoliaOverrideBiomes);
        prop.setComment("List of biomes Magnolia trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genMagnoliaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Magnolia", "dimMagnolia", dimMagnolia);
        prop.setComment("List of dimension IDs Magnolia trees can generate in [default: 0]");
        dimMagnolia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Magnolia", "minheightMagnolia", minheightMagnolia);
        prop.setComment("Minimum height that Magnolia trees can generate (1 to 250) [default: 1]");
        minheightMagnolia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Magnolia", "maxheightMagnolia", maxheightMagnolia);
        prop.setComment("Maximum height that Magnolia trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightMagnolia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Magnolia", "multiplierMagnolia", multiplierMagnolia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierMagnolia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Redwood", "genRedwood", genRedwood);
        prop.setComment("Set to true to generate Redwood trees naturally [default: false]");
        genRedwood = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Redwood", "genRedwoodBlacklistBiomes", genRedwoodBlacklistBiomes);
        prop.setComment("List of biomes Redwood trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRedwoodBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Redwood", "genRedwoodOverrideBiomes", genRedwoodOverrideBiomes);
        prop.setComment("List of biomes Redwood trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: \"minecraft:mutated_redwood_taiga_hills\", \"biomesoplenty:redwood_forest\", \"biomesoplenty:redwood_forest_edge\", \"wildnature:redwood_forest\"]");
        genRedwoodOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Redwood", "dimRedwood", dimRedwood);
        prop.setComment("List of dimension IDs Redwood trees can generate in [default: 0]");
        dimRedwood = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Redwood", "minheightRedwood", minheightRedwood);
        prop.setComment("Minimum height that Redwood trees can generate (1 to 250) [default: 1]");
        minheightRedwood = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Redwood", "maxheightRedwood", maxheightRedwood);
        prop.setComment("Maximum height that Redwood trees can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightRedwood = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Redwood", "multiplierRedwood", multiplierRedwood);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierRedwood = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Wollemi pine", "genWollemi", genWollemi);
        prop.setComment("Set to true to generate Wollemi pine trees naturally [default: false]");
        genWollemi = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wollemi pine", "genWollemiBlacklistBiomes", genWollemiBlacklistBiomes);
        prop.setComment("List of biomes Wollemi pine trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWollemiBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wollemi pine", "genWollemiOverrideBiomes", genWollemiOverrideBiomes);
        prop.setComment("List of biomes Wollemi pine trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: \"minecraft:mutated_mesa\", \"minecraft:mutated_mesa_rock\", \"minecraft:mutated_mesa_clear_rock\"]");
        genWollemiOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Wollemi pine", "dimWollemi", dimWollemi);
        prop.setComment("List of dimension IDs Wollemi pine trees can generate in [default: 0]");
        dimWollemi = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wollemi pine", "minheightWollemi", minheightWollemi);
        prop.setComment("Minimum height that Wollemi pine trees can generate (1 to 250) [default: 1]");
        minheightWollemi = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wollemi pine", "maxheightWollemi", maxheightWollemi);
        prop.setComment("Maximum height that Wollemi pine trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightWollemi = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wollemi pine", "multiplierWollemi", multiplierWollemi);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierWollemi = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Taxodium", "genTaxodium", genTaxodium);
        prop.setComment("Set to true to generate Taxodium trees naturally [default: false]");
        genTaxodium = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Taxodium", "genTaxodiumBlacklistBiomes", genTaxodiumBlacklistBiomes);
        prop.setComment("List of biomes Taxodium trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTaxodiumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Taxodium", "genTaxodiumOverrideBiomes", genTaxodiumOverrideBiomes);
        prop.setComment("List of biomes Taxodium trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genTaxodiumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Taxodium", "dimTaxodium", dimTaxodium);
        prop.setComment("List of dimension IDs Taxodium trees can generate in [default: 0]");
        dimTaxodium = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Taxodium", "minheightTaxodium", minheightTaxodium);
        prop.setComment("Minimum height that Taxodium trees can generate (1 to 250) [default: 1]");
        minheightTaxodium = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Taxodium", "maxheightTaxodium", maxheightTaxodium);
        prop.setComment("Maximum height that Taxodium trees can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightTaxodium = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Taxodium", "multiplierTaxodium", multiplierTaxodium);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTaxodium = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Bothrodendron", "genBothrodendron", genBothrodendron);
        prop.setComment("Set to true to generate Bothrodendron trees naturally [default: false]");
        genBothrodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bothrodendron", "genBothrodendronBlacklistBiomes", genBothrodendronBlacklistBiomes);
        prop.setComment("List of biomes Bothrodendron trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBothrodendronBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bothrodendron", "genBothrodendronOverrideBiomes", genBothrodendronOverrideBiomes);
        prop.setComment("List of biomes Bothrodendron trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBothrodendronOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Bothrodendron", "dimBothrodendron", dimBothrodendron);
        prop.setComment("List of dimension IDs Bothrodendron trees can generate in [default: 0]");
        dimBothrodendron = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bothrodendron", "minheightBothrodendron", minheightBothrodendron);
        prop.setComment("Minimum height that Bothrodendron trees can generate (1 to 250) [default: 1]");
        minheightBothrodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bothrodendron", "maxheightBothrodendron", maxheightBothrodendron);
        prop.setComment("Maximum height that Bothrodendron trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightBothrodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bothrodendron", "multiplierBothrodendron", multiplierBothrodendron);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBothrodendron = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Diaphorodendron", "genDiaphorodendron", genDiaphorodendron);
        prop.setComment("Set to true to generate Diaphorodendron trees naturally [default: false]");
        genDiaphorodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Diaphorodendron", "genDiaphorodendronBlacklistBiomes", genDiaphorodendronBlacklistBiomes);
        prop.setComment("List of biomes Diaphorodendron trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genDiaphorodendronBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Diaphorodendron", "genDiaphorodendronOverrideBiomes", genDiaphorodendronOverrideBiomes);
        prop.setComment("List of biomes Diaphorodendron trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genDiaphorodendronOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Diaphorodendron", "dimDiaphorodendron", dimDiaphorodendron);
        prop.setComment("List of dimension IDs Diaphorodendron trees can generate in [default: 0]");
        dimDiaphorodendron = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Diaphorodendron", "minheightDiaphorodendron", minheightDiaphorodendron);
        prop.setComment("Minimum height that Diaphorodendron trees can generate (1 to 250) [default: 1]");
        minheightDiaphorodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Diaphorodendron", "maxheightDiaphorodendron", maxheightDiaphorodendron);
        prop.setComment("Maximum height that Diaphorodendron trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightDiaphorodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Diaphorodendron", "multiplierDiaphorodendron", multiplierDiaphorodendron);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierDiaphorodendron = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Macroneuropteris", "genMacroneuropteris", genMacroneuropteris);
        prop.setComment("Set to true to generate Macroneuropteris trees naturally [default: false]");
        genMacroneuropteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macroneuropteris", "genMacroneuropterisBlacklistBiomes", genMacroneuropterisBlacklistBiomes);
        prop.setComment("List of biomes Macroneuropteris trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genMacroneuropterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macroneuropteris", "genMacroneuropterisOverrideBiomes", genMacroneuropterisOverrideBiomes);
        prop.setComment("List of biomes Macroneuropteris trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genMacroneuropterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Macroneuropteris", "dimMacroneuropteris", dimMacroneuropteris);
        prop.setComment("List of dimension IDs Macroneuropteris trees can generate in [default: 0]");
        dimMacroneuropteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macroneuropteris", "minheightMacroneuropteris", minheightMacroneuropteris);
        prop.setComment("Minimum height that Macroneuropteris trees can generate (1 to 250) [default: 1]");
        minheightMacroneuropteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macroneuropteris", "maxheightMacroneuropteris", maxheightMacroneuropteris);
        prop.setComment("Maximum height that Macroneuropteris trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightMacroneuropteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macroneuropteris", "multiplierMacroneuropteris", multiplierMacroneuropteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierMacroneuropteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ginkgo", "genGinkgo", genGinkgo);
        prop.setComment("Set to true to generate Ginkgo trees naturally [default: false]");
        genGinkgo = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ginkgo", "genGinkgoBlacklistBiomes", genGinkgoBlacklistBiomes);
        prop.setComment("List of biomes Ginkgo trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGinkgoBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ginkgo", "genGinkgoOverrideBiomes", genGinkgoOverrideBiomes);
        prop.setComment("List of biomes Ginkgo trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genGinkgoOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Ginkgo", "dimGinkgo", dimGinkgo);
        prop.setComment("List of dimension IDs Ginkgo trees can generate in [default: 0]");
        dimGinkgo = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ginkgo", "minheightGinkgo", minheightGinkgo);
        prop.setComment("Minimum height that Ginkgo trees can generate (1 to 250) [default: 1]");
        minheightGinkgo = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ginkgo", "maxheightGinkgo", maxheightGinkgo);
        prop.setComment("Maximum height that Ginkgo trees can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightGinkgo = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ginkgo", "multiplierGinkgo", multiplierGinkgo);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierGinkgo = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Agathis", "genAgathis", genAgathis);
        prop.setComment("Set to true to generate Agathis trees naturally [default: false]");
        genAgathis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Agathis", "genAgathisBlacklistBiomes", genAgathisBlacklistBiomes);
        prop.setComment("List of biomes Agathis trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAgathisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Agathis", "genAgathisOverrideBiomes", genAgathisOverrideBiomes);
        prop.setComment("List of biomes Agathis trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAgathisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Agathis", "dimAgathis", dimAgathis);
        prop.setComment("List of dimension IDs Agathis trees can generate in [default: 0]");
        dimAgathis = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Agathis", "podzolAgathis", podzolAgathis);
        prop.setComment("Radius for podzol generation at base of Agathis trees (0 - 16: set to 0 to disable) [default: 6]");
        podzolAgathis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Agathis", "minheightAgathis", minheightAgathis);
        prop.setComment("Minimum height that Agathis trees can generate (1 to 250) [default: 1]");
        minheightAgathis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Agathis", "maxheightAgathis", maxheightAgathis);
        prop.setComment("Maximum height that Agathis trees can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightAgathis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Agathis", "multiplierAgathis", multiplierAgathis);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAgathis = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Araucaria araucana", "genAraucariaAraucana", genAraucariaAraucana);
        prop.setComment("Set to true to generate Monkey Puzzle Araucaria trees naturally [default: false]");
        genAraucariaAraucana = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria araucana", "genAraucariaAraucanaBlacklistBiomes", genAraucariaAraucanaBlacklistBiomes);
        prop.setComment("List of biomes Monkey Puzzle Araucaria trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAraucariaAraucanaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria araucana", "genAraucariaAraucanaOverrideBiomes", genAraucariaAraucanaOverrideBiomes);
        prop.setComment("List of biomes Monkey Puzzle Araucaria trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAraucariaAraucanaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria araucana", "dimAraucariaAraucana", dimAraucariaAraucana);
        prop.setComment("List of dimension IDs Monkey Puzzle Araucaria trees can generate in [default: 0]");
        dimAraucariaAraucana = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria araucana", "largeAraucariaAraucana", largeAraucariaAraucana);
        prop.setComment("Percentage chance that a Monkey Puzzle tree is the large variant (0 - 100) [default: 90]");
        largeAraucariaAraucana = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria araucana", "minheightAraucariaAraucana", minheightAraucariaAraucana);
        prop.setComment("Minimum height that Monkey Puzzle Araucaria trees can generate (1 to 250) [default: 1]");
        minheightAraucariaAraucana = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria araucana", "maxheightAraucariaAraucana", maxheightAraucariaAraucana);
        prop.setComment("Maximum height that Monkey Puzzle Araucaria trees can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightAraucariaAraucana = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria araucana", "multiplierAraucariaAraucana", multiplierAraucariaAraucana);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAraucariaAraucana = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Araucaria columnaris", "genAraucariaColumnaris", genAraucariaColumnaris);
        prop.setComment("Set to true to generate columnar Araucaria trees naturally [default: false]");
        genAraucariaColumnaris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria columnaris", "genAraucariaColumnarisBlacklistBiomes", genAraucariaColumnarisBlacklistBiomes);
        prop.setComment("List of biomes columnar Araucaria trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAraucariaColumnarisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria columnaris", "genAraucariaColumnarisOverrideBiomes", genAraucariaColumnarisOverrideBiomes);
        prop.setComment("List of biomes columnar Araucaria trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAraucariaColumnarisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Araucaria columnaris", "dimAraucariaColumnaris", dimAraucariaColumnaris);
        prop.setComment("List of dimension IDs columnar Araucaria trees can generate in [default: 0]");
        dimAraucariaColumnaris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria columnaris", "minheightAraucariaColumnaris", minheightAraucariaColumnaris);
        prop.setComment("Minimum height that columnar Araucaria trees can generate (1 to 250) [default: 1]");
        minheightAraucariaColumnaris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria columnaris", "maxheightAraucariaColumnaris", maxheightAraucariaColumnaris);
        prop.setComment("Maximum height that columnar Araucaria trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAraucariaColumnaris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria columnaris", "multiplierAraucariaColumnaris", multiplierAraucariaColumnaris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAraucariaColumnaris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Araucaria bidwilli", "genAraucariaBidwilli", genAraucariaBidwilli);
        prop.setComment("Set to true to generate Bunya Araucaria trees naturally [default: false]");
        genAraucariaBidwilli = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria bidwilli", "genAraucariaBidwilliBlacklistBiomes", genAraucariaBidwilliBlacklistBiomes);
        prop.setComment("List of biomes Bunya Araucaria trees are blacklisted from, in the format: modid:biomeid [default: \"minecraft:mutated_mesa\", \"minecraft:mutated_mesa_rock\", \"minecraft:mutated_mesa_clear_rock\"]");
        genAraucariaBidwilliBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria bidwilli", "genAraucariaBidwilliOverrideBiomes", genAraucariaBidwilliOverrideBiomes);
        prop.setComment("List of biomes Bunya Araucaria trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAraucariaBidwilliOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Araucaria bidwilli", "dimAraucariaBidwilli", dimAraucariaBidwilli);
        prop.setComment("List of dimension IDs Bunya Araucaria trees can generate in [default: 0]");
        dimAraucariaBidwilli = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria bidwilli", "minheightAraucariaBidwilli", minheightAraucariaBidwilli);
        prop.setComment("Minimum height that Bunya Araucaria trees can generate (1 to 250) [default: 1]");
        minheightAraucariaBidwilli = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria bidwilli", "maxheightAraucariaBidwilli", maxheightAraucariaBidwilli);
        prop.setComment("Maximum height that Bunya Araucaria trees can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightAraucariaBidwilli = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria bidwilli", "multiplierAraucariaBidwilli", multiplierAraucariaBidwilli);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAraucariaBidwilli = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Tempskya", "genTempskya", genTempskya);
        prop.setComment("Set to true to generate Tempskya naturally [default: false]");
        genTempskya = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tempskya", "genTempskyaBlacklistBiomes", genTempskyaBlacklistBiomes);
        prop.setComment("List of biomes Tempskya are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTempskyaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tempskya", "genTempskyaOverrideBiomes", genTempskyaOverrideBiomes);
        prop.setComment("List of biomes Tempskya are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genTempskyaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Tempskya", "dimTempskya", dimTempskya);
        prop.setComment("List of dimension IDs Tempskya can generate in [default: 0]");
        dimTempskya = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tempskya", "minheightTempskya", minheightTempskya);
        prop.setComment("Minimum height that Tempskya can generate (1 to 250) [default: 1]");
        minheightTempskya = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tempskya", "maxheightTempskya", maxheightTempskya);
        prop.setComment("Maximum height that Tempskya can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightTempskya = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tempskya", "multiplierTempskya", multiplierTempskya);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTempskya = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Williamsonia", "genWilliamsonia", genWilliamsonia);
        prop.setComment("Set to true to generate Williamsonia naturally [default: false]");
        genWilliamsonia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Williamsonia", "genWilliamsoniaBlacklistBiomes", genWilliamsoniaBlacklistBiomes);
        prop.setComment("List of biomes Williamsonia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWilliamsoniaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Williamsonia", "genWilliamsoniaOverrideBiomes", genWilliamsoniaOverrideBiomes);
        prop.setComment("List of biomes Williamsonia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genWilliamsoniaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Williamsonia", "dimWilliamsonia", dimWilliamsonia);
        prop.setComment("List of dimension IDs Williamsonia can generate in [default: 0]");
        dimWilliamsonia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Williamsonia", "minheightWilliamsonia", minheightWilliamsonia);
        prop.setComment("Minimum height that Williamsonia can generate (1 to 250) [default: 1]");
        minheightWilliamsonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Williamsonia", "maxheightWilliamsonia", maxheightWilliamsonia);
        prop.setComment("Maximum height that Williamsonia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightWilliamsonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Williamsonia", "multiplierWilliamsonia", multiplierWilliamsonia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierWilliamsonia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Cycadeoidea", "genCycadeoidea", genCycadeoidea);
        prop.setComment("Set to true to generate Cycadeoidea naturally [default: false]");
        genCycadeoidea = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cycadeoidea", "genCycadeoideaBlacklistBiomes", genCycadeoideaBlacklistBiomes);
        prop.setComment("List of biomes Cycadeoidea are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCycadeoideaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cycadeoidea", "genCycadeoideaOverrideBiomes", genCycadeoideaOverrideBiomes);
        prop.setComment("List of biomes Cycadeoidea are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCycadeoideaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Cycadeoidea", "dimCycadeoidea", dimCycadeoidea);
        prop.setComment("List of dimension IDs Cycadeoidea can generate in [default: 0]");
        dimCycadeoidea = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cycadeoidea", "minheightCycadeoidea", minheightCycadeoidea);
        prop.setComment("Minimum height that Cycadeoidea can generate (1 to 250) [default: 1]");
        minheightCycadeoidea = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cycadeoidea", "maxheightCycadeoidea", maxheightCycadeoidea);
        prop.setComment("Maximum height that Cycadeoidea can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightCycadeoidea = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cycadeoidea", "multiplierCycadeoidea", multiplierCycadeoidea);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCycadeoidea = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Nilssoniopteris", "genNilssoniopteris", genNilssoniopteris);
        prop.setComment("Set to true to generate Nilssoniopteris naturally [default: false]");
        genNilssoniopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniopteris", "genNilssoniopterisBlacklistBiomes", genNilssoniopterisBlacklistBiomes);
        prop.setComment("List of biomes Nilssoniopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNilssoniopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniopteris", "genNilssoniopterisOverrideBiomes", genNilssoniopterisOverrideBiomes);
        prop.setComment("List of biomes Nilssoniopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNilssoniopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Nilssoniopteris", "dimNilssoniopteris", dimNilssoniopteris);
        prop.setComment("List of dimension IDs Nilssoniopteris can generate in [default: 0]");
        dimNilssoniopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniopteris", "minheightNilssoniopteris", minheightNilssoniopteris);
        prop.setComment("Minimum height that Nilssoniopteris can generate (1 to 250) [default: 1]");
        minheightNilssoniopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniopteris", "maxheightNilssoniopteris", maxheightNilssoniopteris);
        prop.setComment("Maximum height that Nilssoniopteris can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightNilssoniopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniopteris", "multiplierNilssoniopteris", multiplierNilssoniopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNilssoniopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Noeggerathiales", "genNoeggerathiales", genNoeggerathiales);
        prop.setComment("Set to true to generate Noeggerathiales naturally [default: false]");
        genNoeggerathiales = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Noeggerathiales", "genNoeggerathialesBlacklistBiomes", genNoeggerathialesBlacklistBiomes);
        prop.setComment("List of biomes Noeggerathiales are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNoeggerathialesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Noeggerathiales", "genNoeggerathialesOverrideBiomes", genNoeggerathialesOverrideBiomes);
        prop.setComment("List of biomes Noeggerathiales are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNoeggerathialesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Noeggerathiales", "dimNoeggerathiales", dimNoeggerathiales);
        prop.setComment("List of dimension IDs Noeggerathiales can generate in [default: 0]");
        dimNoeggerathiales = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Noeggerathiales", "minheightNoeggerathiales", minheightNoeggerathiales);
        prop.setComment("Minimum height that Noeggerathiales can generate (1 to 250) [default: 1]");
        minheightNoeggerathiales = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Noeggerathiales", "maxheightNoeggerathiales", maxheightNoeggerathiales);
        prop.setComment("Maximum height that Noeggerathiales can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightNoeggerathiales = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Noeggerathiales", "multiplierNoeggerathiales", multiplierNoeggerathiales);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNoeggerathiales = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Zamites", "genZamites", genZamites);
        prop.setComment("Set to true to generate Zamites naturally [default: false]");
        genZamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zamites", "genZamitesBlacklistBiomes", genZamitesBlacklistBiomes);
        prop.setComment("List of biomes Zamites are blacklisted from, in the format: modid:biomeid [default: empty]");
        genZamitesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zamites", "genZamitesOverrideBiomes", genZamitesOverrideBiomes);
        prop.setComment("List of biomes Zamites are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genZamitesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Zamites", "dimZamites", dimZamites);
        prop.setComment("List of dimension IDs Zamites can generate in [default: 0]");
        dimZamites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zamites", "minheightZamites", minheightZamites);
        prop.setComment("Minimum height that Zamites can generate (1 to 250) [default: 1]");
        minheightZamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zamites", "maxheightZamites", maxheightZamites);
        prop.setComment("Maximum height that Zamites can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightZamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zamites", "multiplierZamites", multiplierZamites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierZamites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sahnioxylon", "genSahnioxylon", genSahnioxylon);
        prop.setComment("Set to true to generate Sahnioxylon naturally [default: false]");
        genSahnioxylon = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sahnioxylon", "genSahnioxylonBlacklistBiomes", genSahnioxylonBlacklistBiomes);
        prop.setComment("List of biomes Sahnioxylon are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSahnioxylonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sahnioxylon", "genSahnioxylonOverrideBiomes", genSahnioxylonOverrideBiomes);
        prop.setComment("List of biomes Sahnioxylon are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSahnioxylonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Sahnioxylon", "dimSahnioxylon", dimSahnioxylon);
        prop.setComment("List of dimension IDs Sahnioxylon can generate in [default: 0]");
        dimSahnioxylon = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sahnioxylon", "minheightSahnioxylon", minheightSahnioxylon);
        prop.setComment("Minimum height that Sahnioxylon can generate (1 to 250) [default: 1]");
        minheightSahnioxylon = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sahnioxylon", "maxheightSahnioxylon", maxheightSahnioxylon);
        prop.setComment("Maximum height that Sahnioxylon can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightSahnioxylon = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sahnioxylon", "multiplierSahnioxylon", multiplierSahnioxylon);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSahnioxylon = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen AridHorsetail", "genAridHorsetail", genAridHorsetail);
        prop.setComment("Set to true to generate Arid Horsetails naturally [default: false]");
        genAridHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen AridHorsetail", "genAridHorsetailBlacklistBiomes", genAridHorsetailBlacklistBiomes);
        prop.setComment("List of biomes Arid Horsetails are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAridHorsetailBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen AridHorsetail", "genAridHorsetailOverrideBiomes", genAridHorsetailOverrideBiomes);
        prop.setComment("List of biomes Arid Horsetails are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAridHorsetailOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen AridHorsetail", "dimAridHorsetail", dimAridHorsetail);
        prop.setComment("List of dimension IDs Arid Horsetails can generate in [default: 0]");
        dimAridHorsetail = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen AridHorsetail", "minheightAridHorsetail", minheightAridHorsetail);
        prop.setComment("Minimum height that Arid Horsetails can generate (1 to 250) [default: 1]");
        minheightAridHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen AridHorsetail", "maxheightAridHorsetail", maxheightAridHorsetail);
        prop.setComment("Maximum height that Arid Horsetails can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightAridHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen AridHorsetail", "multiplierAridHorsetail", multiplierAridHorsetail);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAridHorsetail = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sigillaria", "genSigillaria", genSigillaria);
        prop.setComment("Set to true to generate Sigillaria naturally [default: false]");
        genSigillaria = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sigillaria", "genSigillariaBlacklistBiomes", genSigillariaBlacklistBiomes);
        prop.setComment("List of biomes Sigillaria are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSigillariaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sigillaria", "genSigillariaOverrideBiomes", genSigillariaOverrideBiomes);
        prop.setComment("List of biomes Sigillaria are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSigillariaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Sigillaria", "dimSigillaria", dimSigillaria);
        prop.setComment("List of dimension IDs Sigillaria can generate in [default: 0]");
        dimSigillaria = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sigillaria", "minheightSigillaria", minheightSigillaria);
        prop.setComment("Minimum height that Sigillaria can generate (1 to 250) [default: 1]");
        minheightSigillaria = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sigillaria", "maxheightSigillaria", maxheightSigillaria);
        prop.setComment("Maximum height that Sigillaria can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightSigillaria = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sigillaria", "multiplierSigillaria", multiplierSigillaria);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSigillaria = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Calamites", "genCalamites", genCalamites);
        prop.setComment("Set to true to generate Calamites naturally [default: false]");
        genCalamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "genCalamitesBlacklistBiomes", genCalamitesBlacklistBiomes);
        prop.setComment("List of biomes Calamites are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCalamitesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "genCalamitesOverrideBiomes", genCalamitesOverrideBiomes);
        prop.setComment("List of biomes Calamites are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCalamitesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Calamites", "dimCalamites", dimCalamites);
        prop.setComment("List of dimension IDs Calamites can generate in [default: 0]");
        dimCalamites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "spreadCalamites", spreadCalamites);
        prop.setComment("Set to true to allow Calamites to spread [default: true]");
        spreadCalamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "spreadWorldGenCalamites", spreadWorldGenCalamites);
        prop.setComment("Set to true to allow Calamites created during world-generation to spread [default: true]");
        spreadWorldGenCalamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "spreadUnlimitedCalamites", spreadUnlimitedCalamites);
        prop.setComment("Set to true to allow each new child Calamites plant to in turn be able to be a parent [default: false]");
        spreadUnlimitedCalamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "spreadLimitCalamites", spreadLimitCalamites);
        prop.setComment("Maximum blocks distance a child Calamites plant can appear from a parent [default: 16]");
        spreadLimitCalamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "spreadWaterCalamites", spreadWaterCalamites);
        prop.setComment("Minimum blocks distance for water for a world-gen or a child Calamites plant to appear [default: 6]");
        spreadWaterCalamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "spreadSpeedCalamites", spreadSpeedCalamites);
        prop.setComment("The percentage chance that, on receiving a random tick, a parent Calamites plant makes attempts to spawn a child [default: 50]");
        spreadSpeedCalamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "minheightCalamites", minheightCalamites);
        prop.setComment("Minimum height that Calamites can generate (1 to 250) [default: 1]");
        minheightCalamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "maxheightCalamites", maxheightCalamites);
        prop.setComment("Maximum height that Calamites can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightCalamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamites", "multiplierCalamites", multiplierCalamites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCalamites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Araucarioxylon", "genAraucarioxylon", genAraucarioxylon);
        prop.setComment("Set to true to generate Araucarioxylon trees naturally [default: false]");
        genAraucarioxylon = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucarioxylon", "genAraucarioxylonBlacklistBiomes", genAraucarioxylonBlacklistBiomes);
        prop.setComment("List of biomes Araucarioxylon trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAraucarioxylonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucarioxylon", "genAraucarioxylonOverrideBiomes", genAraucarioxylonOverrideBiomes);
        prop.setComment("List of biomes Araucarioxylon trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAraucarioxylonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Araucarioxylon", "dimAraucarioxylon", dimAraucarioxylon);
        prop.setComment("List of dimension IDs Araucarioxylon trees can generate in [default: 0]");
        dimAraucarioxylon = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucarioxylon", "minheightAraucarioxylon", minheightAraucarioxylon);
        prop.setComment("Minimum height that Araucarioxylon trees can generate (1 to 250) [default: 1]");
        minheightAraucarioxylon = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucarioxylon", "maxheightAraucarioxylon", maxheightAraucarioxylon);
        prop.setComment("Maximum height that Araucarioxylon trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAraucarioxylon = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucarioxylon", "multiplierAraucarioxylon", multiplierAraucarioxylon);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAraucarioxylon = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sciadopitys", "genSciadopitys", genSciadopitys);
        prop.setComment("Set to true to generate Sciadopitys trees naturally [default: false]");
        genSciadopitys = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sciadopitys", "genSciadopitysBlacklistBiomes", genSciadopitysBlacklistBiomes);
        prop.setComment("List of biomes Sciadopitys trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSciadopitysBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sciadopitys", "genSciadopitysOverrideBiomes", genSciadopitysOverrideBiomes);
        prop.setComment("List of biomes Sciadopitys trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSciadopitysOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Sciadopitys", "dimSciadopitys", dimSciadopitys);
        prop.setComment("List of dimension IDs Sciadopitys trees can generate in [default: 0]");
        dimSciadopitys = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sciadopitys", "minheightSciadopitys", minheightSciadopitys);
        prop.setComment("Minimum height that Sciadopitys trees can generate (1 to 250) [default: 1]");
        minheightAraucarioxylon = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sciadopitys", "maxheightSciadopitys", maxheightSciadopitys);
        prop.setComment("Maximum height that Sciadopitys trees can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightSciadopitys = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sciadopitys", "multiplierSciadopitys", multiplierSciadopitys);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSciadopitys = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sciadopitys", "podzolSciadopitys", podzolSciadopitys);
        prop.setComment("Radius for podzol generation at base of Sciadopitys trees (0 - 16: set to 0 to disable) [default: 5]");
        podzolSciadopitys = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Pleuromeia", "genPleuromeia", genPleuromeia);
        prop.setComment("Set to true to generate Pleuromeia naturally [default: false]");
        genPleuromeia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pleuromeia", "genPleuromeiaBlacklistBiomes", genPleuromeiaBlacklistBiomes);
        prop.setComment("List of biomes Pleuromeia are blacklisted from, in the format: modid:biomeid [default: \"minecraft:mutated_mesa\", \"minecraft:mutated_mesa_rock\", \"minecraft:mutated_mesa_clear_rock\"]");
        genPleuromeiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pleuromeia", "genPleuromeiaOverrideBiomes", genPleuromeiaOverrideBiomes);
        prop.setComment("List of biomes Pleuromeia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPleuromeiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Pleuromeia", "dimPleuromeia", dimPleuromeia);
        prop.setComment("List of dimension IDs Pleuromeia can generate in [default: 0]");
        dimPleuromeia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pleuromeia", "minheightPleuromeia", minheightPleuromeia);
        prop.setComment("Minimum height that Pleuromeia can generate (1 to 250) [default: 1]");
        minheightPleuromeia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pleuromeia", "maxheightPleuromeia", maxheightPleuromeia);
        prop.setComment("Maximum height that Pleuromeia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPleuromeia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pleuromeia", "multiplierPleuromeia", multiplierPleuromeia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPleuromeia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Bjuvia", "genBjuvia", genBjuvia);
        prop.setComment("Set to true to generate Bjuvia naturally [default: false]");
        genBjuvia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bjuvia", "genBjuviaBlacklistBiomes", genBjuviaBlacklistBiomes);
        prop.setComment("List of biomes Bjuvia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBjuviaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bjuvia", "genBjuviaOverrideBiomes", genBjuviaOverrideBiomes);
        prop.setComment("List of biomes Bjuvia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBjuviaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Bjuvia", "dimBjuvia", dimBjuvia);
        prop.setComment("List of dimension IDs Bjuvia can generate in [default: 0]");
        dimBjuvia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bjuvia", "minheightBjuvia", minheightBjuvia);
        prop.setComment("Minimum height that Bjuvia can generate (1 to 250) [default: 1]");
        minheightBjuvia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bjuvia", "maxheightBjuvia", maxheightBjuvia);
        prop.setComment("Maximum height that Bjuvia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightBjuvia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bjuvia", "multiplierBjuvia", multiplierBjuvia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBjuvia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Blue Cycad", "genBlueCycad", genBlueCycad);
        prop.setComment("Set to true to generate Blue Cycads naturally [default: false]");
        genBlueCycad = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Blue Cycad", "genBlueCycadBlacklistBiomes", genBlueCycadBlacklistBiomes);
        prop.setComment("List of biomes Blue Cycads are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBlueCycadBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Blue Cycad", "genBlueCycadOverrideBiomes", genBlueCycadOverrideBiomes);
        prop.setComment("List of biomes Blue Cycads are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBlueCycadOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Blue Cycad", "dimBlueCycad", dimBlueCycad);
        prop.setComment("List of dimension IDs Blue Cycads can generate in [default: 0]");
        dimBlueCycad = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Blue Cycad", "minheightBlueCycad", minheightBlueCycad);
        prop.setComment("Minimum height that Blue Cycads can generate (1 to 250) [default: 1]");
        minheightBlueCycad = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Blue Cycad", "maxheightBlueCycad", maxheightBlueCycad);
        prop.setComment("Maximum height that Blue Cycads can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightBlueCycad = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Blue Cycad", "multiplierBlueCycad", multiplierBlueCycad);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBlueCycad = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Antarcticycas", "genAntarcticycas", genAntarcticycas);
        prop.setComment("Set to true to generate Antarcticycas naturally [default: false]");
        genAntarcticycas = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Antarcticycas", "genAntarcticycasBlacklistBiomes", genAntarcticycasBlacklistBiomes);
        prop.setComment("List of biomes Antarcticycas are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAntarcticycasBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Antarcticycas", "genAntarcticycasOverrideBiomes", genAntarcticycasOverrideBiomes);
        prop.setComment("List of biomes Antarcticycas are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAntarcticycasOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Antarcticycas", "dimAntarcticycas", dimAntarcticycas);
        prop.setComment("List of dimension IDs Antarcticycas can generate in [default: 0]");
        dimAntarcticycas = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Antarcticycas", "minheightAntarcticycas", minheightAntarcticycas);
        prop.setComment("Minimum height that Antarcticycas can generate (1 to 250) [default: 1]");
        minheightAntarcticycas = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Antarcticycas", "maxheightAntarcticycas", maxheightAntarcticycas);
        prop.setComment("Maximum height that Antarcticycas can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAntarcticycas = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Antarcticycas", "multiplierAntarcticycas", multiplierAntarcticycas);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAntarcticycas = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Bushy Cycad", "genCycas", genCycas);
        prop.setComment("Set to true to generate Bushy Cycads naturally [default: false]");
        genCycas = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bushy Cycad", "genCycasBlacklistBiomes", genCycasBlacklistBiomes);
        prop.setComment("List of biomes Bushy Cycads are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCycasBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bushy Cycad", "genCycasOverrideBiomes", genCycasOverrideBiomes);
        prop.setComment("List of biomes Bushy Cycads are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCycasOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Bushy Cycad", "dimCycas", dimCycas);
        prop.setComment("List of dimension IDs Bushy Cycads can generate in [default: 0]");
        dimCycas = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bushy Cycad", "minheightCycas", minheightCycas);
        prop.setComment("Minimum height that Bushy Cycads can generate (1 to 250) [default: 1]");
        minheightCycas = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bushy Cycad", "maxheightCycas", maxheightCycas);
        prop.setComment("Maximum height that Bushy Cycads can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightCycas = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bushy Cycad", "multiplierCycas", multiplierCycas);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCycas = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Leptocycas", "genLeptocycas", genLeptocycas);
        prop.setComment("Set to true to generate Leptocycas naturally [default: false]");
        genLeptocycas = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leptocycas", "genLeptocycasBlacklistBiomes", genLeptocycasBlacklistBiomes);
        prop.setComment("List of biomes Leptocycas are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLeptocycasBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leptocycas", "genLeptocycasOverrideBiomes", genLeptocycasOverrideBiomes);
        prop.setComment("List of biomes Leptocycas are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genLeptocycasOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Leptocycas", "dimLeptocycas", dimLeptocycas);
        prop.setComment("List of dimension IDs Leptocycas can generate in [default: 0]");
        dimLeptocycas = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leptocycas", "minheightLeptocycas", minheightLeptocycas);
        prop.setComment("Minimum height that Leptocycas can generate (1 to 250) [default: 1]");
        minheightLeptocycas = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leptocycas", "maxheightLeptocycas", maxheightLeptocycas);
        prop.setComment("Maximum height that Leptocycas can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightLeptocycas = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leptocycas", "multiplierLeptocycas", multiplierLeptocycas);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierLeptocycas = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Feathery Cycad", "genDioon", genDioon);
        prop.setComment("Set to true to generate Feathery Cycads naturally [default: false]");
        genDioon = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen DioonFeathery Cycad", "genDioonBlacklistBiomes", genDioonBlacklistBiomes);
        prop.setComment("List of biomes Feathery Cycads are blacklisted from, in the format: modid:biomeid [default: empty]");
        genDioonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Feathery Cycad", "genDioonOverrideBiomes", genDioonOverrideBiomes);
        prop.setComment("List of biomes Feathery Cycads are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genDioonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Feathery Cycad", "dimDioon", dimDioon);
        prop.setComment("List of dimension IDs Feathery Cycads can generate in [default: 0]");
        dimDioon = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Feathery Cycad", "minheightDioon", minheightDioon);
        prop.setComment("Minimum height that Feathery Cycads can generate (1 to 250) [default: 1]");
        minheightDioon = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Feathery Cycad", "maxheightDioon", maxheightDioon);
        prop.setComment("Maximum height that Feathery Cycads can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightDioon = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Feathery Cycad", "multiplierDioon", multiplierDioon);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierDioon = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Nilssonia", "genNilssonia", genNilssonia);
        prop.setComment("Set to true to generate Nilssonia naturally [default: false]");
        genNilssonia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssonia", "genNilssoniaBlacklistBiomes", genNilssoniaBlacklistBiomes);
        prop.setComment("List of biomes Nilssonia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNilssoniaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssonia", "genNilssoniaOverrideBiomes", genNilssoniaOverrideBiomes);
        prop.setComment("List of biomes Nilssonia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNilssoniaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Nilssonia", "dimNilssonia", dimNilssonia);
        prop.setComment("List of dimension IDs Nilssonia can generate in [default: 0]");
        dimNilssonia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssonia", "minheightNilssonia", minheightNilssonia);
        prop.setComment("Minimum height that Nilssonia can generate (1 to 250) [default: 1]");
        minheightNilssonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssonia", "maxheightNilssonia", maxheightNilssonia);
        prop.setComment("Maximum height that Nilssonia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightNilssonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssonia", "multiplierNilssonia", multiplierNilssonia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNilssonia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Spiny Cycad", "genSpinyCycad", genSpinyCycad);
        prop.setComment("Set to true to generate Spiny Cycads naturally [default: false]");
        genSpinyCycad = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Spiny Cycad", "genSpinyCycadBlacklistBiomes", genSpinyCycadBlacklistBiomes);
        prop.setComment("List of biomes Spiny Cycads are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSpinyCycadBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Spiny Cycad", "genSpinyCycadOverrideBiomes", genSpinyCycadOverrideBiomes);
        prop.setComment("List of biomes Spiny Cycads are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSpinyCycadOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Spiny Cycad", "dimSpinyCycad", dimSpinyCycad);
        prop.setComment("List of dimension IDs Spiny Cycads can generate in [default: 0]");
        dimSpinyCycad = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Spiny Cycad", "minheightSpinyCycad", minheightSpinyCycad);
        prop.setComment("Minimum height that Spiny Cycads can generate (1 to 250) [default: 1]");
        minheightSpinyCycad = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Spiny Cycad", "maxheightSpinyCycad", maxheightSpinyCycad);
        prop.setComment("Maximum height that Spiny Cycads can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightSpinyCycad = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Spiny Cycad", "multiplierSpinyCycad", multiplierSpinyCycad);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSpinyCycad = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Psaronius", "genPsaronius", genPsaronius);
        prop.setComment("Set to true to generate Psaronius naturally [default: false]");
        genPsaronius = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psaronius", "genPsaroniusBlacklistBiomes", genPsaroniusBlacklistBiomes);
        prop.setComment("List of biomes Psaronius are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPsaroniusBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psaronius", "genPsaroniusOverrideBiomes", genPsaroniusOverrideBiomes);
        prop.setComment("List of biomes Psaronius are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPsaroniusOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Psaronius", "dimPsaronius", dimPsaronius);
        prop.setComment("List of dimension IDs Psaronius can generate in [default: 0]");
        dimPsaronius = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psaronius", "minheightPsaronius", minheightPsaronius);
        prop.setComment("Minimum height that Psaronius can generate (1 to 250) [default: 1]");
        minheightPsaronius = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psaronius", "maxheightPsaronius", maxheightPsaronius);
        prop.setComment("Maximum height that Psaronius can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPsaronius = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psaronius", "multiplierPsaronius", multiplierPsaronius);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPsaronius = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Tietea", "genTietea", genTietea);
        prop.setComment("Set to true to generate Tietea naturally [default: false]");
        genTietea = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tietea", "genTieteaBlacklistBiomes", genTieteaBlacklistBiomes);
        prop.setComment("List of biomes Tietea are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTieteaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tietea", "genTieteaOverrideBiomes", genTieteaOverrideBiomes);
        prop.setComment("List of biomes Tietea are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genTieteaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Tietea", "dimTietea", dimTietea);
        prop.setComment("List of dimension IDs Tietea can generate in [default: 0]");
        dimTietea = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tietea", "minheightTietea", minheightTietea);
        prop.setComment("Minimum height that Tietea can generate (1 to 250) [default: 1]");
        minheightTietea = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tietea", "maxheightTietea", maxheightTietea);
        prop.setComment("Maximum height that Tietea can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightTietea = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tietea", "multiplierTietea", multiplierTietea);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTietea = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Dicroidium zuberi", "genDicroidiumZuberi", genDicroidiumZuberi);
        prop.setComment("Set to true to generate Dicroidium zuberi naturally [default: false]");
        genDicroidiumZuberi = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium zuberi", "genDicroidiumZuberiBlacklistBiomes", genDicroidiumZuberiBlacklistBiomes);
        prop.setComment("List of biomes Dicroidium zuberi are blacklisted from, in the format: modid:biomeid [default: empty]");
        genDicroidiumZuberiBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium zuberi", "genDicroidiumZuberiOverrideBiomes", genDicroidiumZuberiOverrideBiomes);
        prop.setComment("List of biomes Dicroidium zuberi are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genDicroidiumZuberiOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Dicroidium zuberi", "dimDicroidiumZuberi", dimDicroidiumZuberi);
        prop.setComment("List of dimension IDs Dicroidium zuberi can generate in [default: 0]");
        dimDicroidiumZuberi = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium zuberi", "minheightDicroidiumZuberi", minheightDicroidiumZuberi);
        prop.setComment("Minimum height that Dicroidium zuberi can generate (1 to 250) [default: 1]");
        minheightDicroidiumZuberi = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium zuberi", "maxheightDicroidiumZuberi", maxheightDicroidiumZuberi);
        prop.setComment("Maximum height that Dicroidium zuberi can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightDicroidiumZuberi = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium zuberi", "multiplierDicroidiumZuberi", multiplierDicroidiumZuberi);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierDicroidiumZuberi = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Dicroidium fremouwensis", "genDicroidiumFremouwensis", genDicroidiumFremouwensis);
        prop.setComment("Set to true to generate Dicroidium fremouwensis trees naturally [default: false]");
        genDicroidiumFremouwensis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium fremouwensis", "genDicroidiumFremouwensisBlacklistBiomes", genDicroidiumFremouwensisBlacklistBiomes);
        prop.setComment("List of biomes Dicroidium fremouwensis trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genDicroidiumFremouwensisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium fremouwensis", "genDicroidiumFremouwensisOverrideBiomes", genDicroidiumFremouwensisOverrideBiomes);
        prop.setComment("List of biomes Dicroidium fremouwensis trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genDicroidiumFremouwensisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Dicroidium fremouwensis", "dimDicroidiumFremouwensis", dimDicroidiumFremouwensis);
        prop.setComment("List of dimension IDs Dicroidium fremouwensis trees can generate in [default: 0]");
        dimDicroidiumFremouwensis = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium fremouwensis", "minheightDicroidiumFremouwensis", minheightDicroidiumFremouwensis);
        prop.setComment("Minimum height that Dicroidium fremouwensis trees can generate (1 to 250) [default: 1]");
        minheightDicroidiumFremouwensis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium fremouwensis", "maxheightDicroidiumFremouwensis", maxheightDicroidiumFremouwensis);
        prop.setComment("Maximum height that Dicroidium fremouwensis trees can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightDicroidiumFremouwensis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicroidium fremouwensis", "multiplierDicroidiumFremouwensis", multiplierDicroidiumFremouwensis);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierDicroidiumFremouwensis = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Caytoniales", "genCaytoniales", genCaytoniales);
        prop.setComment("Set to true to generate Caytoniales naturally [default: false]");
        genCaytoniales = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Caytoniales", "genCaytonialesBlacklistBiomes", genCaytonialesBlacklistBiomes);
        prop.setComment("List of biomes Caytoniales are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCaytonialesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Caytoniales", "genCaytonialesOverrideBiomes", genCaytonialesOverrideBiomes);
        prop.setComment("List of biomes Caytoniales are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCaytonialesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Caytoniales", "dimCaytoniales", dimCaytoniales);
        prop.setComment("List of dimension IDs Caytoniales can generate in [default: 0]");
        dimCaytoniales = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Caytoniales", "minheightCaytoniales", minheightCaytoniales);
        prop.setComment("Minimum height that Caytoniales can generate (1 to 250) [default: 1]");
        minheightCaytoniales = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Caytoniales", "maxheightCaytoniales", maxheightCaytoniales);
        prop.setComment("Maximum height that Caytoniales can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightCaytoniales = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Caytoniales", "multiplierCaytoniales", multiplierCaytoniales);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCaytoniales = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Dicksonia", "genDicksonia", genDicksonia);
        prop.setComment("Set to true to generate Dicksonia naturally [default: false]");
        genDicksonia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicksonia", "genDicksoniaBlacklistBiomes", genDicksoniaBlacklistBiomes);
        prop.setComment("List of biomes Dicksonia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genDicksoniaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicksonia", "genDicksoniaOverrideBiomes", genDicksoniaOverrideBiomes);
        prop.setComment("List of biomes Dicksonia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genDicksoniaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Dicksonia", "dimDicksonia", dimDicksonia);
        prop.setComment("List of dimension IDs Dicksonia can generate in [default: 0]");
        dimDicksonia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicksonia", "minheightDicksonia", minheightDicksonia);
        prop.setComment("Minimum height that Dicksonia can generate (1 to 250) [default: 1]");
        minheightDicksonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicksonia", "maxheightDicksonia", maxheightDicksonia);
        prop.setComment("Maximum height that Dicksonia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightDicksonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicksonia", "multiplierDicksonia", multiplierDicksonia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierDicksonia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Symplocopteris", "genZygopteridaceae", genZygopteridaceae);
        prop.setComment("Set to true to generate Symplocopteris naturally [default: false]");
        genZygopteridaceae = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Symplocopteris", "genZygopteridaceaeBlacklistBiomes", genZygopteridaceaeBlacklistBiomes);
        prop.setComment("List of biomes Symplocopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genZygopteridaceaeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Symplocopteris", "genZygopteridaceaeOverrideBiomes", genZygopteridaceaeOverrideBiomes);
        prop.setComment("List of biomes Symplocopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genZygopteridaceaeOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Symplocopteris", "dimZygopteridaceae", dimZygopteridaceae);
        prop.setComment("List of dimension IDs Symplocopteris can generate in [default: 0]");
        dimZygopteridaceae = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Symplocopteris", "minheightZygopteridaceae", minheightZygopteridaceae);
        prop.setComment("Minimum height that Symplocopteris can generate (1 to 250) [default: 1]");
        minheightZygopteridaceae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Symplocopteris", "maxheightZygopteridaceae", maxheightZygopteridaceae);
        prop.setComment("Maximum height that Symplocopteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightZygopteridaceae = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Symplocopteris", "multiplierZygopteridaceae", multiplierZygopteridaceae);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierZygopteridaceae = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Cordaites", "genCordaites", genCordaites);
        prop.setComment("Set to true to generate Cordaites trees naturally [default: false]");
        genCordaites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cordaites", "genCordaitesBlacklistBiomes", genCordaitesBlacklistBiomes);
        prop.setComment("List of biomes Cordaites trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCordaitesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cordaites", "genCordaitesOverrideBiomes", genCordaitesOverrideBiomes);
        prop.setComment("List of biomes Cordaites trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCordaitesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Cordaites", "dimCordaites", dimCordaites);
        prop.setComment("List of dimension IDs Cordaites trees can generate in [default: 0]");
        dimCordaites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cordaites", "minheightCordaites", minheightCordaites);
        prop.setComment("Minimum height that Cordaites trees can generate (1 to 250) [default: 1]");
        minheightCordaites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cordaites", "maxheightCordaites", maxheightCordaites);
        prop.setComment("Maximum height that Cordaites trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightCordaites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cordaites", "multiplierCordaites", multiplierCordaites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCordaites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sphenophyllales (Climbing)", "genSphenophyllalesLepidodendron", genSphenophyllalesLepidodendron);
        prop.setComment("Set to true to generate Climbing Sphenophyllales naturally on Lepidodendron trees [default: false]");
        genSphenophyllalesLepidodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Climbing)", "genSphenophyllalesBothrodendron", genSphenophyllalesBothrodendron);
        prop.setComment("Set to true to generate Climbing Sphenophyllales naturally on Bothrodendron trees [default: false]");
        genSphenophyllalesBothrodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Climbing)", "genSphenophyllalesCordaites", genSphenophyllalesCordaites);
        prop.setComment("Set to true to generate Climbing Sphenophyllales naturally on Cordaites trees [default: false]");
        genSphenophyllalesCordaites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Climbing)", "genSphenophyllalesDiaphorodendron", genSphenophyllalesDiaphorodendron);
        prop.setComment("Set to true to generate Climbing Sphenophyllales naturally on Diaphorodendron trees [default: false]");
        genSphenophyllalesDiaphorodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Climbing)", "genSphenophyllalesArthropitys", genSphenophyllalesArthropitys);
        prop.setComment("Set to true to generate Climbing Sphenophyllales naturally on Arthropitys trees [default: false]");
        genSphenophyllalesArthropitys = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Climbing)", "genSphenophyllalesBlacklistBiomes", genSphenophyllalesBlacklistBiomes);
        prop.setComment("List of biomes Climbing Sphenophyllales are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSphenophyllalesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Climbing)", "genSphenophyllalesOverrideBiomes", genSphenophyllalesOverrideBiomes);
        prop.setComment("List of biomes Climbing Sphenophyllales are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSphenophyllalesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Sphenophyllales (Climbing)", "dimSphenophyllales", dimSphenophyllales);
        prop.setComment("List of dimension IDs Climbing Sphenophyllales can generate in [default: 0]");
        dimSphenophyllales = prop.getIntList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Giant Horsetails", "genHorsetail", genHorsetail);
        prop.setComment("Set to true to generate Giant Horsetails naturally [default: false]");
        genHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Giant Horsetails", "genHorsetailBlacklistBiomes", genHorsetailBlacklistBiomes);
        prop.setComment("List of biomes Giant Horsetails are blacklisted from, in the format: modid:biomeid [default: empty]");
        genHorsetailBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Giant Horsetails", "genHorsetailOverrideBiomes", genHorsetailOverrideBiomes);
        prop.setComment("List of biomes Giant Horsetails are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genHorsetailOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Giant Horsetails", "dimHorsetail", dimHorsetail);
        prop.setComment("List of dimension IDs Giant Horsetails can generate in [default: 0]");
        dimHorsetail = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Giant Horsetails", "minheightHorsetail", minheightHorsetail);
        prop.setComment("Minimum height that Giant Horsetails can generate (1 to 250) [default: 1]");
        minheightHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Giant Horsetails", "maxheightHorsetail", maxheightHorsetail);
        prop.setComment("Maximum height that Giant Horsetails can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Giant Horsetails", "multiplierHorsetail", multiplierHorsetail);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierHorsetail = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Cooksonia", "genCooksonia", genCooksonia);
        prop.setComment("Set to true to generate Cooksonia naturally [default: false]");
        genCooksonia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cooksonia", "genCooksoniaBlacklistBiomes", genCooksoniaBlacklistBiomes);
        prop.setComment("List of biomes Cooksonia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCooksoniaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cooksonia", "genCooksoniaOverrideBiomes", genCooksoniaOverrideBiomes);
        prop.setComment("List of biomes Cooksonia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCooksoniaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Cooksonia", "dimCooksonia", dimCooksonia);
        prop.setComment("List of dimension IDs Cooksonia can generate in [default: 0]");
        dimCooksonia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cooksonia", "waterCooksoniaHorizontal", waterCooksoniaHorizontal);
        prop.setComment("Distance NSEW from water that Cooksonia can exist and spread onto neighbouring dirt and grass (1 to 16) [default: 3]");
        waterCooksoniaHorizontal = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cooksonia", "waterCooksoniaVertical", waterCooksoniaVertical);
        prop.setComment("Distance above water required for Cooksonia to exist (0 to 6) [default: 0]");
        waterCooksoniaVertical = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cooksonia", "minheightCooksonia", minheightCooksonia);
        prop.setComment("Minimum height that Cooksonia can generate (1 to 250) [default: 1]");
        minheightCooksonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cooksonia", "maxheightCooksonia", maxheightCooksonia);
        prop.setComment("Maximum height that Cooksonia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightCooksonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cooksonia", "multiplierCooksonia", multiplierCooksonia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCooksonia = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cooksonia", "spreadCooksonia", spreadCooksonia);
        prop.setComment("Set to true for Cooksonia to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadCooksonia = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Psilophyton", "genPsilophyton", genPsilophyton);
        prop.setComment("Set to true to generate Psilophyton naturally [default: false]");
        genPsilophyton = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psilophyton", "genPsilophytonBlacklistBiomes", genPsilophytonBlacklistBiomes);
        prop.setComment("List of biomes Psilophyton are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPsilophytonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psilophyton", "genPsilophytonOverrideBiomes", genPsilophytonOverrideBiomes);
        prop.setComment("List of biomes Psilophyton are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPsilophytonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Psilophyton", "dimPsilophyton", dimPsilophyton);
        prop.setComment("List of dimension IDs Psilophyton can generate in [default: 0]");
        dimPsilophyton = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psilophyton", "waterPsilophytonHorizontal", waterPsilophytonHorizontal);
        prop.setComment("Distance NSEW from water that Psilophyton can exist and spread onto neighbouring sand and dirt, although it will never grow right next to water, (1 to 16) [default: 5]");
        waterPsilophytonHorizontal = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psilophyton", "waterPsilophytonVertical", waterPsilophytonVertical);
        prop.setComment("Distance above water required for Psilophyton to exist (0 to 6) [default: 1]");
        waterPsilophytonVertical = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psilophyton", "minheightPsilophyton", minheightPsilophyton);
        prop.setComment("Minimum height that Psilophyton can generate (1 to 250) [default: 1]");
        minheightPsilophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psilophyton", "maxheightPsilophyton", maxheightPsilophyton);
        prop.setComment("Maximum height that Psilophyton can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPsilophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psilophyton", "multiplierPsilophyton", multiplierPsilophyton);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPsilophyton = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Psilophyton", "spreadPsilophyton", spreadPsilophyton);
        prop.setComment("Set to true for Psilophyton to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadPsilophyton = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Asteroxylon", "genAsteroxylon", genAsteroxylon);
        prop.setComment("Set to true to generate Asteroxylon naturally [default: false]");
        genAsteroxylon = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Asteroxylon", "genAsteroxylonBlacklistBiomes", genAsteroxylonBlacklistBiomes);
        prop.setComment("List of biomes Asteroxylon are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAsteroxylonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Asteroxylon", "genAsteroxylonOverrideBiomes", genAsteroxylonOverrideBiomes);
        prop.setComment("List of biomes Asteroxylon are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAsteroxylonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Asteroxylon", "dimAsteroxylon", dimAsteroxylon);
        prop.setComment("List of dimension IDs Asteroxylon can generate in [default: 0]");
        dimAsteroxylon = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Asteroxylon", "waterAsteroxylonHorizontal", waterAsteroxylonHorizontal);
        prop.setComment("Distance NSEW from water that Asteroxylon can exist and spread onto neighbouring sand (1 to 16). [default: 5]");
        waterAsteroxylonHorizontal = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Asteroxylon", "waterAsteroxylonVertical", waterAsteroxylonVertical);
        prop.setComment("Distance above water required for Asteroxylon to exist (0 to 6) [default: 0]");
        waterAsteroxylonVertical = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Asteroxylon", "minheightAsteroxylon", minheightAsteroxylon);
        prop.setComment("Minimum height that Asteroxylon can generate (1 to 250) [default: 1]");
        minheightAsteroxylon = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Asteroxylon", "maxheightAsteroxylon", maxheightAsteroxylon);
        prop.setComment("Maximum height that Asteroxylon can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAsteroxylon = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Asteroxylon", "multiplierAsteroxylon", multiplierAsteroxylon);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAsteroxylon = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Asteroxylon", "spreadAsteroxylon", spreadAsteroxylon);
        prop.setComment("Set to true for Asteroxylon to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadAsteroxylon = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Prototaxites", "genPrototaxites", genPrototaxites);
        prop.setComment("Set to true to generate Prototaxites naturally [default: false]");
        genPrototaxites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Prototaxites", "genPrototaxitesBlacklistBiomes", genPrototaxitesBlacklistBiomes);
        prop.setComment("List of biomes Prototaxites are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPrototaxitesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Prototaxites", "genPrototaxitesOverrideBiomes", genPrototaxitesOverrideBiomes);
        prop.setComment("List of biomes Prototaxites are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPrototaxitesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Prototaxites", "dimPrototaxites", dimPrototaxites);
        prop.setComment("List of dimension IDs Prototaxites can generate in [default: 0]");
        dimPrototaxites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Prototaxites", "waterPrototaxitesHorizontal", waterPrototaxitesHorizontal);
        prop.setComment("Distance NSEW from water that Prototaxites can exist and spread onto neighbouring sand (1 to 16). [default: 3]");
        waterPrototaxitesHorizontal = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Prototaxites", "waterPrototaxitesVertical", waterPrototaxitesVertical);
        prop.setComment("Distance above water required for Prototaxites to exist (0 to 6) [default: 0]");
        waterPrototaxitesVertical = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Prototaxites", "minheightPrototaxites", minheightPrototaxites);
        prop.setComment("Minimum height that Prototaxites can generate (1 to 250) [default: 1]");
        minheightPrototaxites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Prototaxites", "maxheightPrototaxites", maxheightPrototaxites);
        prop.setComment("Maximum height that Prototaxites can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightPrototaxites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Prototaxites", "multiplierPrototaxites", multiplierPrototaxites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPrototaxites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Wattieza", "genWattieza", genWattieza);
        prop.setComment("Set to true to generate Wattieza trees naturally [default: false]");
        genWattieza = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wattieza", "genWattiezaBlacklistBiomes", genWattiezaBlacklistBiomes);
        prop.setComment("List of biomes Wattieza trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWattiezaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wattieza", "genWattiezaOverrideBiomes", genWattiezaOverrideBiomes);
        prop.setComment("List of biomes Wattieza trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genWattiezaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Wattieza", "dimWattieza", dimWattieza);
        prop.setComment("List of dimension IDs Wattieza trees can generate in [default: 0]");
        dimWattieza = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wattieza", "minheightWattieza", minheightWattieza);
        prop.setComment("Minimum height that Wattieza trees can generate (1 to 250) [default: 1]");
        minheightWattieza = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wattieza", "maxheightWattieza", maxheightWattieza);
        prop.setComment("Maximum height that Wattieza trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightWattieza = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wattieza", "multiplierWattieza", multiplierWattieza);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierWattieza = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Aneurophyton", "genAneurophyton", genAneurophyton);
        prop.setComment("Set to true to generate Aneurophyton naturally [default: false]");
        genAneurophyton = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aneurophyton", "genAneurophytonBlacklistBiomes", genAneurophytonBlacklistBiomes);
        prop.setComment("List of biomes Aneurophyton are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAneurophytonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aneurophyton", "genAneurophytonOverrideBiomes", genAneurophytonOverrideBiomes);
        prop.setComment("List of biomes Aneurophyton are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAneurophytonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Aneurophyton", "dimAneurophyton", dimAneurophyton);
        prop.setComment("List of dimension IDs Aneurophyton can generate in [default: 0]");
        dimAneurophyton = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aneurophyton", "minheightAneurophyton", minheightAneurophyton);
        prop.setComment("Minimum height that Aneurophyton can generate (1 to 250) [default: 1]");
        minheightAneurophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aneurophyton", "maxheightAneurophyton", maxheightAneurophyton);
        prop.setComment("Maximum height that Aneurophyton can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAneurophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aneurophyton", "multiplierAneurophyton", multiplierAneurophyton);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAneurophyton = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Podozamites", "genPodozamites", genPodozamites);
        prop.setComment("Set to true to generate Podozamites trees naturally [default: false]");
        genPodozamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podozamites", "genPodozamitesBlacklistBiomes", genPodozamitesBlacklistBiomes);
        prop.setComment("List of biomes Podozamites trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPodozamitesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podozamites", "genPodozamitesOverrideBiomes", genPodozamitesOverrideBiomes);
        prop.setComment("List of biomes Podozamites trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPodozamitesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Podozamites", "dimPodozamites", dimPodozamites);
        prop.setComment("List of dimension IDs Podozamites trees can generate in [default: 0]");
        dimPodozamites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podozamites", "minheightPodozamites", minheightPodozamites);
        prop.setComment("Minimum height that Podozamites trees can generate (1 to 250) [default: 1]");
        minheightPodozamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podozamites", "maxheightPodozamites", maxheightPodozamites);
        prop.setComment("Maximum height that Podozamites trees can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightPodozamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Podozamites", "multiplierPodozamites", multiplierPodozamites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPodozamites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Valmeyerodendron", "genValmeyerodendron", genValmeyerodendron);
        prop.setComment("Set to true to generate Valmeyerodendron trees naturally [default: false]");
        genValmeyerodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Valmeyerodendron", "genValmeyerodendronBlacklistBiomes", genValmeyerodendronBlacklistBiomes);
        prop.setComment("List of biomes Valmeyerodendron trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genValmeyerodendronBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Valmeyerodendron", "genValmeyerodendronOverrideBiomes", genValmeyerodendronOverrideBiomes);
        prop.setComment("List of biomes Valmeyerodendron are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genValmeyerodendronOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Valmeyerodendron", "dimValmeyerodendron", dimValmeyerodendron);
        prop.setComment("List of dimension IDs Valmeyerodendron trees can generate in [default: 0]");
        dimValmeyerodendron = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Valmeyerodendron", "minheightValmeyerodendron", minheightValmeyerodendron);
        prop.setComment("Minimum height that Valmeyerodendron trees can generate (1 to 250) [default: 1]");
        minheightValmeyerodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Valmeyerodendron", "maxheightValmeyerodendron", maxheightValmeyerodendron);
        prop.setComment("Maximum height that Valmeyerodendron trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightValmeyerodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Valmeyerodendron", "multiplierValmeyerodendron", multiplierValmeyerodendron);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierValmeyerodendron = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Protea", "genProtea", genProtea);
        prop.setComment("Set to true to generate Archaeo-protea naturally [default: false]");
        genProtea = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protea", "genProteaBlacklistBiomes", genProteaBlacklistBiomes);
        prop.setComment("List of biomes Archaeo-protea are blacklisted from, in the format: modid:biomeid [default: empty]");
        genProteaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protea", "genProteaOverrideBiomes", genProteaOverrideBiomes);
        prop.setComment("List of biomes Archaeo-protea are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genProteaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Protea", "dimProtea", dimProtea);
        prop.setComment("List of dimension IDs Archaeo-protea can generate in [default: 0]");
        dimProtea = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protea", "minheightProtea", minheightProtea);
        prop.setComment("Minimum height that Archaeo-protea can generate (1 to 250) [default: 85]");
        minheightProtea = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protea", "maxheightProtea", maxheightProtea);
        prop.setComment("Maximum height that Archaeo-protea can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightProtea = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protea", "multiplierProtea", multiplierProtea);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierProtea = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Banksia", "genBanksia", genBanksia);
        prop.setComment("Set to true to generate Archaeo-banksia naturally [default: false]");
        genBanksia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Banksia", "genBanksiaBlacklistBiomes", genBanksiaBlacklistBiomes);
        prop.setComment("List of biomes Archaeo-banksia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBanksiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Banksia", "genBanksiaOverrideBiomes", genBanksiaOverrideBiomes);
        prop.setComment("List of biomes Archaeo-banksia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBanksiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Banksia", "dimBanksia", dimBanksia);
        prop.setComment("List of dimension IDs Archaeo-banksia can generate in [default: 0]");
        dimBanksia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Banksia", "minheightBanksia", minheightBanksia);
        prop.setComment("Minimum height that Archaeo-banksia can generate (1 to 250) [default: 1]");
        minheightBanksia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Banksia", "maxheightBanksia", maxheightBanksia);
        prop.setComment("Maximum height that Archaeo-banksia can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightBanksia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Banksia", "multiplierBanksia", multiplierBanksia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBanksia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Walchia", "genWalchia", genWalchia);
        prop.setComment("Set to true to generate Walchia trees naturally [default: false]");
        genWalchia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Walchia", "genWalchiaBlacklistBiomes", genWalchiaBlacklistBiomes);
        prop.setComment("List of biomes Walchia trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWalchiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Walchia", "genWalchiaOverrideBiomes", genWalchiaOverrideBiomes);
        prop.setComment("List of biomes Walchia trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genWalchiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Walchia", "dimWalchia", dimWalchia);
        prop.setComment("List of dimension IDs Walchia trees can generate in [default: 0]");
        dimWalchia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Walchia", "minheightWalchia", minheightWalchia);
        prop.setComment("Minimum height that Walchia trees can generate (1 to 250) [default: 75]");
        minheightWalchia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Walchia", "maxheightWalchia", maxheightWalchia);
        prop.setComment("Maximum height that Walchia trees can generate (1 to 250, or set to 0 for unlimited) [default: 125]");
        maxheightWalchia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Walchia", "multiplierWalchia", multiplierWalchia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierWalchia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Lepidopteris", "genLepidopteris", genLepidopteris);
        prop.setComment("Set to true to generate Lepidopteris naturally [default: false]");
        genLepidopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidopteris", "genLepidopterisBlacklistBiomes", genLepidopterisBlacklistBiomes);
        prop.setComment("List of biomes Lepidopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLepidopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidopteris", "genLepidopterisOverrideBiomes", genLepidopterisOverrideBiomes);
        prop.setComment("List of biomes Lepidopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genLepidopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Lepidopteris", "dimLepidopteris", dimLepidopteris);
        prop.setComment("List of dimension IDs Lepidopteris can generate in [default: 0]");
        dimLepidopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidopteris", "minheightLepidopteris", minheightLepidopteris);
        prop.setComment("Minimum height that Lepidopteris can generate (1 to 250) [default: 1]");
        minheightLepidopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidopteris", "maxheightLepidopteris", maxheightLepidopteris);
        prop.setComment("Maximum height that Lepidopteris can generate (1 to 250, or set to 0 for unlimited) [default: 95]");
        maxheightLepidopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lepidopteris", "multiplierLepidopteris", multiplierLepidopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierLepidopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Glenopteris", "genGlenopteris", genGlenopteris);
        prop.setComment("Set to true to generate Glenopteris naturally [default: false]");
        genGlenopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glenopteris", "genGlenopterisBlacklistBiomes", genGlenopterisBlacklistBiomes);
        prop.setComment("List of biomes Glenopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGlenopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glenopteris", "genGlenopterisOverrideBiomes", genGlenopterisOverrideBiomes);
        prop.setComment("List of biomes Glenopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genGlenopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Glenopteris", "dimGlenopteris", dimGlenopteris);
        prop.setComment("List of dimension IDs Glenopteris can generate in [default: 0]");
        dimGlenopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glenopteris", "minheightGlenopteris", minheightGlenopteris);
        prop.setComment("Minimum height that Glenopteris can generate (1 to 250) [default: 1]");
        minheightGlenopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glenopteris", "maxheightGlenopteris", maxheightGlenopteris);
        prop.setComment("Maximum height that Glenopteris can generate (1 to 250, or set to 0 for unlimited) [default: 95]");
        maxheightGlenopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Glenopteris", "multiplierGlenopteris", multiplierGlenopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierGlenopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Nemejcopteris", "genNemejcopteris", genNemejcopteris);
        prop.setComment("Set to true to generate Nemejcopteris naturally [default: false]");
        genNemejcopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nemejcopteris", "genNemejcopterisBlacklistBiomes", genNemejcopterisBlacklistBiomes);
        prop.setComment("List of biomes Nemejcopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNemejcopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nemejcopteris", "genNemejcopterisOverrideBiomes", genNemejcopterisOverrideBiomes);
        prop.setComment("List of biomes Nemejcopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNemejcopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Nemejcopteris", "dimNemejcopteris", dimNemejcopteris);
        prop.setComment("List of dimension IDs Nemejcopteris can generate in [default: 0]");
        dimNemejcopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nemejcopteris", "minheightNemejcopteris", minheightNemejcopteris);
        prop.setComment("Minimum height that Nemejcopteris can generate (1 to 250) [default: 1]");
        minheightNemejcopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nemejcopteris", "maxheightNemejcopteris", maxheightNemejcopteris);
        prop.setComment("Maximum height that Nemejcopteris can generate (1 to 250, or set to 0 for unlimited) [default: 95]");
        maxheightNemejcopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nemejcopteris", "multiplierNemejcopteris", multiplierNemejcopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNemejcopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Alliopteris", "genAlliopteris", genAlliopteris);
        prop.setComment("Set to true to generate Alliopteris naturally [default: false]");
        genAlliopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alliopteris", "genAlliopterisBlacklistBiomes", genAlliopterisBlacklistBiomes);
        prop.setComment("List of biomes Alliopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAlliopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alliopteris", "genAlliopterisOverrideBiomes", genAlliopterisOverrideBiomes);
        prop.setComment("List of biomes Alliopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAlliopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Alliopteris", "dimAlliopteris", dimAlliopteris);
        prop.setComment("List of dimension IDs Alliopteris can generate in [default: 0]");
        dimAlliopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alliopteris", "minheightAlliopteris", minheightAlliopteris);
        prop.setComment("Minimum height that Alliopteris can generate (1 to 250) [default: 1]");
        minheightAlliopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alliopteris", "maxheightAlliopteris", maxheightAlliopteris);
        prop.setComment("Maximum height that Alliopteris can generate (1 to 250, or set to 0 for unlimited) [default: 95]");
        maxheightAlliopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alliopteris", "multiplierAlliopteris", multiplierAlliopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAlliopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Reticulopteris", "genReticulopteris", genReticulopteris);
        prop.setComment("Set to true to generate Reticulopteris naturally [default: false]");
        genReticulopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reticulopteris", "genReticulopterisBlacklistBiomes", genReticulopterisBlacklistBiomes);
        prop.setComment("List of biomes Reticulopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genReticulopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reticulopteris", "genReticulopterisOverrideBiomes", genReticulopterisOverrideBiomes);
        prop.setComment("List of biomes Reticulopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genReticulopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Reticulopteris", "dimReticulopteris", dimReticulopteris);
        prop.setComment("List of dimension IDs Reticulopteris can generate in [default: 0]");
        dimReticulopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reticulopteris", "minheightReticulopteris", minheightReticulopteris);
        prop.setComment("Minimum height that Reticulopteris can generate (1 to 250) [default: 1]");
        minheightReticulopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reticulopteris", "maxheightReticulopteris", maxheightReticulopteris);
        prop.setComment("Maximum height that Reticulopteris can generate (1 to 250, or set to 0 for unlimited) [default: 95]");
        maxheightReticulopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reticulopteris", "multiplierReticulopteris", multiplierReticulopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierReticulopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Baikalophyllum", "genBaikalophyllum", genBaikalophyllum);
        prop.setComment("Set to true to generate Baikalophyllum naturally [default: false]");
        genBaikalophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baikalophyllum", "genBaikalophyllumBlacklistBiomes", genBaikalophyllumBlacklistBiomes);
        prop.setComment("List of biomes Baikalophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBaikalophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baikalophyllum", "genBaikalophyllumOverrideBiomes", genBaikalophyllumOverrideBiomes);
        prop.setComment("List of biomes Baikalophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBaikalophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Baikalophyllum", "dimBaikalophyllum", dimBaikalophyllum);
        prop.setComment("List of dimension IDs Baikalophyllum can generate in [default: 0]");
        dimBaikalophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baikalophyllum", "minheightBaikalophyllum", minheightBaikalophyllum);
        prop.setComment("Minimum height that Baikalophyllum can generate (1 to 250) [default: 1]");
        minheightBaikalophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baikalophyllum", "maxheightBaikalophyllum", maxheightBaikalophyllum);
        prop.setComment("Maximum height that Baikalophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightBaikalophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baikalophyllum", "multiplierBaikalophyllum", multiplierBaikalophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBaikalophyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Baiera", "genBaiera", genBaiera);
        prop.setComment("Set to true to generate Baiera naturally [default: false]");
        genBaiera = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baiera", "genBaieraBlacklistBiomes", genBaieraBlacklistBiomes);
        prop.setComment("List of biomes Baiera are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBaieraBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baiera", "genBaieraOverrideBiomes", genBaieraOverrideBiomes);
        prop.setComment("List of biomes Baiera are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBaieraOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Baiera", "dimBaiera", dimBaiera);
        prop.setComment("List of dimension IDs Baiera can generate in [default: 0]");
        dimBaiera = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baiera", "minheightBaiera", minheightBaiera);
        prop.setComment("Minimum height that Baiera can generate (1 to 250) [default: 1]");
        minheightBaiera = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baiera", "maxheightBaiera", maxheightBaiera);
        prop.setComment("Maximum height that Baiera can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightBaiera = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baiera", "multiplierBaiera", multiplierBaiera);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBaiera = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Trichopitys", "genTrichopitys", genTrichopitys);
        prop.setComment("Set to true to generate Trichopitys naturally [default: false]");
        genTrichopitys = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Trichopitys", "genTrichopitysBlacklistBiomes", genTrichopitysBlacklistBiomes);
        prop.setComment("List of biomes Trichopitys are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTrichopitysBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Trichopitys", "genTrichopitysOverrideBiomes", genTrichopitysOverrideBiomes);
        prop.setComment("List of biomes Trichopitys are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genTrichopitysOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Trichopitys", "dimTrichopitys", dimTrichopitys);
        prop.setComment("List of dimension IDs Trichopitys can generate in [default: 0]");
        dimTrichopitys = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Trichopitys", "minheightTrichopitys", minheightTrichopitys);
        prop.setComment("Minimum height that Trichopitys can generate (1 to 250) [default: 1]");
        minheightTrichopitys = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Trichopitys", "maxheightTrichopitys", maxheightTrichopitys);
        prop.setComment("Maximum height that Trichopitys can generate (1 to 250, or set to 0 for unlimited) [default: 105]");
        maxheightTrichopitys = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Trichopitys", "multiplierTrichopitys", multiplierTrichopitys);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTrichopitys = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Polyspermophyllum", "genPolyspermophyllum", genPolyspermophyllum);
        prop.setComment("Set to true to generate Polyspermophyllum naturally [default: false]");
        genPolyspermophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Polyspermophyllum", "genPolyspermophyllumBlacklistBiomes", genPolyspermophyllumBlacklistBiomes);
        prop.setComment("List of biomes Polyspermophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPolyspermophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Polyspermophyllum", "genPolyspermophyllumOverrideBiomes", genPolyspermophyllumOverrideBiomes);
        prop.setComment("List of biomes Polyspermophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPolyspermophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Polyspermophyllum", "dimPolyspermophyllum", dimPolyspermophyllum);
        prop.setComment("List of dimension IDs Polyspermophyllum can generate in [default: 0]");
        dimPolyspermophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Polyspermophyllum", "minheightPolyspermophyllum", minheightPolyspermophyllum);
        prop.setComment("Minimum height that Polyspermophyllum can generate (1 to 250) [default: 1]");
        minheightPolyspermophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Polyspermophyllum", "maxheightPolyspermophyllum", maxheightPolyspermophyllum);
        prop.setComment("Maximum height that Polyspermophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightPolyspermophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Polyspermophyllum", "multiplierPolyspermophyllum", multiplierPolyspermophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPolyspermophyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Nystroemia", "genNystroemia", genNystroemia);
        prop.setComment("Set to true to generate Nystroemia naturally [default: false]");
        genNystroemia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nystroemia", "genNystroemiaBlacklistBiomes", genNystroemiaBlacklistBiomes);
        prop.setComment("List of biomes Nystroemia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNystroemiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nystroemia", "genNystroemiaOverrideBiomes", genNystroemiaOverrideBiomes);
        prop.setComment("List of biomes Nystroemia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNystroemiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Nystroemia", "dimNystroemia", dimNystroemia);
        prop.setComment("List of dimension IDs Nystroemia can generate in [default: 0]");
        dimNystroemia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nystroemia", "minheightNystroemia", minheightNystroemia);
        prop.setComment("Minimum height that Nystroemia can generate (1 to 250) [default: 1]");
        minheightNystroemia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nystroemia", "maxheightNystroemia", maxheightNystroemia);
        prop.setComment("Maximum height that Nystroemia can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightNystroemia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nystroemia", "multiplierNystroemia", multiplierNystroemia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNystroemia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Isoetes", "genIsoetes", genIsoetes);
        prop.setComment("Set to true to generate Isoetes naturally [default: false]");
        genIsoetes = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Isoetes", "genIsoetesBlacklistBiomes", genIsoetesBlacklistBiomes);
        prop.setComment("List of biomes Isoetes are blacklisted from, in the format: modid:biomeid [default: empty]");
        genIsoetesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Isoetes", "genIsoetesOverrideBiomes", genIsoetesOverrideBiomes);
        prop.setComment("List of biomes Isoetes are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genIsoetesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Isoetes", "dimIsoetes", dimIsoetes);
        prop.setComment("List of dimension IDs Isoetes can generate in [default: 0]");
        dimIsoetes = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Isoetes", "minheightIsoetes", minheightIsoetes);
        prop.setComment("Minimum height that Isoetes can generate (1 to 250) [default: 1]");
        minheightIsoetes = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Isoetes", "maxheightIsoetes", maxheightIsoetes);
        prop.setComment("Maximum height that Isoetes can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightIsoetes = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Isoetes", "multiplierIsoetes", multiplierIsoetes);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierIsoetes = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Isoetes", "spreadIsoetes", spreadIsoetes);
        prop.setComment("Set to true for Isoetes to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadIsoetes = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sphenophyllales (Scrambling)", "genSphenophyllales1", genSphenophyllales1);
        prop.setComment("Set to true to generate Scrambling Sphenophyllales naturally [default: false]");
        genSphenophyllales1 = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Scrambling)", "genSphenophyllales1BlacklistBiomes", genSphenophyllales1BlacklistBiomes);
        prop.setComment("List of biomes Scrambling Sphenophyllales are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSphenophyllales1BlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Scrambling)", "genSphenophyllales1OverrideBiomes", genSphenophyllales1OverrideBiomes);
        prop.setComment("List of biomes Scrambling Sphenophyllales are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSphenophyllales1OverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Sphenophyllales (Scrambling)", "dimSphenophyllales1", dimSphenophyllales1);
        prop.setComment("List of dimension IDs Scrambling Sphenophyllales can generate in [default: 0]");
        dimSphenophyllales1 = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Scrambling)", "minheightSphenophyllales1", minheightSphenophyllales1);
        prop.setComment("Minimum height that Scrambling Sphenophyllales can generate (1 to 250) [default: 1]");
        minheightSphenophyllales1 = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Scrambling)", "maxheightSphenophyllales1", maxheightSphenophyllales1);
        prop.setComment("Maximum height that Scrambling Sphenophyllales can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightSphenophyllales1 = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenophyllales (Scrambling)", "multiplierSphenophyllales1", multiplierSphenophyllales1);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSphenophyllales1 = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Claytosmunda", "genClaytosmunda", genClaytosmunda);
        prop.setComment("Set to true to generate Claytosmunda naturally [default: false]");
        genClaytosmunda = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Claytosmunda", "genClaytosmundaBlacklistBiomes", genClaytosmundaBlacklistBiomes);
        prop.setComment("List of biomes Claytosmunda are blacklisted from, in the format: modid:biomeid [default: empty]");
        genClaytosmundaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Claytosmunda", "genClaytosmundaOverrideBiomes", genClaytosmundaOverrideBiomes);
        prop.setComment("List of biomes Claytosmunda are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genClaytosmundaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Claytosmunda", "dimClaytosmunda", dimClaytosmunda);
        prop.setComment("List of dimension IDs Claytosmunda can generate in [default: 0]");
        dimClaytosmunda = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Claytosmunda", "minheightClaytosmunda", minheightClaytosmunda);
        prop.setComment("Minimum height that Claytosmunda can generate (1 to 250) [default: 1]");
        minheightClaytosmunda = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Claytosmunda", "maxheightClaytosmunda", maxheightClaytosmunda);
        prop.setComment("Maximum height that Claytosmunda can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightClaytosmunda = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Claytosmunda", "multiplierClaytosmunda", multiplierClaytosmunda);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierClaytosmunda = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Dictyophyllum", "genDictyophyllum", genDictyophyllum);
        prop.setComment("Set to true to generate Dictyophyllum naturally [default: false]");
        genDictyophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dictyophyllum", "genDictyophyllumBlacklistBiomes", genDictyophyllumBlacklistBiomes);
        prop.setComment("List of biomes Dictyophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genDictyophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dictyophyllum", "genDictyophyllumOverrideBiomes", genDictyophyllumOverrideBiomes);
        prop.setComment("List of biomes Dictyophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genDictyophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Dictyophyllum", "dimDictyophyllum", dimDictyophyllum);
        prop.setComment("List of dimension IDs Dictyophyllum can generate in [default: 0]");
        dimDictyophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dictyophyllum", "minheightDictyophyllum", minheightDictyophyllum);
        prop.setComment("Minimum height that Dictyophyllum can generate (1 to 250) [default: 1]");
        minheightDictyophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dictyophyllum", "maxheightDictyophyllum", maxheightDictyophyllum);
        prop.setComment("Maximum height that Dictyophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightDictyophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dictyophyllum", "multiplierDictyophyllum", multiplierDictyophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierDictyophyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Otozamites", "genOtozamites", genOtozamites);
        prop.setComment("Set to true to generate Otozamites naturally [default: false]");
        genOtozamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Otozamites", "genOtozamitesBlacklistBiomes", genOtozamitesBlacklistBiomes);
        prop.setComment("List of biomes Otozamites are blacklisted from, in the format: modid:biomeid [default: empty]");
        genOtozamitesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Otozamites", "genOtozamitesOverrideBiomes", genOtozamitesOverrideBiomes);
        prop.setComment("List of biomes Otozamites are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genOtozamitesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Otozamites", "dimOtozamites", dimOtozamites);
        prop.setComment("List of dimension IDs Otozamites can generate in [default: 0]");
        dimOtozamites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Otozamites", "minheightOtozamites", minheightOtozamites);
        prop.setComment("Minimum height that Otozamites can generate (1 to 250) [default: 1]");
        minheightOtozamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Otozamites", "maxheightOtozamites", maxheightOtozamites);
        prop.setComment("Maximum height that Otozamites can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightOtozamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Otozamites", "multiplierOtozamites", multiplierOtozamites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierOtozamites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Anomozamites", "genAnomozamites", genAnomozamites);
        prop.setComment("Set to true to generate Anomozamites naturally [default: false]");
        genAnomozamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Anomozamites", "genAnomozamitesBlacklistBiomes", genAnomozamitesBlacklistBiomes);
        prop.setComment("List of biomes Anomozamites are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAnomozamitesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Anomozamites", "genAnomozamitesOverrideBiomes", genAnomozamitesOverrideBiomes);
        prop.setComment("List of biomes Anomozamites are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAnomozamitesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Anomozamites", "dimAnomozamites", dimAnomozamites);
        prop.setComment("List of dimension IDs Anomozamites can generate in [default: 0]");
        dimAnomozamites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Anomozamites", "minheightAnomozamites", minheightAnomozamites);
        prop.setComment("Minimum height that Anomozamites can generate (1 to 250) [default: 1]");
        minheightAnomozamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Anomozamites", "maxheightAnomozamites", maxheightAnomozamites);
        prop.setComment("Maximum height that Anomozamites can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAnomozamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Anomozamites", "multiplierAnomozamites", multiplierAnomozamites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAnomozamites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ptilophyllum", "genPtilophyllum", genPtilophyllum);
        prop.setComment("Set to true to generate Ptilophyllum naturally [default: false]");
        genPtilophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ptilophyllum", "genPtilophyllumBlacklistBiomes", genPtilophyllumBlacklistBiomes);
        prop.setComment("List of biomes Ptilophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPtilophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ptilophyllum", "genPtilophyllumOverrideBiomes", genPtilophyllumOverrideBiomes);
        prop.setComment("List of biomes Ptilophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPtilophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Ptilophyllum", "dimPtilophyllum", dimPtilophyllum);
        prop.setComment("List of dimension IDs Ptilophyllum can generate in [default: 0]");
        dimPtilophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ptilophyllum", "minheightPtilophyllum", minheightPtilophyllum);
        prop.setComment("Minimum height that Ptilophyllum can generate (1 to 250) [default: 1]");
        minheightPtilophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ptilophyllum", "maxheightPtilophyllum", maxheightPtilophyllum);
        prop.setComment("Maximum height that Ptilophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPtilophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ptilophyllum", "multiplierPtilophyllum", multiplierPtilophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPtilophyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Tongchuanophyllum", "genTongchuanophyllum", genTongchuanophyllum);
        prop.setComment("Set to true to generate Tongchuanophyllum naturally [default: false]");
        genTongchuanophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tongchuanophyllum", "genTongchuanophyllumBlacklistBiomes", genTongchuanophyllumBlacklistBiomes);
        prop.setComment("List of biomes Tongchuanophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTongchuanophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tongchuanophyllum", "genTongchuanophyllumOverrideBiomes", genTongchuanophyllumOverrideBiomes);
        prop.setComment("List of biomes Tongchuanophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genTongchuanophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Tongchuanophyllum", "dimTongchuanophyllum", dimTongchuanophyllum);
        prop.setComment("List of dimension IDs Tongchuanophyllum can generate in [default: 0]");
        dimTongchuanophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tongchuanophyllum", "minheightTongchuanophyllum", minheightTongchuanophyllum);
        prop.setComment("Minimum height that Tongchuanophyllum can generate (1 to 250) [default: 1]");
        minheightTongchuanophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tongchuanophyllum", "maxheightTongchuanophyllum", maxheightTongchuanophyllum);
        prop.setComment("Maximum height that Tongchuanophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightTongchuanophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tongchuanophyllum", "multiplierTongchuanophyllum", multiplierTongchuanophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTongchuanophyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Todites", "genTodites", genTodites);
        prop.setComment("Set to true to generate Todites naturally [default: false]");
        genTodites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Todites", "genToditesBlacklistBiomes", genToditesBlacklistBiomes);
        prop.setComment("List of biomes Todites are blacklisted from, in the format: modid:biomeid [default: empty]");
        genToditesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Todites", "genToditesOverrideBiomes", genToditesOverrideBiomes);
        prop.setComment("List of biomes Todites are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genToditesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Todites", "dimTodites", dimTodites);
        prop.setComment("List of dimension IDs Todites can generate in [default: 0]");
        dimTodites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Todites", "minheightTodites", minheightTodites);
        prop.setComment("Minimum height that Todites can generate (1 to 250) [default: 1]");
        minheightTodites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Todites", "maxheightTodites", maxheightTodites);
        prop.setComment("Maximum height that Todites can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightTodites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Todites", "multiplierTodites", multiplierTodites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTodites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Cladophlebis", "genCladophlebis", genCladophlebis);
        prop.setComment("Set to true to generate Cladophlebis naturally [default: false]");
        genCladophlebis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cladophlebis", "genCladophlebisBlacklistBiomes", genCladophlebisBlacklistBiomes);
        prop.setComment("List of biomes Cladophlebis are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCladophlebisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cladophlebis", "genCladophlebisOverrideBiomes", genCladophlebisOverrideBiomes);
        prop.setComment("List of biomes Cladophlebis are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCladophlebisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Cladophlebis", "dimCladophlebis", dimCladophlebis);
        prop.setComment("List of dimension IDs Cladophlebis can generate in [default: 0]");
        dimCladophlebis = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cladophlebis", "minheightCladophlebis", minheightCladophlebis);
        prop.setComment("Minimum height that Cladophlebis can generate (1 to 250) [default: 1]");
        minheightCladophlebis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cladophlebis", "maxheightCladophlebis", maxheightCladophlebis);
        prop.setComment("Maximum height that Cladophlebis can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightCladophlebis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cladophlebis", "multiplierCladophlebis", multiplierCladophlebis);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCladophlebis = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Clathropteris", "genClathropteris", genClathropteris);
        prop.setComment("Set to true to generate Clathropteris naturally [default: false]");
        genClathropteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Clathropteris", "genClathropterisBlacklistBiomes", genClathropterisBlacklistBiomes);
        prop.setComment("List of biomes Clathropteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genClathropterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Clathropteris", "genClathropterisOverrideBiomes", genClathropterisOverrideBiomes);
        prop.setComment("List of biomes Clathropteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genClathropterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Clathropteris", "dimClathropteris", dimClathropteris);
        prop.setComment("List of dimension IDs Clathropteris can generate in [default: 0]");
        dimClathropteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Clathropteris", "minheightClathropteris", minheightClathropteris);
        prop.setComment("Minimum height that Clathropteris can generate (1 to 250) [default: 1]");
        minheightClathropteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Clathropteris", "maxheightClathropteris", maxheightClathropteris);
        prop.setComment("Maximum height that Clathropteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightClathropteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Clathropteris", "multiplierClathropteris", multiplierClathropteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierClathropteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ischnophyton", "genIschnophyton", genIschnophyton);
        prop.setComment("Set to true to generate Ischnophyton naturally [default: false]");
        genIschnophyton = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ischnophyton", "genIschnophytonBlacklistBiomes", genIschnophytonBlacklistBiomes);
        prop.setComment("List of biomes Ischnophyton are blacklisted from, in the format: modid:biomeid [default: empty]");
        genIschnophytonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ischnophyton", "genIschnophytonOverrideBiomes", genIschnophytonOverrideBiomes);
        prop.setComment("List of biomes Ischnophyton are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genIschnophytonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Ischnophyton", "dimIschnophyton", dimIschnophyton);
        prop.setComment("List of dimension IDs Ischnophyton can generate in [default: 0]");
        dimIschnophyton = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ischnophyton", "minheightIschnophyton", minheightIschnophyton);
        prop.setComment("Minimum height that Ischnophyton can generate (1 to 250) [default: 1]");
        minheightIschnophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ischnophyton", "maxheightIschnophyton", maxheightIschnophyton);
        prop.setComment("Maximum height that Ischnophyton can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightIschnophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ischnophyton", "multiplierIschnophyton", multiplierIschnophyton);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierIschnophyton = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Petriellales", "genPetriellales", genPetriellales);
        prop.setComment("Set to true to generate Petriellales naturally [default: false]");
        genPetriellales = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Petriellales", "genPetriellalesBlacklistBiomes", genPetriellalesBlacklistBiomes);
        prop.setComment("List of biomes Petriellales are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPetriellalesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Petriellales", "genPetriellalesOverrideBiomes", genPetriellalesOverrideBiomes);
        prop.setComment("List of biomes Petriellales are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPetriellalesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Petriellales", "dimPetriellales", dimPetriellales);
        prop.setComment("List of dimension IDs Petriellales can generate in [default: 0]");
        dimPetriellales = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Petriellales", "minheightPetriellales", minheightPetriellales);
        prop.setComment("Minimum height that Petriellales can generate (1 to 250) [default: 1]");
        minheightPetriellales = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Petriellales", "maxheightPetriellales", maxheightPetriellales);
        prop.setComment("Maximum height that Petriellales can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPetriellales = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Petriellales", "multiplierPetriellales", multiplierPetriellales);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPetriellales = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sanmiguelia", "genSanmiguelia", genSanmiguelia);
        prop.setComment("Set to true to generateS anmiguelia naturally [default: false]");
        genSanmiguelia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sanmiguelia", "genSanmigueliaBlacklistBiomes", genSanmigueliaBlacklistBiomes);
        prop.setComment("List of biomes Sanmiguelia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSanmigueliaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sanmiguelia", "genSanmigueliaOverrideBiomes", genSanmigueliaOverrideBiomes);
        prop.setComment("List of biomes Sanmiguelia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSanmigueliaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Sanmiguelia", "dimSanmiguelia", dimSanmiguelia);
        prop.setComment("List of dimension IDs Sanmiguelia can generate in [default: 0]");
        dimSanmiguelia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sanmiguelia", "minheightSanmiguelia", minheightSanmiguelia);
        prop.setComment("Minimum height that Sanmiguelia can generate (1 to 250) [default: 1]");
        minheightSanmiguelia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sanmiguelia", "maxheightSanmiguelia", maxheightSanmiguelia);
        prop.setComment("Maximum height that Sanmiguelia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightSanmiguelia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sanmiguelia", "multiplierSanmiguelia", multiplierSanmiguelia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSanmiguelia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Coniopteris", "genConiopteris", genConiopteris);
        prop.setComment("Set to true to generate Coniopteris naturally [default: false]");
        genConiopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Coniopteris", "genConiopterisBlacklistBiomes", genConiopterisBlacklistBiomes);
        prop.setComment("List of biomes Coniopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genConiopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Coniopteris", "genConiopterisOverrideBiomes", genConiopterisOverrideBiomes);
        prop.setComment("List of biomes Coniopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genConiopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Coniopteris", "dimConiopteris", dimConiopteris);
        prop.setComment("List of dimension IDs Coniopteris can generate in [default: 0]");
        dimConiopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Coniopteris", "minheightConiopteris", minheightConiopteris);
        prop.setComment("Minimum height that Coniopteris can generate (1 to 250) [default: 1]");
        minheightConiopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Coniopteris", "maxheightConiopteris", maxheightConiopteris);
        prop.setComment("Maximum height that Coniopteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightConiopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Coniopteris", "multiplierConiopteris", multiplierConiopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierConiopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Xihuphyllum", "genXihuphyllum", genXihuphyllum);
        prop.setComment("Set to true to generate Xihuphyllum naturally [default: false]");
        genXihuphyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Xihuphyllum", "genXihuphyllumBlacklistBiomes", genXihuphyllumBlacklistBiomes);
        prop.setComment("List of biomes Xihuphyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genXihuphyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Xihuphyllum", "genXihuphyllumOverrideBiomes", genXihuphyllumOverrideBiomes);
        prop.setComment("List of biomes Xihuphyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genXihuphyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Xihuphyllum", "dimXihuphyllum", dimXihuphyllum);
        prop.setComment("List of dimension IDs Xihuphyllum can generate in [default: 0]");
        dimXihuphyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Xihuphyllum", "minheightXihuphyllum", minheightXihuphyllum);
        prop.setComment("Minimum height that Xihuphyllum can generate (1 to 250) [default: 1]");
        minheightXihuphyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Xihuphyllum", "maxheightXihuphyllum", maxheightXihuphyllum);
        prop.setComment("Maximum height that Xihuphyllum can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightXihuphyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Xihuphyllum", "multiplierXihuphyllum", multiplierXihuphyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierXihuphyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Macrotaeniopteris", "genMacrotaeniopteris", genMacrotaeniopteris);
        prop.setComment("Set to true to generate Macrotaeniopteris naturally [default: false]");
        genMacrotaeniopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macrotaeniopteris", "genMacrotaeniopterisBlacklistBiomes", genMacrotaeniopterisBlacklistBiomes);
        prop.setComment("List of biomes Macrotaeniopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genMacrotaeniopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macrotaeniopteris", "genMacrotaeniopterisOverrideBiomes", genMacrotaeniopterisOverrideBiomes);
        prop.setComment("List of biomes Macrotaeniopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genMacrotaeniopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Macrotaeniopteris", "dimMacrotaeniopteris", dimMacrotaeniopteris);
        prop.setComment("List of dimension IDs Macrotaeniopteris can generate in [default: 0]");
        dimMacrotaeniopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macrotaeniopteris", "minheightMacrotaeniopteris", minheightMacrotaeniopteris);
        prop.setComment("Minimum height that Macrotaeniopteris can generate (1 to 250) [default: 1]");
        minheightMacrotaeniopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macrotaeniopteris", "maxheightMacrotaeniopteris", maxheightMacrotaeniopteris);
        prop.setComment("Maximum height that Macrotaeniopteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightMacrotaeniopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Macrotaeniopteris", "multiplierMacrotaeniopteris", multiplierMacrotaeniopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierMacrotaeniopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Stiff Cycad", "genStiffCycad", genStiffCycad);
        prop.setComment("Set to true to generate Stiff Cycads naturally [default: false]");
        genStiffCycad = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGenStiff Cycad", "genStiffCycadBlacklistBiomes", genStiffCycadBlacklistBiomes);
        prop.setComment("List of biomes Stiff Cycads are blacklisted from, in the format: modid:biomeid [default: empty]");
        genStiffCycadBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stiff Cycad", "genStiffCycadOverrideBiomes", genStiffCycadOverrideBiomes);
        prop.setComment("List of biomes Stiff Cycads are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genStiffCycadOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Stiff Cycad", "dimStiffCycad", dimStiffCycad);
        prop.setComment("List of dimension IDs Stiff Cycads can generate in [default: 0]");
        dimStiffCycad = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stiff Cycad", "minheightStiffCycad", minheightStiffCycad);
        prop.setComment("Minimum height that Stiff Cycads can generate (1 to 250) [default: 1]");
        minheightStiffCycad = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stiff Cycad", "maxheightStiffCycad", maxheightStiffCycad);
        prop.setComment("Maximum height that Stiff Cycads can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightStiffCycad = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stiff Cycad", "multiplierStiffCycad", multiplierStiffCycad);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierStiffCycad = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Telemachus", "genTelemachus", genTelemachus);
        prop.setComment("Set to true to generate Telemachus trees naturally [default: false]");
        genTelemachus = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Telemachus", "genTelemachusBlacklistBiomes", genTelemachusBlacklistBiomes);
        prop.setComment("List of biomes Telemachus trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTelemachusBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Telemachus", "genTelemachusOverrideBiomes", genTelemachusOverrideBiomes);
        prop.setComment("List of biomes Telemachus trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genTelemachusOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Telemachus", "dimTelemachus", dimTelemachus);
        prop.setComment("List of dimension IDs Telemachus trees can generate in [default: 0]");
        dimTelemachus = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Telemachus", "minheightTelemachus", minheightTelemachus);
        prop.setComment("Minimum height that Telemachus trees can generate (1 to 250) [default: 1]");
        minheightTelemachus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Telemachus", "maxheightTelemachus", maxheightTelemachus);
        prop.setComment("Maximum height that Telemachus trees can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightTelemachus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Telemachus", "multiplierTelemachus", multiplierTelemachus);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTelemachus = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sphenobaiera", "genSphenobaiera", genSphenobaiera);
        prop.setComment("Set to true to generate Sphenobaiera trees naturally [default: false]");
        genSphenobaiera = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenobaiera", "genSphenobaieraBlacklistBiomes", genSphenobaieraBlacklistBiomes);
        prop.setComment("List of biomes Sphenobaiera trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSphenobaieraBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenobaiera", "genSphenobaieraOverrideBiomes", genSphenobaieraOverrideBiomes);
        prop.setComment("List of biomes Sphenobaiera trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSphenobaieraOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Sphenobaiera", "dimSphenobaiera", dimSphenobaiera);
        prop.setComment("List of dimension IDs Sphenobaiera trees can generate in [default: 0]");
        dimSphenobaiera = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenobaiera", "minheightSphenobaiera", minheightSphenobaiera);
        prop.setComment("Minimum height that Sphenobaiera trees can generate (1 to 250) [default: 1]");
        minheightSphenobaiera = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenobaiera", "maxheightSphenobaiera", maxheightSphenobaiera);
        prop.setComment("Maximum height that Sphenobaiera trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightSphenobaiera = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenobaiera", "multiplierSphenobaiera", multiplierSphenobaiera);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSphenobaiera = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Beech", "genBeech", genBeech);
        prop.setComment("Set to true to generate Beech trees naturally [default: false]");
        genBeech = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Beech", "genBeechBlacklistBiomes", genBeechBlacklistBiomes);
        prop.setComment("List of biomes Beech trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBeechBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Beech", "genBeechOverrideBiomes", genBeechOverrideBiomes);
        prop.setComment("List of biomes Beech trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBeechOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Beech", "dimBeech", dimBeech);
        prop.setComment("List of dimension IDs Beech trees can generate in [default: 0]");
        dimBeech = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Beech", "minheightBeech", minheightBeech);
        prop.setComment("Minimum height that Beech trees can generate (1 to 250) [default: 1]");
        minheightBeech = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Beech", "maxheightBeech", maxheightBeech);
        prop.setComment("Maximum height that Beech trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightBeech = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Beech", "multiplierBeech", multiplierBeech);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBeech = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Plane", "genPlane", genPlane);
        prop.setComment("Set to true to generate Plane trees naturally [default: false]");
        genPlane = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGenPlane", "genPlaneBlacklistBiomes", genPlaneBlacklistBiomes);
        prop.setComment("List of biomes Plane trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPlaneBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Plane", "genPlaneOverrideBiomes", genPlaneOverrideBiomes);
        prop.setComment("List of biomes Plane trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPlaneOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Plane", "dimPlane", dimPlane);
        prop.setComment("List of dimension IDs Plane trees can generate in [default: 0]");
        dimPlane = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Plane", "minheightPlane", minheightPlane);
        prop.setComment("Minimum height that Plane trees can generate (1 to 250) [default: 1]");
        minheightPlane = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Plane", "maxheightPlane", maxheightPlane);
        prop.setComment("Maximum height that Plane trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPlane = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Plane", "multiplierPlane", multiplierPlane);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPlane = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sycamore", "genSycamore", genSycamore);
        prop.setComment("Set to true to generate Sycamore trees naturally [default: false]");
        genSycamore = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sycamore", "genSycamoreBlacklistBiomes", genSycamoreBlacklistBiomes);
        prop.setComment("List of biomes Sycamore trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSycamoreBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sycamore", "genSycamoreOverrideBiomes", genSycamoreOverrideBiomes);
        prop.setComment("List of biomes Sycamore trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSycamoreOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Sycamore", "dimSycamore", dimSycamore);
        prop.setComment("List of dimension IDs Sycamore trees can generate in [default: 0]");
        dimSycamore = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sycamore", "minheightSycamore", minheightSycamore);
        prop.setComment("Minimum height that Sycamore trees can generate (1 to 250) [default: 1]");
        minheightSycamore = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sycamore", "maxheightSycamore", maxheightSycamore);
        prop.setComment("Maximum height that Sycamore trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightSycamore = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sycamore", "multiplierSycamore", multiplierSycamore);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSycamore = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Furcula", "genFurcula", genFurcula);
        prop.setComment("Set to true to generate Furcula trees naturally [default: false]");
        genFurcula = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Furcula", "genFurculaBlacklistBiomes", genFurculaBlacklistBiomes);
        prop.setComment("List of biomes Furcula trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genFurculaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Furcula", "genFurculaOverrideBiomes", genFurculaOverrideBiomes);
        prop.setComment("List of biomes Furcula trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genFurculaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Furcula", "dimFurcula", dimFurcula);
        prop.setComment("List of dimension IDs Furcula trees can generate in [default: 0]");
        dimFurcula = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Furcula", "minheightFurcula", minheightFurcula);
        prop.setComment("Minimum height that Furcula trees can generate (1 to 250) [default: 1]");
        minheightFurcula = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Furcula", "maxheightFurcula", maxheightFurcula);
        prop.setComment("Maximum height that Furcula trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightFurcula = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Furcula", "multiplierFurcula", multiplierFurcula);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierFurcula = prop.getDouble();
        propOrder.add(prop.getName());


        prop = cfg.get("WorldGen Scolecopteris", "genScolecopteris", genScolecopteris);
        prop.setComment("Set to true to generate Scolecopteris naturally [default: false]");
        genScolecopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scolecopteris", "genScolecopterisBlacklistBiomes", genScolecopterisBlacklistBiomes);
        prop.setComment("List of biomes Scolecopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genScolecopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scolecopteris", "genScolecopterisOverrideBiomes", genScolecopterisOverrideBiomes);
        prop.setComment("List of biomes Scolecopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genScolecopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Scolecopteris", "dimScolecopteris", dimScolecopteris);
        prop.setComment("List of dimension IDs Scolecopteris can generate in [default: 0]");
        dimScolecopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scolecopteris", "minheightScolecopteris", minheightScolecopteris);
        prop.setComment("Minimum height that Scolecopteris can generate (1 to 250) [default: 1]");
        minheightScolecopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scolecopteris", "maxheightScolecopteris", maxheightScolecopteris);
        prop.setComment("Maximum height that Scolecopteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightScolecopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scolecopteris", "multiplierScolecopteris", multiplierScolecopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierScolecopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Wachtleria", "genWachtleria", genWachtleria);
        prop.setComment("Set to true to generate Wachtleria naturally [default: false]");
        genWachtleria = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtleria", "genWachtleriaBlacklistBiomes", genWachtleriaBlacklistBiomes);
        prop.setComment("List of biomes Wachtleria are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWachtleriaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtleria", "genWachtleriaOverrideBiomes", genWachtleriaOverrideBiomes);
        prop.setComment("List of biomes Wachtleria are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genWachtleriaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Wachtleria", "dimWachtleria", dimWachtleria);
        prop.setComment("List of dimension IDs Wachtleria can generate in [default: 0]");
        dimWachtleria = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtleria", "minheightWachtleria", minheightWachtleria);
        prop.setComment("Minimum height that Wachtleria can generate (1 to 250) [default: 1]");
        minheightWachtleria = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtleria", "maxheightWachtleria", maxheightWachtleria);
        prop.setComment("Maximum height that Wachtleria can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightWachtleria = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtleria", "multiplierWachtleria", multiplierWachtleria);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierWachtleria = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Scytophyllum", "genScytophyllum", genScytophyllum);
        prop.setComment("Set to true to generate Scytophyllum naturally [default: false]");
        genScytophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scytophyllum", "genScytophyllumBlacklistBiomes", genScytophyllumBlacklistBiomes);
        prop.setComment("List of biomes Scytophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genScytophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scytophyllum", "genScytophyllumOverrideBiomes", genScytophyllumOverrideBiomes);
        prop.setComment("List of biomes Scytophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genScytophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Scytophyllum", "dimScytophyllum", dimScytophyllum);
        prop.setComment("List of dimension IDs Scytophyllum can generate in [default: 0]");
        dimScytophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scytophyllum", "minheightScytophyllum", minheightScytophyllum);
        prop.setComment("Minimum height that Scytophyllum can generate (1 to 250) [default: 1]");
        minheightScytophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scytophyllum", "maxheightScytophyllum", maxheightScytophyllum);
        prop.setComment("Maximum height that Scytophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightScytophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Scytophyllum", "multiplierScytophyllum", multiplierScytophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierScytophyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Aethophyllum", "genAethophyllum", genAethophyllum);
        prop.setComment("Set to true to generate Aethophyllum naturally [default: false]");
        genAethophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aethophyllum", "genAethophyllumBlacklistBiomes", genAethophyllumBlacklistBiomes);
        prop.setComment("List of biomes Aethophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAethophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aethophyllum", "genAethophyllumOverrideBiomes", genAethophyllumOverrideBiomes);
        prop.setComment("List of biomes Aethophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAethophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Aethophyllum", "dimAethophyllum", dimAethophyllum);
        prop.setComment("List of dimension IDs Aethophyllum can generate in [default: 0]");
        dimAethophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aethophyllum", "minheightAethophyllum", minheightAethophyllum);
        prop.setComment("Minimum height that Aethophyllum can generate (1 to 250) [default: 1]");
        minheightAethophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aethophyllum", "maxheightAethophyllum", maxheightAethophyllum);
        prop.setComment("Maximum height that Aethophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAethophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Aethophyllum", "multiplierAethophyllum", multiplierAethophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAethophyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Dicranophyllum", "genDicranophyllum", genDicranophyllum);
        prop.setComment("Set to true to generate Dicranophyllum naturally [default: false]");
        genDicranophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicranophyllum", "genDicranophyllumBlacklistBiomes", genDicranophyllumBlacklistBiomes);
        prop.setComment("List of biomes Dicranophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genDicranophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicranophyllum", "genDicranophyllumOverrideBiomes", genDicranophyllumOverrideBiomes);
        prop.setComment("List of biomes Dicranophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genDicranophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Dicranophyllum", "dimDicranophyllum", dimDicranophyllum);
        prop.setComment("List of dimension IDs Dicranophyllum can generate in [default: 0]");
        dimDicranophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicranophyllum", "minheightDicranophyllum", minheightDicranophyllum);
        prop.setComment("Minimum height that Dicranophyllum can generate (1 to 250) [default: 1]");
        minheightDicranophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicranophyllum", "maxheightDicranophyllum", maxheightDicranophyllum);
        prop.setComment("Maximum height that Dicranophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightDicranophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dicranophyllum", "multiplierDicranophyllum", multiplierDicranophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierDicranophyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Protolepidodendropsis", "genProtolepidodendropsis", genProtolepidodendropsis);
        prop.setComment("Set to true to generate Protolepidodendropsis naturally [default: false]");
        genProtolepidodendropsis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protolepidodendropsis", "genProtolepidodendropsisBlacklistBiomes", genProtolepidodendropsisBlacklistBiomes);
        prop.setComment("List of biomes Protolepidodendropsis are blacklisted from, in the format: modid:biomeid [default: empty]");
        genProtolepidodendropsisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protolepidodendropsis", "genProtolepidodendropsisOverrideBiomes", genProtolepidodendropsisOverrideBiomes);
        prop.setComment("List of biomes Protolepidodendropsis are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genProtolepidodendropsisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Protolepidodendropsis", "dimProtolepidodendropsis", dimProtolepidodendropsis);
        prop.setComment("List of dimension IDs Protolepidodendropsis can generate in [default: 0]");
        dimProtolepidodendropsis = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protolepidodendropsis", "minheightProtolepidodendropsis", minheightProtolepidodendropsis);
        prop.setComment("Minimum height that Protolepidodendropsis can generate (1 to 250) [default: 1]");
        minheightProtolepidodendropsis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protolepidodendropsis", "maxheightProtolepidodendropsis", maxheightProtolepidodendropsis);
        prop.setComment("Maximum height that Protolepidodendropsis can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightProtolepidodendropsis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Protolepidodendropsis", "multiplierProtolepidodendropsis", multiplierProtolepidodendropsis);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierProtolepidodendropsis = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Hymenaea", "genHymenaea", genHymenaea);
        prop.setComment("Set to true to generate Hymenaea trees naturally [default: false]");
        genHymenaea = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hymenaea", "genHymenaeaBlacklistBiomes", genHymenaeaBlacklistBiomes);
        prop.setComment("List of biomes Hymenaea trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genHymenaeaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hymenaea", "genHymenaeaOverrideBiomes", genHymenaeaOverrideBiomes);
        prop.setComment("List of biomes Hymenaea trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genHymenaeaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Hymenaea", "dimHymenaea", dimHymenaea);
        prop.setComment("List of dimension IDs Hymenaea trees can generate in [default: 0]");
        dimHymenaea = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hymenaea", "minheightHymenaea", minheightHymenaea);
        prop.setComment("Minimum height that Hymenaea trees can generate (1 to 250) [default: 1]");
        minheightHymenaea = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hymenaea", "maxheightHymenaea", maxheightHymenaea);
        prop.setComment("Maximum height that Hymenaea trees can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightHymenaea = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hymenaea", "multiplierHymenaea", multiplierHymenaea);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierHymenaea = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Araucaria mirabilis", "genAraucariaMirabilis", genAraucariaMirabilis);
        prop.setComment("Set to true to generate Ancient Araucaria trees naturally [default: false]");
        genAraucariaMirabilis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria mirabilis", "genAraucariaMirabilisBlacklistBiomes", genAraucariaMirabilisBlacklistBiomes);
        prop.setComment("List of biomes Ancient Araucaria trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAraucariaMirabilisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria mirabilis", "genAraucariaMirabilisOverrideBiomes", genAraucariaMirabilisOverrideBiomes);
        prop.setComment("List of biomes Ancient Araucaria trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAraucariaMirabilisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria mirabilis", "dimAraucariaMirabilis", dimAraucariaMirabilis);
        prop.setComment("List of dimension IDs Ancient Araucaria trees can generate in [default: 0]");
        dimAraucariaMirabilis = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria mirabilis", "minheightAraucariaMirabilis", minheightAraucariaMirabilis);
        prop.setComment("Minimum height that Ancient Araucaria trees can generate (1 to 250) [default: 1]");
        minheightAraucariaMirabilis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria mirabilis", "maxheightAraucariaMirabilis", maxheightAraucariaMirabilis);
        prop.setComment("Maximum height that Ancient Araucaria trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAraucariaMirabilis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Araucaria mirabilis", "multiplierAraucariaMirabilis", multiplierAraucariaMirabilis);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAraucariaMirabilis = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Nelumbo", "genNelumbo", genNelumbo);
        prop.setComment("Set to true to generate Nelumbo naturally [default: false]");
        genNelumbo = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nelumbo", "genNelumboBlacklistBiomes", genNelumboBlacklistBiomes);
        prop.setComment("List of biomes Nelumbo are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNelumboBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nelumbo", "genNelumboOverrideBiomes", genNelumboOverrideBiomes);
        prop.setComment("List of biomes Nelumbo are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNelumboOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nelumbo", "dimNelumbo", dimNelumbo);
        prop.setComment("List of dimension IDs Nelumbo can generate in [default: 0]");
        dimNelumbo = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nelumbo", "minheightNelumbo", minheightNelumbo);
        prop.setComment("Minimum height that Nelumbo can generate (1 to 250) [default: 1]");
        minheightNelumbo = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nelumbo", "maxheightNelumbo", maxheightNelumbo);
        prop.setComment("Maximum height that Nelumbo can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightNelumbo = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nelumbo", "multiplierNelumbo", multiplierNelumbo);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNelumbo = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Bolbitis", "genBolbitis", genBolbitis);
        prop.setComment("Set to true to generate Bolbitis naturally [default: false]");
        genBolbitis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bolbitis", "genBolbitisBlacklistBiomes", genBolbitisBlacklistBiomes);
        prop.setComment("List of biomes Bolbitis are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBolbitisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bolbitis", "genBolbitisOverrideBiomes", genBolbitisOverrideBiomes);
        prop.setComment("List of biomes Bolbitis are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBolbitisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bolbitis", "dimBolbitis", dimBolbitis);
        prop.setComment("List of dimension IDs Bolbitis can generate in [default: 0]");
        dimBolbitis = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bolbitis", "minheightBolbitis", minheightBolbitis);
        prop.setComment("Minimum height that Bolbitis can generate (1 to 250) [default: 1]");
        minheightBolbitis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bolbitis", "maxheightBolbitis", maxheightBolbitis);
        prop.setComment("Maximum height that Bolbitis can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightBolbitis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Bolbitis", "multiplierBolbitis", multiplierBolbitis);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBolbitis = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Alpia", "genAlpia", genAlpia);
        prop.setComment("Set to true to generate Alpia trees naturally [default: false]");
        genAlpia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alpia", "genAlpiaBlacklistBiomes", genAlpiaBlacklistBiomes);
        prop.setComment("List of biomes Alpia trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAlpiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alpia", "genAlpiaOverrideBiomes", genAlpiaOverrideBiomes);
        prop.setComment("List of biomes Alpia trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAlpiaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alpia", "dimAlpia", dimAlpia);
        prop.setComment("List of dimension IDs Alpia trees can generate in [default: 0]");
        dimAlpia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alpia", "minheightAlpia", minheightAlpia);
        prop.setComment("Minimum height that Alpia trees can generate (1 to 250) [default: 90]");
        minheightAlpia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alpia", "maxheightAlpia", maxheightAlpia);
        prop.setComment("Maximum height that Alpia trees can generate (1 to 250, or set to 0 for unlimited) [default: 130]");
        maxheightAlpia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alpia", "multiplierAlpia", multiplierAlpia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAlpia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Komlopteris", "genKomlopteris", genKomlopteris);
        prop.setComment("Set to true to generate Komlopteris trees naturally [default: false]");
        genKomlopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Komlopteris", "genKomlopterisBlacklistBiomes", genKomlopterisBlacklistBiomes);
        prop.setComment("List of biomes Komlopteris trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genKomlopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Komlopteris", "genKomlopterisOverrideBiomes", genKomlopterisOverrideBiomes);
        prop.setComment("List of biomes Komlopteris trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genKomlopterisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Komlopteris", "dimKomlopteris", dimKomlopteris);
        prop.setComment("List of dimension IDs Komlopteris trees can generate in [default: 0]");
        dimKomlopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Komlopteris", "minheightKomlopteris", minheightKomlopteris);
        prop.setComment("Minimum height that Komlopteris trees can generate (1 to 250) [default: 75]");
        minheightKomlopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Komlopteris", "maxheightKomlopteris", maxheightKomlopteris);
        prop.setComment("Maximum height that Komlopteris trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightKomlopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Komlopteris", "multiplierKomlopteris", multiplierKomlopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierKomlopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Medullosales", "genMedullosales", genMedullosales);
        prop.setComment("Set to true to generate Medullosales naturally [default: false]");
        genMedullosales = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Medullosales", "genMedullosalesBlacklistBiomes", genMedullosalesBlacklistBiomes);
        prop.setComment("List of biomes Medullosales are blacklisted from, in the format: modid:biomeid [default: empty]");
        genMedullosalesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Medullosales", "genMedullosalesOverrideBiomes", genMedullosalesOverrideBiomes);
        prop.setComment("List of biomes Medullosales are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genMedullosalesOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Medullosales", "dimMedullosales", dimMedullosales);
        prop.setComment("List of dimension IDs Medullosales can generate in [default: 0]");
        dimMedullosales = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Medullosales", "minheightMedullosales", minheightMedullosales);
        prop.setComment("Minimum height that Medullosales can generate (1 to 250) [default: 1]");
        minheightMedullosales = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Medullosales", "maxheightMedullosales", maxheightMedullosales);
        prop.setComment("Maximum height that Medullosales can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightMedullosales = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Medullosales", "multiplierMedullosales", multiplierMedullosales);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierMedullosales = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Baragwanathia", "genBaragwanathia", genBaragwanathia);
        prop.setComment("Set to true to generate Baragwanathia naturally [default: false]");
        genBaragwanathia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baragwanathia", "genBaragwanathiaBlacklistBiomes", genBaragwanathiaBlacklistBiomes);
        prop.setComment("List of biomes Baragwanathia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBaragwanathiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baragwanathia", "genBaragwanathiaOverrideBiomes", genBaragwanathiaOverrideBiomes);
        prop.setComment("List of biomes Baragwanathia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBaragwanathiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Baragwanathia", "dimBaragwanathia", dimBaragwanathia);
        prop.setComment("List of dimension IDs Baragwanathia can generate in [default: 0]");
        dimBaragwanathia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baragwanathia", "minheightBaragwanathia", minheightBaragwanathia);
        prop.setComment("Minimum height that Baragwanathia can generate (1 to 250) [default: 1]");
        minheightBaragwanathia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baragwanathia", "maxheightBaragwanathia", maxheightBaragwanathia);
        prop.setComment("Maximum height that Baragwanathia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightBaragwanathia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baragwanathia", "multiplierBaragwanathia", multiplierBaragwanathia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBaragwanathia = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Baragwanathia", "spreadBaragwanathia", spreadBaragwanathia);
        prop.setComment("Set to true for Baragwanathia to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadBaragwanathia = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Gigantopterid", "genGigantopterid", genGigantopterid);
        prop.setComment("Set to true to generate Gigantopterids naturally [default: false]");
        genGigantopterid = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Gigantopterid", "genGigantopteridBlacklistBiomes", genGigantopteridBlacklistBiomes);
        prop.setComment("List of biomes Gigantopterids are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGigantopteridBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Gigantopterid", "genGigantopteridOverrideBiomes", genGigantopteridOverrideBiomes);
        prop.setComment("List of biomes Gigantopterids are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genGigantopteridOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Gigantopterid", "dimGigantopterid", dimGigantopterid);
        prop.setComment("List of dimension IDs Gigantopterids can generate in [default: 0]");
        dimGigantopterid = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Gigantopterid", "minheightGigantopterid", minheightGigantopterid);
        prop.setComment("Minimum height that Gigantopterids can generate (1 to 250) [default: 1]");
        minheightGigantopterid = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Gigantopterid", "maxheightGigantopterid", maxheightGigantopterid);
        prop.setComment("Minimum height that Gigantopterids can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightGigantopterid = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Gigantopterid", "multiplierGigantopterid", multiplierGigantopterid);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierGigantopterid = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Emplectopteris", "genEmplectopteris", genEmplectopteris);
        prop.setComment("Set to true to generate Emplectopteris naturally [default: false]");
        genEmplectopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Emplectopteris", "genEmplectopterisBlacklistBiomes", genEmplectopterisBlacklistBiomes);
        prop.setComment("List of biomes Emplectopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genEmplectopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Emplectopteris", "genEmplectopterisOverrideBiomes", genEmplectopterisOverrideBiomes);
        prop.setComment("List of biomes Emplectopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genEmplectopterisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Emplectopteris", "dimEmplectopteris", dimEmplectopteris);
        prop.setComment("List of dimension IDs Emplectopteris can generate in [default: 0]");
        dimEmplectopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Emplectopteris", "minheightEmplectopteris", minheightEmplectopteris);
        prop.setComment("Minimum height that Emplectopteris can generate (1 to 250) [default: 1]");
        minheightEmplectopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Emplectopteris", "maxheightEmplectopteris", maxheightEmplectopteris);
        prop.setComment("Minimum height that Emplectopteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightEmplectopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Emplectopteris", "multiplierEmplectopteris", multiplierEmplectopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierEmplectopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Primaeval Pine", "genBristlecone", genBristlecone);
        prop.setComment("Set to true to generate Primaeval Pines naturally [default: false]");
        genBristlecone = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Pine", "genBristleconeBlacklistBiomes", genBristleconeBlacklistBiomes);
        prop.setComment("List of biomes Primaeval Pines are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBristleconeBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Pine", "genBristleconeOverrideBiomes", genBristleconeOverrideBiomes);
        prop.setComment("List of biomes Primaeval Pines are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBristleconeOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Pine", "dimBristlecone", dimBristlecone);
        prop.setComment("List of dimension IDs Primaeval Pines can generate in [default: 0]");
        dimBristlecone = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Pine", "minheightBristlecone", minheightBristlecone);
        prop.setComment("Minimum height that Primaeval Pines can generate (1 to 250) [default: 120]");
        minheightBristlecone = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Pine", "maxheightBristlecone", maxheightBristlecone);
        prop.setComment("Minimum height that Primaeval Pines can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightBristlecone = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Pine", "multiplierBristlecone", multiplierBristlecone);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBristlecone = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ortiseia", "genOrtiseia", genOrtiseia);
        prop.setComment("Set to true to generate Ortiseia naturally [default: false]");
        genOrtiseia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ortiseia", "genOrtiseiaBlacklistBiomes", genOrtiseiaBlacklistBiomes);
        prop.setComment("List of biomes Ortiseia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genOrtiseiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ortiseia", "genOrtiseiaOverrideBiomes", genOrtiseiaOverrideBiomes);
        prop.setComment("List of biomes Ortiseia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genOrtiseiaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ortiseia", "dimOrtiseia", dimOrtiseia);
        prop.setComment("List of dimension IDs Ortiseia can generate in [default: 0]");
        dimOrtiseia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ortiseia", "minheightOrtiseia", minheightOrtiseia);
        prop.setComment("Minimum height that Ortiseia can generate (1 to 250) [default: 110]");
        minheightOrtiseia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ortiseia", "maxheightOrtiseia", maxheightOrtiseia);
        prop.setComment("Minimum height that Ortiseias can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightOrtiseia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ortiseia", "multiplierOrtiseia", multiplierOrtiseia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierOrtiseia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Hironoia", "genHironoia", genHironoia);
        prop.setComment("Set to true to generate Hironoia naturally [default: false]");
        genHironoia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hironoia", "genHironoiaBlacklistBiomes", genHironoiaBlacklistBiomes);
        prop.setComment("List of biomes Hironoia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genHironoiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hironoia", "genHironoiaOverrideBiomes", genHironoiaOverrideBiomes);
        prop.setComment("List of biomes Hironoia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genHironoiaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hironoia", "dimHironoia", dimHironoia);
        prop.setComment("List of dimension IDs Hironoia can generate in [default: 0]");
        dimHironoia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hironoia", "minheightHironoia", minheightHironoia);
        prop.setComment("Minimum height that Hironoia can generate (1 to 250) [default: 1]");
        minheightHironoia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hironoia", "maxheightHironoia", maxheightHironoia);
        prop.setComment("Minimum height that Hironoia can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightHironoia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Hironoia", "multiplierHironoia", multiplierHironoia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierHironoia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Matonia", "genMatonia", genMatonia);
        prop.setComment("Set to true to generate Matonia naturally [default: false]");
        genMatonia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Matonia", "genMatoniaBlacklistBiomes", genMatoniaBlacklistBiomes);
        prop.setComment("List of biomes Matonia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genMatoniaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Matonia", "genMatoniaOverrideBiomes", genMatoniaOverrideBiomes);
        prop.setComment("List of biomes Matonia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genMatoniaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Matonia", "dimMatonia", dimMatonia);
        prop.setComment("List of dimension IDs Matonia can generate in [default: 0]");
        dimMatonia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Matonia", "minheightMatonia", minheightMatonia);
        prop.setComment("Minimum height that Matonia can generate (1 to 250) [default: 1]");
        minheightMatonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Matonia", "maxheightMatonia", maxheightMatonia);
        prop.setComment("Minimum height that Matonia can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightMatonia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Matonia", "multiplierMatonia", multiplierMatonia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierMatonia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Archaeopteris", "genArchaeopteris", genArchaeopteris);
        prop.setComment("Set to true to generate Archaeopteris trees naturally [default: false]");
        genArchaeopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaeopteris", "genArchaeopterisBlacklistBiomes", genArchaeopterisBlacklistBiomes);
        prop.setComment("List of biomes Archaeopteris trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genArchaeopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaeopteris", "genArchaeopterisOverrideBiomes", genArchaeopterisOverrideBiomes);
        prop.setComment("List of biomes Archaeopteris trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genArchaeopterisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaeopteris", "dimArchaeopteris", dimArchaeopteris);
        prop.setComment("List of dimension IDs Archaeopteris trees can generate in [default: 0]");
        dimArchaeopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaeopteris", "minheightArchaeopteris", minheightArchaeopteris);
        prop.setComment("Minimum height that Archaeopteris trees can generate (1 to 250) [default: 1]");
        minheightArchaeopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaeopteris", "maxheightArchaeopteris", maxheightArchaeopteris);
        prop.setComment("Minimum height that Archaeopteris trees can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightArchaeopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaeopteris", "multiplierArchaeopteris", multiplierArchaeopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierArchaeopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Dollyphyton", "genDollyphyton", genDollyphyton);
        prop.setComment("Set to true to generate Dollyphyton naturally [default: false]");
        genDollyphyton = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dollyphyton", "genDollyphytonBlacklistBiomes", genDollyphytonBlacklistBiomes);
        prop.setComment("List of biomes Dollyphyton is blacklisted from, in the format: modid:biomeid [default: empty]");
        genDollyphytonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dollyphyton", "genDollyphytonOverrideBiomes", genDollyphytonOverrideBiomes);
        prop.setComment("List of biomes Dollyphyton is forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genDollyphytonOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dollyphyton", "dimDollyphyton", dimDollyphyton);
        prop.setComment("List of dimension IDs Dollyphyton can generate in [default: 0]");
        dimDollyphyton = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dollyphyton", "minheightDollyphyton", minheightDollyphyton);
        prop.setComment("Minimum height that Dollyphyton can generate (1 to 250) [default: 1]");
        minheightDollyphyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dollyphyton", "maxheightDollyphyton", maxheightDollyphyton);
        prop.setComment("Minimum height that Dollyphyton can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightDollyphyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dollyphyton", "multiplierDollyphyton", multiplierDollyphyton);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierDollyphyton = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dollyphyton", "radiusDollyphyton", radiusDollyphyton);
        prop.setComment("Radius Dollyphyton can spread (0 to 8) [default: 3]");
        radiusDollyphyton = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Nematophyta", "genNematophyta", genNematophyta);
        prop.setComment("Set to true to generate Nematophyta naturally [default: false]");
        genNematophyta = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nematophyta", "genNematophytaBlacklistBiomes", genNematophytaBlacklistBiomes);
        prop.setComment("List of biomes Nematophyta is blacklisted from, in the format: modid:biomeid [default: empty]");
        genNematophytaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nematophyta", "genNematophytaOverrideBiomes", genNematophytaOverrideBiomes);
        prop.setComment("List of biomes Nematophyta is forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNematophytaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nematophyta", "dimNematophyta", dimNematophyta);
        prop.setComment("List of dimension IDs Nematophyta can generate in [default: 0]");
        dimNematophyta = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nematophyta", "minheightNematophyta", minheightNematophyta);
        prop.setComment("Minimum height that Nematophyta can generate (1 to 250) [default: 1]");
        minheightNematophyta = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nematophyta", "maxheightNematophyta", maxheightNematophyta);
        prop.setComment("Minimum height that Nematophyta can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightNematophyta = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nematophyta", "multiplierNematophyta", multiplierNematophyta);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNematophyta = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nematophyta", "radiusNematophyta", radiusNematophyta);
        prop.setComment("Radius Nematophyta can spread (0 to 8) [default: 2]");
        radiusNematophyta = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Osmunda", "genOsmunda", genOsmunda);
        prop.setComment("Set to true to generate Osmunda naturally [default: false]");
        genOsmunda = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Osmunda", "genOsmundaBlacklistBiomes", genOsmundaBlacklistBiomes);
        prop.setComment("List of biomes Osmunda are blacklisted from, in the format: modid:biomeid [default: empty]");
        genOsmundaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Osmunda", "genOsmundaOverrideBiomes", genOsmundaOverrideBiomes);
        prop.setComment("List of biomes Osmunda are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genOsmundaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Osmunda", "dimOsmunda", dimOsmunda);
        prop.setComment("List of dimension IDs Osmunda can generate in [default: 0]");
        dimOsmunda = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Osmunda", "minheightOsmunda", minheightOsmunda);
        prop.setComment("Minimum height that Osmunda can generate (1 to 250) [default: 1]");
        minheightOsmunda = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Osmunda", "maxheightOsmunda", maxheightOsmunda);
        prop.setComment("Maximum height that Osmunda can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightOsmunda = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Osmunda", "multiplierOsmunda", multiplierOsmunda);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierOsmunda = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Stauropteris", "genStauropteris", genStauropteris);
        prop.setComment("Set to true to generate Stauropteris naturally [default: false]");
        genStauropteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stauropteris", "genStauropterisBlacklistBiomes", genStauropterisBlacklistBiomes);
        prop.setComment("List of biomes Stauropteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genStauropterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stauropteris", "genStauropterisOverrideBiomes", genStauropterisOverrideBiomes);
        prop.setComment("List of biomes Stauropteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genStauropterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Stauropteris", "dimStauropteris", dimStauropteris);
        prop.setComment("List of dimension IDs Stauropteris can generate in [default: 0]");
        dimStauropteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stauropteris", "minheightStauropteris", minheightStauropteris);
        prop.setComment("Minimum height that Stauropteris can generate (1 to 250) [default: 1]");
        minheightStauropteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stauropteris", "maxheightStauropteris", maxheightStauropteris);
        prop.setComment("Maximum height that Stauropteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightStauropteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Stauropteris", "multiplierStauropteris", multiplierStauropteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierStauropteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Skaaripteris", "genSkaaripteris", genSkaaripteris);
        prop.setComment("Set to true to generate Skaaripteris naturally [default: false]");
        genSkaaripteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Skaaripteris", "genSkaaripterisBlacklistBiomes", genSkaaripterisBlacklistBiomes);
        prop.setComment("List of biomes Skaaripteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSkaaripterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Skaaripteris", "genSkaaripterisOverrideBiomes", genSkaaripterisOverrideBiomes);
        prop.setComment("List of biomes Skaaripteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSkaaripterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Skaaripteris", "dimSkaaripteris", dimSkaaripteris);
        prop.setComment("List of dimension IDs Skaaripteris can generate in [default: 0]");
        dimSkaaripteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Skaaripteris", "minheightSkaaripteris", minheightSkaaripteris);
        prop.setComment("Minimum height that Skaaripteris can generate (1 to 250) [default: 1]");
        minheightSkaaripteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Skaaripteris", "maxheightSkaaripteris", maxheightSkaaripteris);
        prop.setComment("Maximum height that Skaaripteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightSkaaripteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Skaaripteris", "multiplierSkaaripteris", multiplierSkaaripteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSkaaripteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Neuropteridium", "genNeuropteridium", genNeuropteridium);
        prop.setComment("Set to true to generate Neuropteridium naturally [default: false]");
        genNeuropteridium = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neuropteridium", "genNeuropteridiumBlacklistBiomes", genNeuropteridiumBlacklistBiomes);
        prop.setComment("List of biomes Neuropteridium are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNeuropteridiumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neuropteridium", "genNeuropteridiumOverrideBiomes", genNeuropteridiumOverrideBiomes);
        prop.setComment("List of biomes Neuropteridium are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNeuropteridiumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Neuropteridium", "dimNeuropteridium", dimNeuropteridium);
        prop.setComment("List of dimension IDs Neuropteridium can generate in [default: 0]");
        dimNeuropteridium = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neuropteridium", "minheightNeuropteridium", minheightNeuropteridium);
        prop.setComment("Minimum height that Neuropteridium can generate (1 to 250) [default: 1]");
        minheightNeuropteridium = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neuropteridium", "maxheightNeuropteridium", maxheightNeuropteridium);
        prop.setComment("Maximum height that Neuropteridium can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightNeuropteridium = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neuropteridium", "multiplierNeuropteridium", multiplierNeuropteridium);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNeuropteridium = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Nilssoniocladus", "genNilssoniocladusRedwood", genNilssoniocladusRedwood);
        prop.setComment("Set to true to generate Nilssoniocladus naturally on Redwood trees [default: false]");
        genNilssoniocladusRedwood = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniocladus", "genNilssoniocladusAgathis", genNilssoniocladusAgathis);
        prop.setComment("Set to true to generate Nilssoniocladus naturally on Agathis trees [default: false]");
        genNilssoniocladusAgathis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniocladus", "genNilssoniocladusPararaucaria", genNilssoniocladusPararaucaria);
        prop.setComment("Set to true to generate Nilssoniocladus naturally on Pararaucaria trees [default: false]");
        genNilssoniocladusPararaucaria = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniocladus", "genNilssoniocladusAraucariaAraucana", genNilssoniocladusAraucariaAraucana);
        prop.setComment("Set to true to generate Nilssoniocladus naturally on Monkey Puzzle Araucaria trees [default: false]");
        genNilssoniocladusAraucariaAraucana = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniocladus", "genNilssoniocladusMirabilis", genNilssoniocladusMirabilis);
        prop.setComment("Set to true to generate Nilssoniocladus naturally on Ancient Araucaria trees [default: false]");
        genNilssoniocladusMirabilis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniocladus", "genNilssoniocladusBlacklistBiomes", genNilssoniocladusBlacklistBiomes);
        prop.setComment("List of biomes Nilssoniocladus are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNilssoniocladusBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nilssoniocladus", "genNilssoniocladusOverrideBiomes", genNilssoniocladusOverrideBiomes);
        prop.setComment("List of biomes Nilssoniocladus are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNilssoniocladusOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Nilssoniocladus", "dimNilssoniocladus", dimNilssoniocladus);
        prop.setComment("List of dimension IDs Nilssoniocladus can generate in [default: 0]");
        dimNilssoniocladus = prop.getIntList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Palaeognetaleana", "genPalaeognetaleanaGangamopteris", genPalaeognetaleanaGangamopteris);
        prop.setComment("Set to true to generate Palaeognetaleana naturally on Gangamopteris trees [default: false]");
        genPalaeognetaleanaGangamopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Palaeognetaleana", "genPalaeognetaleanaGlossopteris", genPalaeognetaleanaGlossopteris);
        prop.setComment("Set to true to generate Palaeognetaleana naturally on Glossopteris trees [default: false]");
        genPalaeognetaleanaGlossopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Palaeognetaleana", "genPalaeognetaleanaBlacklistBiomes", genPalaeognetaleanaBlacklistBiomes);
        prop.setComment("List of biomes Palaeognetaleana are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPalaeognetaleanaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Palaeognetaleana", "genPalaeognetaleanaOverrideBiomes", genPalaeognetaleanaOverrideBiomes);
        prop.setComment("List of biomes Palaeognetaleana are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPalaeognetaleanaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Palaeognetaleana", "dimPalaeognetaleana", dimPalaeognetaleana);
        prop.setComment("List of dimension IDs Palaeognetaleana can generate in [default: 0]");
        dimPalaeognetaleana = prop.getIntList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Lygodium", "genLygodiumMonkeypuzzle", genLygodiumMonkeypuzzle);
        prop.setComment("Set to true to generate Lygodium naturally on Monkey Puzzle trees [default: false]");
        genLygodiumMonkeypuzzle = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lygodium", "genLygodiumBlacklistBiomes", genLygodiumBlacklistBiomes);
        prop.setComment("List of biomes Lygodium are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLygodiumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lygodium", "genLygodiumOverrideBiomes", genLygodiumOverrideBiomes);
        prop.setComment("List of biomes Lygodium are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genLygodiumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Lygodium", "dimLygodium", dimLygodium);
        prop.setComment("List of dimension IDs Lygodium can generate in [default: 0]");
        dimLygodium = prop.getIntList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Cinnamon Fern", "genCinnamonFern", genCinnamonFern);
        prop.setComment("Set to true to generate Cinnamon Ferns naturally [default: false]");
        genCinnamonFern = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cinnamon Fern", "genCinnamonFernBlacklistBiomes", genCinnamonFernBlacklistBiomes);
        prop.setComment("List of biomes Cinnamon Ferns are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCinnamonFernBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cinnamon Fern", "genCinnamonFernOverrideBiomes", genCinnamonFernOverrideBiomes);
        prop.setComment("List of biomes Cinnamon Ferns are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCinnamonFernOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Cinnamon Fern", "dimCinnamonFern", dimCinnamonFern);
        prop.setComment("List of dimension IDs Cinnamon Ferns can generate in [default: 0]");
        dimCinnamonFern = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cinnamon Fern", "minheightCinnamonFern", minheightCinnamonFern);
        prop.setComment("Minimum height that Cinnamon Ferns can generate (1 to 250) [default: 1]");
        minheightCinnamonFern = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cinnamon Fern", "maxheightCinnamonFern", maxheightCinnamonFern);
        prop.setComment("Maximum height that Cinnamon Ferns can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightCinnamonFern = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cinnamon Fern", "multiplierCinnamonFern", multiplierCinnamonFern);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCinnamonFern = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Dawn Redwood", "genDawnRedwood", genDawnRedwood);
        prop.setComment("Set to true to generate Dawn Redwood Trees naturally [default: false]");
        genDawnRedwood = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dawn Redwood", "genDawnRedwoodBlacklistBiomes", genDawnRedwoodBlacklistBiomes);
        prop.setComment("List of biomes Dawn Redwood trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genDawnRedwoodBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dawn Redwood", "genDawnRedwoodOverrideBiomes", genDawnRedwoodOverrideBiomes);
        prop.setComment("List of biomes Dawn Redwood trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genDawnRedwoodOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Dawn Redwood", "dimDawnRedwood", dimDawnRedwood);
        prop.setComment("List of dimension IDs Dawn Redwood trees can generate in [default: 0]");
        dimDawnRedwood = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dawn Redwood", "minheightDawnRedwood", minheightDawnRedwood);
        prop.setComment("Minimum height that Dawn Redwood trees can generate (1 to 250) [default: 1]");
        minheightDawnRedwood = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dawn Redwood", "maxheightDawnRedwood", maxheightDawnRedwood);
        prop.setComment("Maximum height that Dawn Redwood trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightDawnRedwood = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Dawn Redwood", "multiplierDawnRedwood", multiplierDawnRedwood);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierDawnRedwood = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Cyclodendron", "genCyclodendron", genCyclodendron);
        prop.setComment("Set to true to generate Cyclodendron naturally [default: false]");
        genCyclodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cyclodendron", "genCyclodendronBlacklistBiomes", genCyclodendronBlacklistBiomes);
        prop.setComment("List of biomes Cyclodendron are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCyclodendronBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cyclodendron", "genCyclodendronOverrideBiomes", genCyclodendronOverrideBiomes);
        prop.setComment("List of biomes Cyclodendron are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCyclodendronOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Cyclodendron", "dimCyclodendron", dimCyclodendron);
        prop.setComment("List of dimension IDs Cyclodendron can generate in [default: 0]");
        dimCyclodendron = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cyclodendron", "minheightCyclodendron", minheightCyclodendron);
        prop.setComment("Minimum height that Cyclodendron can generate (1 to 250) [default: 1]");
        minheightCyclodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cyclodendron", "maxheightCyclodendron", maxheightCyclodendron);
        prop.setComment("Maximum height that Cyclodendron can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightCyclodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cyclodendron", "multiplierCyclodendron", multiplierCyclodendron);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCyclodendron = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Surangephyllum", "genSurangephyllum", genSurangephyllum);
        prop.setComment("Set to true to generate Surangephyllum naturally [default: false]");
        genSurangephyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Surangephyllum", "genSurangephyllumBlacklistBiomes", genSurangephyllumBlacklistBiomes);
        prop.setComment("List of biomes Surangephyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSurangephyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Surangephyllum", "genSurangephyllumOverrideBiomes", genSurangephyllumOverrideBiomes);
        prop.setComment("List of biomes Surangephyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSurangephyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Surangephyllum", "dimSurangephyllum", dimSurangephyllum);
        prop.setComment("List of dimension IDs Surangephyllum can generate in [default: 0]");
        dimSurangephyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Surangephyllum", "minheightSurangephyllum", minheightSurangephyllum);
        prop.setComment("Minimum height that Surangephyllum can generate (1 to 250) [default: 1]");
        minheightSurangephyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Surangephyllum", "maxheightSurangephyllum", maxheightSurangephyllum);
        prop.setComment("Maximum height that Surangephyllum can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightSurangephyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Surangephyllum", "multiplierSurangephyllum", multiplierSurangephyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSurangephyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Paurodendron", "genPaurodendron", genPaurodendron);
        prop.setComment("Set to true to generate Paurodendron naturally [default: false]");
        genPaurodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Paurodendron", "genPaurodendronBlacklistBiomes", genPaurodendronBlacklistBiomes);
        prop.setComment("List of biomes Paurodendron are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPaurodendronBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Paurodendron", "genPaurodendronOverrideBiomes", genPaurodendronOverrideBiomes);
        prop.setComment("List of biomes Paurodendron are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPaurodendronOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Paurodendron", "dimPaurodendron", dimPaurodendron);
        prop.setComment("List of dimension IDs Paurodendron can generate in [default: 0]");
        dimPaurodendron = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Paurodendron", "minheightPaurodendron", minheightPaurodendron);
        prop.setComment("Minimum height that Paurodendron can generate (1 to 250) [default: 1]");
        minheightPaurodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Paurodendron", "maxheightPaurodendron", maxheightPaurodendron);
        prop.setComment("Maximum height that Paurodendron can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightPaurodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Paurodendron", "multiplierPaurodendron", multiplierPaurodendron);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPaurodendron = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Brasilodendron", "genBrasilodendron", genBrasilodendron);
        prop.setComment("Set to true to generate Brasilodendron naturally [default: false]");
        genBrasilodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brasilodendron", "genBrasilodendronBlacklistBiomes", genBrasilodendronBlacklistBiomes);
        prop.setComment("List of biomes Brasilodendron are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBrasilodendronBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brasilodendron", "genBrasilodendronOverrideBiomes", genBrasilodendronOverrideBiomes);
        prop.setComment("List of biomes Brasilodendron are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBrasilodendronOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Brasilodendron", "dimBrasilodendron", dimBrasilodendron);
        prop.setComment("List of dimension IDs Brasilodendron can generate in [default: 0]");
        dimBrasilodendron = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brasilodendron", "minheightBrasilodendron", minheightBrasilodendron);
        prop.setComment("Minimum height that Brasilodendron can generate (1 to 250) [default: 1]");
        minheightBrasilodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brasilodendron", "maxheightBrasilodendron", maxheightBrasilodendron);
        prop.setComment("Maximum height that Brasilodendron can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightBrasilodendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brasilodendron", "multiplierBrasilodendron", multiplierBrasilodendron);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBrasilodendron = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Belemnopteris", "genBelemnopteris", genBelemnopteris);
        prop.setComment("Set to true to generate Belemnopteris naturally [default: false]");
        genBelemnopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Belemnopteris", "genBelemnopterisBlacklistBiomes", genBelemnopterisBlacklistBiomes);
        prop.setComment("List of biomes Belemnopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBelemnopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Belemnopteris", "genBelemnopterisOverrideBiomes", genBelemnopterisOverrideBiomes);
        prop.setComment("List of biomes Belemnopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBelemnopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Belemnopteris", "dimBelemnopteris", dimBelemnopteris);
        prop.setComment("List of dimension IDs Belemnopteris can generate in [default: 0]");
        dimBelemnopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Belemnopteris", "minheightBelemnopteris", minheightBelemnopteris);
        prop.setComment("Minimum height that Belemnopteris can generate (1 to 250) [default: 1]");
        minheightBelemnopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Belemnopteris", "maxheightBelemnopteris", maxheightBelemnopteris);
        prop.setComment("Maximum height that Belemnopteris can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightBelemnopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Belemnopteris", "multiplierBelemnopteris", multiplierBelemnopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBelemnopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Alethopteris", "genAlethopteris", genAlethopteris);
        prop.setComment("Set to true to generate Alethopteris trees naturally [default: false]");
        genAlethopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alethopteris", "genAlethopterisBlacklistBiomes", genAlethopterisBlacklistBiomes);
        prop.setComment("List of biomes Alethopteris trees  are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAlethopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alethopteris", "genAlethopterisOverrideBiomes", genAlethopterisOverrideBiomes);
        prop.setComment("List of biomes Alethopteris trees  are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAlethopterisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alethopteris", "dimAlethopteris", dimAlethopteris);
        prop.setComment("List of dimension IDs Alethopteris trees  can generate in [default: 0]");
        dimAlethopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alethopteris", "minheightAlethopteris", minheightAlethopteris);
        prop.setComment("Minimum height that Alethopteris trees  can generate (1 to 250) [default: 1]");
        minheightAlethopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alethopteris", "maxheightAlethopteris", maxheightAlethopteris);
        prop.setComment("Maximum height that Alethopteris trees  can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAlethopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Alethopteris", "multiplierAlethopteris", multiplierAlethopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAlethopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ephedra", "genEphedra", genEphedra);
        prop.setComment("Set to true to generate Ephedra naturally [default: false]");
        genEphedra = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ephedra", "genEphedraBlacklistBiomes", genEphedraBlacklistBiomes);
        prop.setComment("List of biomes Ephedra are blacklisted from, in the format: modid:biomeid [default: empty]");
        genEphedraBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ephedra", "genEphedraOverrideBiomes", genEphedraOverrideBiomes);
        prop.setComment("List of biomes Ephedra are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genEphedraOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ephedra", "dimEphedra", dimEphedra);
        prop.setComment("List of dimension IDs Ephedra can generate in [default: 0]");
        dimEphedra = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ephedra", "minheightEphedra", minheightEphedra);
        prop.setComment("Minimum height that Ephedra can generate (1 to 250) [default: 1]");
        minheightEphedra = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ephedra", "maxheightEphedra", maxheightEphedra);
        prop.setComment("Maximum height that Ephedra can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightEphedra = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ephedra", "multiplierEphedra", multiplierEphedra);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierEphedra = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Guangdedendron", "genGuangdedendron", genGuangdedendron);
        prop.setComment("Set to true to generate Guangdedendron naturally [default: false]");
        genGuangdedendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Guangdedendron", "genGuangdedendronBlacklistBiomes", genGuangdedendronBlacklistBiomes);
        prop.setComment("List of biomes Guangdedendron are blacklisted from, in the format: modid:biomeid [default: empty]");
        genGuangdedendronBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Guangdedendron", "genGuangdedendronOverrideBiomes", genGuangdedendronOverrideBiomes);
        prop.setComment("List of biomes Guangdedendron are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genGuangdedendronOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Guangdedendron", "dimGuangdedendron", dimGuangdedendron);
        prop.setComment("List of dimension IDs Guangdedendron can generate in [default: 0]");
        dimGuangdedendron = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Guangdedendron", "minheightGuangdedendron", minheightGuangdedendron);
        prop.setComment("Minimum height that Guangdedendron can generate (1 to 250) [default: 1]");
        minheightGuangdedendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Guangdedendron", "maxheightGuangdedendron", maxheightGuangdedendron);
        prop.setComment("Maximum height that Guangdedendron can generate (1 to 250, or set to 0 for unlimited) [default: 80]");
        maxheightGuangdedendron = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Guangdedendron", "multiplierGuangdedendron", multiplierGuangdedendron);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierGuangdedendron = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Marattia", "genMarattia", genMarattia);
        prop.setComment("Set to true to generate Marattia naturally [default: false]");
        genMarattia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Marattia", "genMarattiaBlacklistBiomes", genMarattiaBlacklistBiomes);
        prop.setComment("List of biomes Marattia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genMarattiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Marattia", "genMarattiaOverrideBiomes", genMarattiaOverrideBiomes);
        prop.setComment("List of biomes Marattia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genMarattiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Marattia", "dimMarattia", dimMarattia);
        prop.setComment("List of dimension IDs Marattia can generate in [default: 0]");
        dimMarattia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Marattia", "minheightMarattia", minheightMarattia);
        prop.setComment("Minimum height that Marattia can generate (1 to 250) [default: 1]");
        minheightMarattia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Marattia", "maxheightMarattia", maxheightMarattia);
        prop.setComment("Maximum height that Marattia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightMarattia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Marattia", "multiplierMarattia", multiplierMarattia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierMarattia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Edwardsiphyton", "genEdwardsiphyton", genEdwardsiphyton);
        prop.setComment("Set to true to generate Edwardsiphyton naturally [default: false]");
        genEdwardsiphyton = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Edwardsiphyton", "genEdwardsiphytonBlacklistBiomes", genEdwardsiphytonBlacklistBiomes);
        prop.setComment("List of biomes Edwardsiphyton is blacklisted from, in the format: modid:biomeid [default: empty]");
        genEdwardsiphytonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Edwardsiphyton", "genEdwardsiphytonOverrideBiomes", genEdwardsiphytonOverrideBiomes);
        prop.setComment("List of biomes Edwardsiphyton is forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genEdwardsiphytonOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Edwardsiphyton", "dimEdwardsiphyton", dimEdwardsiphyton);
        prop.setComment("List of dimension IDs Edwardsiphyton can generate in [default: 0]");
        dimEdwardsiphyton = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Edwardsiphyton", "minheightEdwardsiphyton", minheightEdwardsiphyton);
        prop.setComment("Minimum height that Edwardsiphyton can generate (1 to 250) [default: 1]");
        minheightEdwardsiphyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Edwardsiphyton", "maxheightEdwardsiphyton", maxheightEdwardsiphyton);
        prop.setComment("Minimum height that Edwardsiphyton can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightEdwardsiphyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Edwardsiphyton", "multiplierEdwardsiphyton", multiplierEdwardsiphyton);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierEdwardsiphyton = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Edwardsiphyton", "radiusEdwardsiphyton", radiusEdwardsiphyton);
        prop.setComment("Radius Edwardsiphyton can spread (0 to 8) [default: 3]");
        radiusEdwardsiphyton = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Maple", "genMaple", genMaple);
        prop.setComment("Set to true to generate Maple trees naturally [default: false]");
        genMaple = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Maple", "genMapleBlacklistBiomes", genMapleBlacklistBiomes);
        prop.setComment("List of biomes Maple trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genMapleBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Maple", "genMapleOverrideBiomes", genMapleOverrideBiomes);
        prop.setComment("List of biomes Maple trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genMapleOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Maple", "dimMaple", dimMaple);
        prop.setComment("List of dimension IDs Maple trees can generate in [default: 0]");
        dimMaple = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Maple", "minheightMaple", minheightMaple);
        prop.setComment("Minimum height that Maple trees can generate (1 to 250) [default: 1]");
        minheightMaple = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Maple", "maxheightMaple", maxheightMaple);
        prop.setComment("Maximum height that Maple trees can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightMaple = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Maple", "multiplierMaple", multiplierMaple);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierMaple = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Archaefructus", "genArchaefructus", genArchaefructus);
        prop.setComment("Set to true to generate Archaefructus naturally [default: false]");
        genArchaefructus = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaefructus", "genArchaefructusBlacklistBiomes", genArchaefructusBlacklistBiomes);
        prop.setComment("List of biomes Archaefructus are blacklisted from, in the format: modid:biomeid [default: empty]");
        genArchaefructusBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaefructus", "genArchaefructusOverrideBiomes", genArchaefructusOverrideBiomes);
        prop.setComment("List of biomes Archaefructus are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genArchaefructusOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Archaefructus", "dimArchaefructus", dimArchaefructus);
        prop.setComment("List of dimension IDs Archaefructus can generate in [default: 0]");
        dimArchaefructus = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaefructus", "minheightArchaefructus", minheightArchaefructus);
        prop.setComment("Minimum height that Archaefructus can generate (1 to 250) [default: 1]");
        minheightArchaefructus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaefructus", "maxheightArchaefructus", maxheightArchaefructus);
        prop.setComment("Maximum height that Archaefructus can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightArchaefructus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaefructus", "multiplierArchaefructus", multiplierArchaefructus);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierArchaefructus = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Archaefructus", "spreadArchaefructus", spreadArchaefructus);
        prop.setComment("Set to true for Archaefructus to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadArchaefructus = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Water Horsetail", "genWaterHorsetail", genWaterHorsetail);
        prop.setComment("Set to true to generate Water Horsetails naturally [default: false]");
        genWaterHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Water Horsetail", "genWaterHorsetailBlacklistBiomes", genWaterHorsetailBlacklistBiomes);
        prop.setComment("List of biomes Water Horsetails are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWaterHorsetailBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Water Horsetail", "genWaterHorsetailOverrideBiomes", genWaterHorsetailOverrideBiomes);
        prop.setComment("List of biomes Water Horsetails are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genWaterHorsetailOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Water Horsetail", "dimWaterHorsetail", dimWaterHorsetail);
        prop.setComment("List of dimension IDs Water Horsetails can generate in [default: 0]");
        dimWaterHorsetail = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Water Horsetail", "minheightWaterHorsetail", minheightWaterHorsetail);
        prop.setComment("Minimum height that Water Horsetails can generate (1 to 250) [default: 1]");
        minheightWaterHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Water Horsetail", "maxheightWaterHorsetail", maxheightWaterHorsetail);
        prop.setComment("Maximum height that Water Horsetails can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightWaterHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Water Horsetail", "multiplierWaterHorsetail", multiplierWaterHorsetail);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierWaterHorsetail = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Water Horsetail", "spreadWaterHorsetail", spreadWaterHorsetail);
        prop.setComment("Set to true for Water Horsetails to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadWaterHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Tyrmia", "genTyrmia", genTyrmia);
        prop.setComment("Set to true to generate Tyrmia naturally [default: false]");
        genTyrmia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tyrmia", "genTyrmiaBlacklistBiomes", genTyrmiaBlacklistBiomes);
        prop.setComment("List of biomes Tyrmia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTyrmiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tyrmia", "genTyrmiaOverrideBiomes", genTyrmiaOverrideBiomes);
        prop.setComment("List of biomes Tyrmia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genTyrmiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Tyrmia", "dimTyrmia", dimTyrmia);
        prop.setComment("List of dimension IDs Tyrmia can generate in [default: 0]");
        dimTyrmia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tyrmia", "minheightTyrmia", minheightTyrmia);
        prop.setComment("Minimum height that Tyrmia can generate (1 to 250) [default: 1]");
        minheightTyrmia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tyrmia", "maxheightTyrmia", maxheightTyrmia);
        prop.setComment("Maximum height that Tyrmia can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightTyrmia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tyrmia", "multiplierTyrmia", multiplierTyrmia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTyrmia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Wielandiella", "genWielandiella", genWielandiella);
        prop.setComment("Set to true to generate Wielandiella naturally [default: false]");
        genWielandiella = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wielandiella", "genWielandiellaBlacklistBiomes", genWielandiellaBlacklistBiomes);
        prop.setComment("List of biomes Wielandiella are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWielandiellaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wielandiella", "genWielandiellaOverrideBiomes", genWielandiellaOverrideBiomes);
        prop.setComment("List of biomes Wielandiella are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genWielandiellaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Wielandiella", "dimWielandiella", dimWielandiella);
        prop.setComment("List of dimension IDs Wielandiella can generate in [default: 0]");
        dimWielandiella = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wielandiella", "minheightWielandiella", minheightWielandiella);
        prop.setComment("Minimum height that Wielandiella can generate (1 to 250) [default: 1]");
        minheightWielandiella = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wielandiella", "maxheightWielandiella", maxheightWielandiella);
        prop.setComment("Maximum height that Wielandiella can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightWielandiella = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wielandiella", "multiplierWielandiella", multiplierWielandiella);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierWielandiella = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Wood Horsetail", "genWoodHorsetail", genWoodHorsetail);
        prop.setComment("Set to true to generate WoodHorsetail naturally [default: false]");
        genWoodHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wood Horsetail", "genWoodHorsetailBlacklistBiomes", genWoodHorsetailBlacklistBiomes);
        prop.setComment("List of biomes WoodHorsetail are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWoodHorsetailBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wood Horsetail", "genWoodHorsetailOverrideBiomes", genWoodHorsetailOverrideBiomes);
        prop.setComment("List of biomes WoodHorsetail are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genWoodHorsetailOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Wood Horsetail", "dimWoodHorsetail", dimWoodHorsetail);
        prop.setComment("List of dimension IDs WoodHorsetail can generate in [default: 0]");
        dimWoodHorsetail = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wood Horsetail", "minheightWoodHorsetail", minheightWoodHorsetail);
        prop.setComment("Minimum height that WoodHorsetail can generate (1 to 250) [default: 1]");
        minheightWoodHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wood Horsetail", "maxheightWoodHorsetail", maxheightWoodHorsetail);
        prop.setComment("Maximum height that WoodHorsetail can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightWoodHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wood Horsetail", "multiplierWoodHorsetail", multiplierWoodHorsetail);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierWoodHorsetail = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wood Horsetail", "spreadWoodHorsetail", spreadWoodHorsetail);
        prop.setComment("Set to true for Wood Horsetails to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadWoodHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Field Horsetail", "genFieldHorsetail", genFieldHorsetail);
        prop.setComment("Set to true to generate Field Horsetails naturally [default: false]");
        genFieldHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Field Horsetail", "genFieldHorsetailBlacklistBiomes", genFieldHorsetailBlacklistBiomes);
        prop.setComment("List of biomes Field Horsetails are blacklisted from, in the format: modid:biomeid [default: empty]");
        genFieldHorsetailBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Field Horsetail", "genFieldHorsetailOverrideBiomes", genFieldHorsetailOverrideBiomes);
        prop.setComment("List of biomes Field Horsetails are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genFieldHorsetailOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Field Horsetail", "dimFieldHorsetail", dimFieldHorsetail);
        prop.setComment("List of dimension IDs Field Horsetails can generate in [default: 0]");
        dimFieldHorsetail = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Field Horsetail", "minheightFieldHorsetail", minheightFieldHorsetail);
        prop.setComment("Minimum height that Field Horsetails can generate (1 to 250) [default: 1]");
        minheightFieldHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Field Horsetail", "maxheightFieldHorsetail", maxheightFieldHorsetail);
        prop.setComment("Maximum height that Field Horsetails can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightFieldHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Field Horsetail", "multiplierFieldHorsetail", multiplierFieldHorsetail);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierFieldHorsetail = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Field Horsetail", "spreadFieldHorsetail", spreadFieldHorsetail);
        prop.setComment("Set to true for Field Horsetails to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadFieldHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ladinia", "genLadinia", genLadinia);
        prop.setComment("Set to true to generate Ladinia naturally [default: false]");
        genLadinia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ladinia", "genLadiniaBlacklistBiomes", genLadiniaBlacklistBiomes);
        prop.setComment("List of biomes Ladinia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLadiniaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ladinia", "genLadiniaOverrideBiomes", genLadiniaOverrideBiomes);
        prop.setComment("List of biomes Ladinia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genLadiniaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Ladinia", "dimLadinia", dimLadinia);
        prop.setComment("List of dimension IDs Ladinia can generate in [default: 0]");
        dimLadinia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ladinia", "minheightLadinia", minheightLadinia);
        prop.setComment("Minimum height that Ladinia can generate (1 to 250) [default: 1]");
        minheightLadinia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ladinia", "maxheightLadinia", maxheightLadinia);
        prop.setComment("Maximum height that Ladinia can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightLadinia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ladinia", "multiplierLadinia", multiplierLadinia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierLadinia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Umaltolepis", "genUmaltolepis", genUmaltolepis);
        prop.setComment("Set to true to generate Umaltolepis naturally [default: false]");
        genUmaltolepis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Umaltolepis", "genUmaltolepisBlacklistBiomes", genUmaltolepisBlacklistBiomes);
        prop.setComment("List of biomes Umaltolepis are blacklisted from, in the format: modid:biomeid [default: empty]");
        genUmaltolepisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Umaltolepis", "genUmaltolepisOverrideBiomes", genUmaltolepisOverrideBiomes);
        prop.setComment("List of biomes Umaltolepis are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genUmaltolepisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Umaltolepis", "dimUmaltolepis", dimUmaltolepis);
        prop.setComment("List of dimension IDs Umaltolepis can generate in [default: 0]");
        dimUmaltolepis = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Umaltolepis", "minheightUmaltolepis", minheightUmaltolepis);
        prop.setComment("Minimum height that Umaltolepis can generate (1 to 250) [default: 1]");
        minheightUmaltolepis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Umaltolepis", "maxheightUmaltolepis", maxheightUmaltolepis);
        prop.setComment("Maximum height that Umaltolepis can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightUmaltolepis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Umaltolepis", "multiplierUmaltolepis", multiplierUmaltolepis);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierUmaltolepis = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Artocarpus", "genArtocarpus", genArtocarpus);
        prop.setComment("Set to true to generate Artocarpus (breadfruit) trees naturally [default: false]");
        genArtocarpus = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Artocarpus", "genArtocarpusBlacklistBiomes", genArtocarpusBlacklistBiomes);
        prop.setComment("List of biomes Artocarpus (breadfruit) trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genArtocarpusBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Artocarpus", "genArtocarpusOverrideBiomes", genArtocarpusOverrideBiomes);
        prop.setComment("List of biomes Artocarpus (breadfruit) trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genArtocarpusOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Artocarpus", "dimArtocarpus", dimArtocarpus);
        prop.setComment("List of dimension IDs Artocarpus (breadfruit) trees can generate in [default: 0]");
        dimArtocarpus = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Artocarpus", "minheightArtocarpus", minheightArtocarpus);
        prop.setComment("Minimum height that Artocarpus (breadfruit) trees can generate (1 to 250) [default: 1]");
        minheightArtocarpus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Artocarpus", "maxheightArtocarpus", maxheightArtocarpus);
        prop.setComment("Maximum height that Artocarpus (breadfruit) trees can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightArtocarpus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Artocarpus", "multiplierArtocarpus", multiplierArtocarpus);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierArtocarpus = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Sphenopteris", "genSphenopteris", genSphenopteris);
        prop.setComment("Set to true to generate Sphenopteris naturally [default: false]");
        genSphenopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenopteris", "genSphenopterisBlacklistBiomes", genSphenopterisBlacklistBiomes);
        prop.setComment("List of biomes Sphenopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSphenopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenopteris", "genSphenopterisOverrideBiomes", genSphenopterisOverrideBiomes);
        prop.setComment("List of biomes Sphenopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSphenopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Sphenopteris", "dimSphenopteris", dimSphenopteris);
        prop.setComment("List of dimension IDs Sphenopteris can generate in [default: 0]");
        dimSphenopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenopteris", "minheightSphenopteris", minheightSphenopteris);
        prop.setComment("Minimum height that Sphenopteris can generate (1 to 250) [default: 1]");
        minheightSphenopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenopteris", "maxheightSphenopteris", maxheightSphenopteris);
        prop.setComment("Maximum height that Sphenopteris can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightSphenopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Sphenopteris", "multiplierSphenopteris", multiplierSphenopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSphenopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Shrubby Equisetites", "genEquisetites", genEquisetites);
        prop.setComment("Set to true to generate Shrubby Equisetites naturally [default: false]");
        genEquisetites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Shrubby Equisetites", "genEquisetitesBlacklistBiomes", genEquisetitesBlacklistBiomes);
        prop.setComment("List of biomes Shrubby Equisetites are blacklisted from, in the format: modid:biomeid [default: empty]");
        genEquisetitesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Shrubby Equisetites", "genEquisetitesOverrideBiomes", genEquisetitesOverrideBiomes);
        prop.setComment("List of biomes Shrubby Equisetites are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genEquisetitesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Shrubby Equisetites", "dimEquisetites", dimEquisetites);
        prop.setComment("List of dimension IDs Shrubby Equisetites can generate in [default: 0]");
        dimEquisetites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Shrubby Equisetites", "minheightEquisetites", minheightEquisetites);
        prop.setComment("Minimum height that Shrubby Equisetites can generate (1 to 250) [default: 1]");
        minheightEquisetites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Shrubby Equisetites", "maxheightEquisetites", maxheightEquisetites);
        prop.setComment("Maximum height that Shrubby Equisetites can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightEquisetites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Shrubby Equisetites", "multiplierEquisetites", multiplierEquisetites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierEquisetites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Schizoneura", "genSchizoneura", genSchizoneura);
        prop.setComment("Set to true to generate Schizoneura naturally [default: false]");
        genSchizoneura = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Schizoneura", "genSchizoneuraBlacklistBiomes", genSchizoneuraBlacklistBiomes);
        prop.setComment("List of biomes Schizoneura are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSchizoneuraBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Schizoneura", "genSchizoneuraOverrideBiomes", genSchizoneuraOverrideBiomes);
        prop.setComment("List of biomes Schizoneura are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSchizoneuraOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Schizoneura", "dimSchizoneura", dimSchizoneura);
        prop.setComment("List of dimension IDs Schizoneura can generate in [default: 0]");
        dimSchizoneura = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Schizoneura", "minheightSchizoneura", minheightSchizoneura);
        prop.setComment("Minimum height that Schizoneura can generate (1 to 250) [default: 1]");
        minheightSchizoneura = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Schizoneura", "maxheightSchizoneura", maxheightSchizoneura);
        prop.setComment("Maximum height that Schizoneura can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightSchizoneura = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Schizoneura", "multiplierSchizoneura", multiplierSchizoneura);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSchizoneura = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Southern Beech", "genNothofagus", genNothofagus);
        prop.setComment("Set to true to generate Nothofagus (Southern Beech) trees naturally [default: false]");
        genNothofagus = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Southern Beech", "genNothofagusBlacklistBiomes", genNothofagusBlacklistBiomes);
        prop.setComment("List of biomes Nothofagus (Southern Beech) trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNothofagusBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Southern Beech", "genNothofagusOverrideBiomes", genNothofagusOverrideBiomes);
        prop.setComment("List of biomes Nothofagus (Southern Beech) trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNothofagusOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Southern Beech", "dimNothofagus", dimNothofagus);
        prop.setComment("List of dimension IDs Nothofagus (Southern Beech) trees can generate in [default: 0]");
        dimNothofagus = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Southern Beech", "minheightNothofagus", minheightNothofagus);
        prop.setComment("Minimum height that Nothofagus (Southern Beech) trees can generate (1 to 250) [default: 75]");
        minheightNothofagus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Southern Beech", "maxheightNothofagus", maxheightNothofagus);
        prop.setComment("Maximum height that Nothofagus (Southern Beech) trees can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightNothofagus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Southern Beech", "multiplierNothofagus", multiplierNothofagus);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNothofagus = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Southern Beech", "podzolNothofagus", podzolNothofagus);
        prop.setComment("Radius for podzol generation at base of Nothofagus trees (0 - 16: set to 0 to disable) [default: 4]");
        podzolNothofagus = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Pachypteris", "genPachypteris", genPachypteris);
        prop.setComment("Set to true to generate Pachypteris naturally [default: false]");
        genPachypteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pachypteris", "genPachypterisBlacklistBiomes", genPachypterisBlacklistBiomes);
        prop.setComment("List of biomes Pachypteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPachypterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pachypteris", "genPachypterisOverrideBiomes", genPachypterisOverrideBiomes);
        prop.setComment("List of biomes Pachypteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPachypterisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pachypteris", "dimPachypteris", dimPachypteris);
        prop.setComment("List of dimension IDs Pachypteris can generate in [default: 0]");
        dimPachypteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pachypteris", "minheightPachypteris", minheightPachypteris);
        prop.setComment("Minimum height that Pachypteris can generate (1 to 250) [default: 1]");
        minheightPachypteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pachypteris", "maxheightPachypteris", maxheightPachypteris);
        prop.setComment("Maximum height that Pachypteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPachypteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pachypteris", "multiplierPachypteris", multiplierPachypteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPachypteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Nathorstiana", "genNathorstiana", genNathorstiana);
        prop.setComment("Set to true to generate Nathorstiana naturally [default: false]");
        genNathorstiana = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nathorstiana", "genNathorstianaBlacklistBiomes", genNathorstianaBlacklistBiomes);
        prop.setComment("List of biomes Nathorstiana are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNathorstianaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nathorstiana", "genNathorstianaOverrideBiomes", genNathorstianaOverrideBiomes);
        prop.setComment("List of biomes Nathorstiana are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNathorstianaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Nathorstiana", "dimNathorstiana", dimNathorstiana);
        prop.setComment("List of dimension IDs Nathorstiana can generate in [default: 0]");
        dimNathorstiana = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nathorstiana", "minheightNathorstiana", minheightNathorstiana);
        prop.setComment("Minimum height that Nathorstiana can generate (1 to 250) [default: 1]");
        minheightNathorstiana = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nathorstiana", "maxheightNathorstiana", maxheightNathorstiana);
        prop.setComment("Maximum height that Nathorstiana can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightNathorstiana = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nathorstiana", "multiplierNathorstiana", multiplierNathorstiana);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNathorstiana = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Nathorstiana", "spreadNathorstiana", spreadNathorstiana);
        prop.setComment("Set to true for Nathorstiana to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadNathorstiana = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Omphalophloios", "genOmphalophloios", genOmphalophloios);
        prop.setComment("Set to true to generate Omphalophloios naturally [default: false]");
        genOmphalophloios = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Omphalophloios", "genOmphalophloiosBlacklistBiomes", genOmphalophloiosBlacklistBiomes);
        prop.setComment("List of biomes Omphalophloios are blacklisted from, in the format: modid:biomeid [default: empty]");
        genOmphalophloiosBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Omphalophloios", "genOmphalophloiosOverrideBiomes", genOmphalophloiosOverrideBiomes);
        prop.setComment("List of biomes Omphalophloios are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genOmphalophloiosOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Omphalophloios", "dimOmphalophloios", dimOmphalophloios);
        prop.setComment("List of dimension IDs Omphalophloios can generate in [default: 0]");
        dimOmphalophloios = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Omphalophloios", "minheightOmphalophloios", minheightOmphalophloios);
        prop.setComment("Minimum height that Omphalophloios can generate (1 to 250) [default: 1]");
        minheightOmphalophloios = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Omphalophloios", "maxheightOmphalophloios", maxheightOmphalophloios);
        prop.setComment("Maximum height that Omphalophloios can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightOmphalophloios = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Omphalophloios", "multiplierOmphalophloios", multiplierOmphalophloios);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierOmphalophloios = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Neocalamites", "genNeocalamites", genNeocalamites);
        prop.setComment("Set to true to generate Neocalamites naturally [default: false]");
        genNeocalamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neocalamites", "genNeocalamitesBlacklistBiomes", genNeocalamitesBlacklistBiomes);
        prop.setComment("List of biomes Neocalamites are blacklisted from, in the format: modid:biomeid [default: empty]");
        genNeocalamitesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neocalamites", "genNeocalamitesOverrideBiomes", genNeocalamitesOverrideBiomes);
        prop.setComment("List of biomes Neocalamites are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genNeocalamitesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Neocalamites", "dimNeocalamites", dimNeocalamites);
        prop.setComment("List of dimension IDs Neocalamites can generate in [default: 0]");
        dimNeocalamites = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neocalamites", "minheightNeocalamites", minheightNeocalamites);
        prop.setComment("Minimum height that Neocalamites can generate (1 to 250) [default: 1]");
        minheightNeocalamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neocalamites", "maxheightNeocalamites", maxheightNeocalamites);
        prop.setComment("Maximum height that Neocalamites can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightNeocalamites = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Neocalamites", "multiplierNeocalamites", multiplierNeocalamites);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierNeocalamites = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Phyllotheca", "genPhyllotheca", genPhyllotheca);
        prop.setComment("Set to true to generate Phyllotheca naturally [default: false]");
        genPhyllotheca = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phyllotheca", "genPhyllothecaBlacklistBiomes", genPhyllothecaBlacklistBiomes);
        prop.setComment("List of biomes Phyllotheca are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPhyllothecaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phyllotheca", "genPhyllothecaOverrideBiomes", genPhyllothecaOverrideBiomes);
        prop.setComment("List of biomes Phyllotheca are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPhyllothecaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Phyllotheca", "dimPhyllotheca", dimPhyllotheca);
        prop.setComment("List of dimension IDs Phyllotheca can generate in [default: 0]");
        dimPhyllotheca = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phyllotheca", "minheightPhyllotheca", minheightPhyllotheca);
        prop.setComment("Minimum height that Phyllotheca can generate (1 to 250) [default: 1]");
        minheightPhyllotheca = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phyllotheca", "maxheightPhyllotheca", maxheightPhyllotheca);
        prop.setComment("Maximum height that Phyllotheca can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPhyllotheca = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phyllotheca", "multiplierPhyllotheca", multiplierPhyllotheca);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPhyllotheca = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Reedy Equisetites", "genEquisetitesReed", genEquisetitesReed);
        prop.setComment("Set to true to generate Reedy Equisetites naturally [default: false]");
        genEquisetitesReed = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reedy Equisetites", "genEquisetitesReedBlacklistBiomes", genEquisetitesReedBlacklistBiomes);
        prop.setComment("List of biomes Reedy Equisetites are blacklisted from, in the format: modid:biomeid [default: empty]");
        genEquisetitesReedBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reedy Equisetites", "genEquisetitesReedOverrideBiomes", genEquisetitesReedOverrideBiomes);
        prop.setComment("List of biomes Scrambling Reedy Equisetites are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genEquisetitesReedOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Reedy Equisetites", "dimEquisetitesReed", dimEquisetitesReed);
        prop.setComment("List of dimension IDs Reedy Equisetites can generate in [default: 0]");
        dimEquisetitesReed = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen EquisetitesReed", "minheightEquisetitesReed", minheightEquisetitesReed);
        prop.setComment("Minimum height that EquisetitesReed can generate (1 to 250) [default: 1]");
        minheightEquisetitesReed = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reedy Equisetites", "maxheightEquisetitesReed", maxheightEquisetitesReed);
        prop.setComment("Maximum height that Reedy Equisetites can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightEquisetitesReed = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Reedy Equisetites", "multiplierEquisetitesReed", multiplierEquisetitesReed);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierEquisetitesReed = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Primaeval Yew", "genYew", genYew);
        prop.setComment("Set to true to generate Primaeval Yew trees naturally [default: false]");
        genYew = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Yew", "genYewBlacklistBiomes", genYewBlacklistBiomes);
        prop.setComment("List of biomes Primaeval Yew trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genYewBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Yew", "genYewOverrideBiomes", genYewOverrideBiomes);
        prop.setComment("List of biomes Primaeval Yew trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genYewOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Primaeval Yew", "dimYew", dimYew);
        prop.setComment("List of dimension IDs Primaeval Yew trees can generate in [default: 0]");
        dimYew = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Yew", "minheightYew", minheightYew);
        prop.setComment("Minimum height that Primaeval Yew trees can generate (1 to 250) [default: 1]");
        minheightYew = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Yew", "maxheightYew", maxheightYew);
        prop.setComment("Maximum height that Primaeval Yew trees can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightYew = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Primaeval Yew", "multiplierYew", multiplierYew);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierYew = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Brachyphyllum", "genBrachyphyllum", genBrachyphyllum);
        prop.setComment("Set to true to generate Brachyphyllum trees naturally [default: false]");
        genBrachyphyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brachyphyllum", "genBrachyphyllumBlacklistBiomes", genBrachyphyllumBlacklistBiomes);
        prop.setComment("List of biomes Brachyphyllum trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBrachyphyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brachyphyllum", "genBrachyphyllumOverrideBiomes", genBrachyphyllumOverrideBiomes);
        prop.setComment("List of biomes Brachyphyllum trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBrachyphyllumOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brachyphyllum", "dimBrachyphyllum", dimBrachyphyllum);
        prop.setComment("List of dimension IDs Brachyphyllum trees can generate in [default: 0]");
        dimBrachyphyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brachyphyllum", "minheightBrachyphyllum", minheightBrachyphyllum);
        prop.setComment("Minimum height that Brachyphyllum trees can generate (1 to 250) [default: 1]");
        minheightBrachyphyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brachyphyllum", "maxheightBrachyphyllum", maxheightBrachyphyllum);
        prop.setComment("Maximum height that Brachyphyllum trees can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightBrachyphyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Brachyphyllum", "multiplierBrachyphyllum", multiplierBrachyphyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBrachyphyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Czekanowskia", "genCzekanowskia", genCzekanowskia);
        prop.setComment("Set to true to generate Czekanowskia trees naturally [default: false]");
        genCzekanowskia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Czekanowskia", "genCzekanowskiaBlacklistBiomes", genCzekanowskiaBlacklistBiomes);
        prop.setComment("List of biomes Czekanowskia trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCzekanowskiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Czekanowskia", "genCzekanowskiaOverrideBiomes", genCzekanowskiaOverrideBiomes);
        prop.setComment("List of biomes Czekanowskia trees are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCzekanowskiaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Czekanowskia", "dimCzekanowskia", dimCzekanowskia);
        prop.setComment("List of dimension IDs Czekanowskia trees can generate in [default: 0]");
        dimCzekanowskia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Czekanowskia", "minheightCzekanowskia", minheightCzekanowskia);
        prop.setComment("Minimum height that Czekanowskia trees can generate (1 to 250) [default: 1]");
        minheightCzekanowskia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Czekanowskia", "maxheightCzekanowskia", maxheightCzekanowskia);
        prop.setComment("Maximum height that Czekanowskia trees can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightCzekanowskia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Czekanowskia", "multiplierCzekanowskia", multiplierCzekanowskia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCzekanowskia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Pterophyllum", "genPterophyllum", genPterophyllum);
        prop.setComment("Set to true to generate Pterophyllum naturally [default: false]");
        genPterophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pterophyllum", "genPterophyllumBlacklistBiomes", genPterophyllumBlacklistBiomes);
        prop.setComment("List of biomes Pterophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPterophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pterophyllum", "genPterophyllumOverrideBiomes", genPterophyllumOverrideBiomes);
        prop.setComment("List of biomes Pterophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPterophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Pterophyllum", "dimPterophyllum", dimPterophyllum);
        prop.setComment("List of dimension IDs Pterophyllum can generate in [default: 0]");
        dimPterophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pterophyllum", "minheightPterophyllum", minheightPterophyllum);
        prop.setComment("Minimum height that Pterophyllum can generate (1 to 250) [default: 1]");
        minheightPterophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pterophyllum", "maxheightPterophyllum", maxheightPterophyllum);
        prop.setComment("Maximum height that Pterophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPterophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pterophyllum", "multiplierPterophyllum", multiplierPterophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPterophyllum = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Phasmatocycas", "genPhasmatocycas", genPhasmatocycas);
        prop.setComment("Set to true to generate Phasmatocycas naturally [default: false]");
        genPhasmatocycas = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phasmatocycas", "genPhasmatocycasBlacklistBiomes", genPhasmatocycasBlacklistBiomes);
        prop.setComment("List of biomes Phasmatocycas are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPhasmatocycasBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phasmatocycas", "genPhasmatocycasOverrideBiomes", genPhasmatocycasOverrideBiomes);
        prop.setComment("List of biomes Phasmatocycas are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPhasmatocycasOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Phasmatocycas", "dimPhasmatocycas", dimPhasmatocycas);
        prop.setComment("List of dimension IDs Phasmatocycas can generate in [default: 0]");
        dimPhasmatocycas = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phasmatocycas", "minheightPhasmatocycas", minheightPhasmatocycas);
        prop.setComment("Minimum height that Phasmatocycas can generate (1 to 250) [default: 1]");
        minheightPhasmatocycas = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phasmatocycas", "maxheightPhasmatocycas", maxheightPhasmatocycas);
        prop.setComment("Maximum height that Phasmatocycas can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPhasmatocycas = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Phasmatocycas", "multiplierPhasmatocycas", multiplierPhasmatocycas);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPhasmatocycas = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Quasistrobus", "genQuasistrobus", genQuasistrobus);
        prop.setComment("Set to true to generate Quasistrobus naturally [default: false]");
        genQuasistrobus = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quasistrobus", "genQuasistrobusBlacklistBiomes", genQuasistrobusBlacklistBiomes);
        prop.setComment("List of biomes Quasistrobus are blacklisted from, in the format: modid:biomeid [default: empty]");
        genQuasistrobusBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quasistrobus", "genQuasistrobusOverrideBiomes", genQuasistrobusOverrideBiomes);
        prop.setComment("List of biomes Quasistrobus are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genQuasistrobusOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Quasistrobus", "dimQuasistrobus", dimQuasistrobus);
        prop.setComment("List of dimension IDs Quasistrobus can generate in [default: 0]");
        dimQuasistrobus = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quasistrobus", "minheightQuasistrobus", minheightQuasistrobus);
        prop.setComment("Minimum height that Quasistrobus can generate (1 to 250) [default: 1]");
        minheightQuasistrobus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quasistrobus", "maxheightQuasistrobus", maxheightQuasistrobus);
        prop.setComment("Maximum height that Quasistrobus can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightQuasistrobus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quasistrobus", "multiplierQuasistrobus", multiplierQuasistrobus);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierQuasistrobus = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Utrechtia", "genUtrechtia", genUtrechtia);
        prop.setComment("Set to true to generate Utrechtia naturally [default: false]");
        genUtrechtia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Utrechtia", "genUtrechtiaBlacklistBiomes", genUtrechtiaBlacklistBiomes);
        prop.setComment("List of biomes Utrechtia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genUtrechtiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Utrechtia", "genUtrechtiaOverrideBiomes", genUtrechtiaOverrideBiomes);
        prop.setComment("List of biomes Utrechtia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genUtrechtiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Utrechtia", "dimUtrechtia", dimUtrechtia);
        prop.setComment("List of dimension IDs Utrechtia can generate in [default: 0]");
        dimUtrechtia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Utrechtia", "minheightUtrechtia", minheightUtrechtia);
        prop.setComment("Minimum height that Utrechtia can generate (1 to 250) [default: 1]");
        minheightUtrechtia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Utrechtia", "maxheightUtrechtia", maxheightUtrechtia);
        prop.setComment("Maximum height that Utrechtia can generate (1 to 250, or set to 0 for unlimited) [default: 110]");
        maxheightUtrechtia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Utrechtia", "multiplierUtrechtia", multiplierUtrechtia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierUtrechtia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Selaginella", "genSelaginella", genSelaginella);
        prop.setComment("Set to true to generate Selaginella naturally [default: false]");
        genSelaginella = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Selaginella", "genSelaginellaBlacklistBiomes", genSelaginellaBlacklistBiomes);
        prop.setComment("List of biomes Selaginella is blacklisted from, in the format: modid:biomeid [default: empty]");
        genSelaginellaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Selaginella", "genSelaginellaOverrideBiomes", genSelaginellaOverrideBiomes);
        prop.setComment("List of biomes Selaginella is forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSelaginellaOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Selaginella", "dimSelaginella", dimSelaginella);
        prop.setComment("List of dimension IDs Selaginella can generate in [default: 0]");
        dimSelaginella = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Selaginella", "minheightSelaginella", minheightSelaginella);
        prop.setComment("Minimum height that Selaginella can generate (1 to 250) [default: 1]");
        minheightSelaginella = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Selaginella", "maxheightSelaginella", maxheightSelaginella);
        prop.setComment("Minimum height that Selaginella can generate (1 to 250, or set to 0 for unlimited) [default: 120]");
        maxheightSelaginella = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Selaginella", "multiplierSelaginella", multiplierSelaginella);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSelaginella = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Selaginella", "radiusSelaginella", radiusSelaginella);
        prop.setComment("Radius Selaginella can spread (0 to 8) [default: 1]");
        radiusSelaginella = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Cobbania", "genCobbania", genCobbania);
        prop.setComment("Set to true to generate Cobbania naturally [default: false]");
        genCobbania = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cobbania", "genCobbaniaBlacklistBiomes", genCobbaniaBlacklistBiomes);
        prop.setComment("List of biomes Cobbania are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCobbaniaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cobbania", "genCobbaniaOverrideBiomes", genCobbaniaOverrideBiomes);
        prop.setComment("List of biomes Cobbania are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCobbaniaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Cobbania", "dimCobbania", dimCobbania);
        prop.setComment("List of dimension IDs Cobbania can generate in [default: 0]");
        dimCobbania = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cobbania", "minheightCobbania", minheightCobbania);
        prop.setComment("Minimum height that Cobbania can generate (1 to 250) [default: 80]");
        minheightCobbania = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cobbania", "maxheightCobbania", maxheightCobbania);
        prop.setComment("Maximum height that Cobbania can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightCobbania = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cobbania", "multiplierCobbania", multiplierCobbania);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCobbania = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cobbania", "spreadCobbania", spreadCobbania);
        prop.setComment("Set to true for Cobbania to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadCobbania = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Elkinsia", "genElkinsia", genElkinsia);
        prop.setComment("Set to true to generate Elkinsia naturally [default: false]");
        genElkinsia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Elkinsia", "genElkinsiaBlacklistBiomes", genElkinsiaBlacklistBiomes);
        prop.setComment("List of biomes Elkinsia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genElkinsiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Elkinsia", "genElkinsiaOverrideBiomes", genElkinsiaOverrideBiomes);
        prop.setComment("List of biomes Elkinsia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genElkinsiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Elkinsia", "dimElkinsia", dimElkinsia);
        prop.setComment("List of dimension IDs Elkinsia can generate in [default: 0]");
        dimElkinsia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Elkinsia", "minheightElkinsia", minheightElkinsia);
        prop.setComment("Minimum height that Elkinsia can generate (1 to 250) [default: 1]");
        minheightElkinsia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Elkinsia", "maxheightElkinsia", maxheightElkinsia);
        prop.setComment("Maximum height that Elkinsia can generate (1 to 250, or set to 0 for unlimited) [default: 95]");
        maxheightElkinsia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Elkinsia", "multiplierElkinsia", multiplierElkinsia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierElkinsia = prop.getDouble();

        prop = cfg.get("WorldGen Palaeostachya", "genPalaeostachya", genPalaeostachya);
        prop.setComment("Set to true to generate Palaeostachya naturally [default: false]");
        genPalaeostachya = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Palaeostachya", "genPalaeostachyaBlacklistBiomes", genPalaeostachyaBlacklistBiomes);
        prop.setComment("List of biomes Palaeostachya are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPalaeostachyaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Palaeostachya", "genPalaeostachyaOverrideBiomes", genPalaeostachyaOverrideBiomes);
        prop.setComment("List of biomes Palaeostachya are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPalaeostachyaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Palaeostachya", "dimPalaeostachya", dimPalaeostachya);
        prop.setComment("List of dimension IDs Palaeostachya can generate in [default: 0]");
        dimPalaeostachya = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Palaeostachya", "minheightPalaeostachya", minheightPalaeostachya);
        prop.setComment("Minimum height that Palaeostachya can generate (1 to 250) [default: 1]");
        minheightPalaeostachya = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Palaeostachya", "maxheightPalaeostachya", maxheightPalaeostachya);
        prop.setComment("Maximum height that Palaeostachya can generate (1 to 250, or set to 0 for unlimited) [default: 95]");
        maxheightPalaeostachya = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Palaeostachya", "multiplierPalaeostachya", multiplierPalaeostachya);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPalaeostachya = prop.getDouble();

        propOrder.add(prop.getName());prop = cfg.get("WorldGen Callistophytales (Climbing)", "genCallistophytalesLepidodendron", genCallistophytalesLepidodendron);
        prop.setComment("Set to true to generate Callistophytales naturally on Lepidodendron trees [default: false]");
        genCallistophytalesLepidodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Callistophytales (Climbing)", "genCallistophytalesBothrodendron", genCallistophytalesBothrodendron);
        prop.setComment("Set to true to generate Callistophytales naturally on Bothrodendron trees [default: false]");
        genCallistophytalesBothrodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Callistophytales (Climbing)", "genCallistophytalesCordaites", genCallistophytalesCordaites);
        prop.setComment("Set to true to generate Callistophytales naturally on Cordaites trees [default: false]");
        genCallistophytalesCordaites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Callistophytales (Climbing)", "genCallistophytalesDiaphorodendron", genCallistophytalesDiaphorodendron);
        prop.setComment("Set to true to generate Callistophytales naturally on Diaphorodendron trees [default: false]");
        genCallistophytalesDiaphorodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Callistophytales (Climbing)", "genCallistophytalesBlacklistBiomes", genCallistophytalesBlacklistBiomes);
        prop.setComment("List of biomes Callistophytales are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCallistophytalesBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Callistophytales (Climbing)", "genCallistophytalesOverrideBiomes", genCallistophytalesOverrideBiomes);
        prop.setComment("List of biomes Callistophytales are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCallistophytalesOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Callistophytales (Climbing)", "dimCallistophytales", dimCallistophytales);
        prop.setComment("List of dimension IDs Callistophytales can generate in [default: 0]");
        dimCallistophytales = prop.getIntList();

        prop = cfg.get("WorldGen Pseudobornia", "genPseudobornia", genPseudobornia);
        prop.setComment("Set to true to generate Pseudobornia naturally [default: false]");
        genPseudobornia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudobornia", "genPseudoborniaBlacklistBiomes", genPseudoborniaBlacklistBiomes);
        prop.setComment("List of biomes Pseudobornia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPseudoborniaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudobornia", "genPseudoborniaOverrideBiomes", genPseudoborniaOverrideBiomes);
        prop.setComment("List of biomes Pseudobornia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPseudoborniaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Pseudobornia", "dimPseudobornia", dimPseudobornia);
        prop.setComment("List of dimension IDs Pseudobornia can generate in [default: 0]");
        dimPseudobornia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudobornia", "minheightPseudobornia", minheightPseudobornia);
        prop.setComment("Minimum height that Pseudobornia can generate (1 to 250) [default: 1]");
        minheightPseudobornia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudobornia", "maxheightPseudobornia", maxheightPseudobornia);
        prop.setComment("Maximum height that Pseudobornia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightPseudobornia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudobornia", "multiplierPseudobornia", multiplierPseudobornia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPseudobornia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Eremopteris", "genEremopteris", genEremopteris);
        prop.setComment("Set to true to generate Eremopteris naturally [default: false]");
        genEremopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Eremopteris", "genEremopterisBlacklistBiomes", genEremopterisBlacklistBiomes);
        prop.setComment("List of biomes Eremopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genEremopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Eremopteris", "genEremopterisOverrideBiomes", genEremopterisOverrideBiomes);
        prop.setComment("List of biomes Eremopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genEremopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Eremopteris", "dimEremopteris", dimEremopteris);
        prop.setComment("List of dimension IDs Eremopteris can generate in [default: 0]");
        dimEremopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Eremopteris", "minheightEremopteris", minheightEremopteris);
        prop.setComment("Minimum height that Eremopteris can generate (1 to 250) [default: 1]");
        minheightEremopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Eremopteris", "maxheightEremopteris", maxheightEremopteris);
        prop.setComment("Maximum height that Eremopteris can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightEremopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Eremopteris", "multiplierEremopteris", multiplierEremopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierEremopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Adoketophyton", "genAdoketophyton", genAdoketophyton);
        prop.setComment("Set to true to generate Adoketophyton naturally [default: false]");
        genAdoketophyton = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Adoketophyton", "genAdoketophytonBlacklistBiomes", genAdoketophytonBlacklistBiomes);
        prop.setComment("List of biomes Adoketophyton are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAdoketophytonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Adoketophyton", "genAdoketophytonOverrideBiomes", genAdoketophytonOverrideBiomes);
        prop.setComment("List of biomes Adoketophyton are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAdoketophytonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Adoketophyton", "dimAdoketophyton", dimAdoketophyton);
        prop.setComment("List of dimension IDs Adoketophyton can generate in [default: 0]");
        dimAdoketophyton = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Adoketophyton", "waterAdoketophytonHorizontal", waterAdoketophytonHorizontal);
        prop.setComment("Distance NSEW from water that Adoketophyton can exist and spread onto neighbouring dirt and grass (1 to 16) [default: 3]");
        waterAdoketophytonHorizontal = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Adoketophyton", "waterAdoketophytonVertical", waterAdoketophytonVertical);
        prop.setComment("Distance above water required for Adoketophyton to exist (0 to 6) [default: 0]");
        waterAdoketophytonVertical = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Adoketophyton", "minheightAdoketophyton", minheightAdoketophyton);
        prop.setComment("Minimum height that Adoketophyton can generate (1 to 250) [default: 1]");
        minheightAdoketophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Adoketophyton", "maxheightAdoketophyton", maxheightAdoketophyton);
        prop.setComment("Maximum height that Adoketophyton can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightAdoketophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Adoketophyton", "multiplierAdoketophyton", multiplierAdoketophyton);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierAdoketophyton = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Adoketophyton", "spreadAdoketophyton", spreadAdoketophyton);
        prop.setComment("Set to true for Adoketophyton to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadAdoketophyton = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Zosterophyllum", "genZosterophyllum", genZosterophyllum);
        prop.setComment("Set to true to generate Zosterophyllum naturally [default: false]");
        genZosterophyllum = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zosterophyllum", "genZosterophyllumBlacklistBiomes", genZosterophyllumBlacklistBiomes);
        prop.setComment("List of biomes Zosterophyllum are blacklisted from, in the format: modid:biomeid [default: empty]");
        genZosterophyllumBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zosterophyllum", "genZosterophyllumOverrideBiomes", genZosterophyllumOverrideBiomes);
        prop.setComment("List of biomes Zosterophyllum are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genZosterophyllumOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Zosterophyllum", "dimZosterophyllum", dimZosterophyllum);
        prop.setComment("List of dimension IDs Zosterophyllum can generate in [default: 0]");
        dimZosterophyllum = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zosterophyllum", "waterZosterophyllumHorizontal", waterZosterophyllumHorizontal);
        prop.setComment("Distance NSEW from water that Zosterophyllum can exist and spread onto neighbouring dirt and grass (1 to 16) [default: 3]");
        waterZosterophyllumHorizontal = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zosterophyllum", "waterZosterophyllumVertical", waterZosterophyllumVertical);
        prop.setComment("Distance above water required for Zosterophyllum to exist (0 to 6) [default: 0]");
        waterZosterophyllumVertical = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zosterophyllum", "minheightZosterophyllum", minheightZosterophyllum);
        prop.setComment("Minimum height that Zosterophyllum can generate (1 to 250) [default: 1]");
        minheightZosterophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zosterophyllum", "maxheightZosterophyllum", maxheightZosterophyllum);
        prop.setComment("Maximum height that Zosterophyllum can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightZosterophyllum = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zosterophyllum", "multiplierZosterophyllum", multiplierZosterophyllum);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierZosterophyllum = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zosterophyllum", "spreadZosterophyllum", spreadZosterophyllum);
        prop.setComment("Set to true for Zosterophyllum to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadZosterophyllum = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Buriadia", "genBuriadia", genBuriadia);
        prop.setComment("Set to true to generate Buriadia naturally [default: false]");
        genBuriadia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Buriadia", "genBuriadiaBlacklistBiomes", genBuriadiaBlacklistBiomes);
        prop.setComment("List of biomes Buriadia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genBuriadiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Buriadia", "genBuriadiaOverrideBiomes", genBuriadiaOverrideBiomes);
        prop.setComment("List of biomes Buriadia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genBuriadiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Buriadia", "dimBuriadia", dimBuriadia);
        prop.setComment("List of dimension IDs Buriadia can generate in [default: 0]");
        dimBuriadia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Buriadia", "minheightBuriadia", minheightBuriadia);
        prop.setComment("Minimum height that Buriadia can generate (1 to 250) [default: 1]");
        minheightBuriadia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Buriadia", "maxheightBuriadia", maxheightBuriadia);
        prop.setComment("Maximum height that Buriadia can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightBuriadia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Buriadia", "multiplierBuriadia", multiplierBuriadia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierBuriadia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Quadrocladus", "genQuadrocladus", genQuadrocladus);
        prop.setComment("Set to true to generate Quadrocladus naturally [default: false]");
        genQuadrocladus = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quadrocladus", "genQuadrocladusBlacklistBiomes", genQuadrocladusBlacklistBiomes);
        prop.setComment("List of biomes Quadrocladus are blacklisted from, in the format: modid:biomeid [default: empty]");
        genQuadrocladusBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quadrocladus", "genQuadrocladusOverrideBiomes", genQuadrocladusOverrideBiomes);
        prop.setComment("List of biomes Quadrocladus are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genQuadrocladusOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Quadrocladus", "dimQuadrocladus", dimQuadrocladus);
        prop.setComment("List of dimension IDs Quadrocladus can generate in [default: 0]");
        dimQuadrocladus = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quadrocladus", "minheightQuadrocladus", minheightQuadrocladus);
        prop.setComment("Minimum height that Quadrocladus can generate (1 to 250) [default: 1]");
        minheightQuadrocladus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quadrocladus", "maxheightQuadrocladus", maxheightQuadrocladus);
        prop.setComment("Maximum height that Quadrocladus can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightQuadrocladus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Quadrocladus", "multiplierQuadrocladus", multiplierQuadrocladus);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierQuadrocladus = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Pseudovoltzia", "genPseudovoltzia", genPseudovoltzia);
        prop.setComment("Set to true to generate Pseudovoltzia naturally [default: false]");
        genPseudovoltzia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudovoltzia", "genPseudovoltziaBlacklistBiomes", genPseudovoltziaBlacklistBiomes);
        prop.setComment("List of biomes Pseudovoltzia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPseudovoltziaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudovoltzia", "genPseudovoltziaOverrideBiomes", genPseudovoltziaOverrideBiomes);
        prop.setComment("List of biomes Pseudovoltzia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPseudovoltziaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Pseudovoltzia", "dimPseudovoltzia", dimPseudovoltzia);
        prop.setComment("List of dimension IDs Pseudovoltzia can generate in [default: 0]");
        dimPseudovoltzia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudovoltzia", "minheightPseudovoltzia", minheightPseudovoltzia);
        prop.setComment("Minimum height that Pseudovoltzia can generate (1 to 250) [default: 1]");
        minheightPseudovoltzia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudovoltzia", "maxheightPseudovoltzia", maxheightPseudovoltzia);
        prop.setComment("Maximum height that Pseudovoltzia can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightPseudovoltzia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pseudovoltzia", "multiplierPseudovoltzia", multiplierPseudovoltzia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPseudovoltzia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Wachtlerina", "genWachtlerina", genWachtlerina);
        prop.setComment("Set to true to generate Wachtlerina naturally [default: false]");
        genWachtlerina = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtlerina", "genWachtlerinaBlacklistBiomes", genWachtlerinaBlacklistBiomes);
        prop.setComment("List of biomes Wachtlerina are blacklisted from, in the format: modid:biomeid [default: empty]");
        genWachtlerinaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtlerina", "genWachtlerinaOverrideBiomes", genWachtlerinaOverrideBiomes);
        prop.setComment("List of biomes Wachtlerina are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genWachtlerinaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Wachtlerina", "dimWachtlerina", dimWachtlerina);
        prop.setComment("List of dimension IDs Wachtlerina can generate in [default: 0]");
        dimWachtlerina = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtlerina", "minheightWachtlerina", minheightWachtlerina);
        prop.setComment("Minimum height that Wachtlerina can generate (1 to 250) [default: 1]");
        minheightWachtlerina = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtlerina", "maxheightWachtlerina", maxheightWachtlerina);
        prop.setComment("Maximum height that Wachtlerina can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightWachtlerina = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Wachtlerina", "multiplierWachtlerina", multiplierWachtlerina);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierWachtlerina = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Thucydia", "genThucydia", genThucydia);
        prop.setComment("Set to true to generate Thucydia naturally [default: false]");
        genThucydia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Thucydia", "genThucydiaBlacklistBiomes", genThucydiaBlacklistBiomes);
        prop.setComment("List of biomes Thucydia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genThucydiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Thucydia", "genThucydiaOverrideBiomes", genThucydiaOverrideBiomes);
        prop.setComment("List of biomes Thucydia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genThucydiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Thucydia", "dimThucydia", dimThucydia);
        prop.setComment("List of dimension IDs Thucydia can generate in [default: 0]");
        dimThucydia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Thucydia", "minheightThucydia", minheightThucydia);
        prop.setComment("Minimum height that Thucydia can generate (1 to 250) [default: 1]");
        minheightThucydia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Thucydia", "maxheightThucydia", maxheightThucydia);
        prop.setComment("Maximum height that Thucydia can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightThucydia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Thucydia", "multiplierThucydia", multiplierThucydia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierThucydia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Foozia", "genFoozia", genFoozia);
        prop.setComment("Set to true to generate Foozia naturally [default: false]");
        genFoozia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Foozia", "genFooziaBlacklistBiomes", genFooziaBlacklistBiomes);
        prop.setComment("List of biomes Foozia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genFooziaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Foozia", "genFooziaOverrideBiomes", genFooziaOverrideBiomes);
        prop.setComment("List of biomes Foozia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genFooziaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Foozia", "dimFoozia", dimFoozia);
        prop.setComment("List of dimension IDs Foozia can generate in [default: 0]");
        dimFoozia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Foozia", "waterFooziaHorizontal", waterFooziaHorizontal);
        prop.setComment("Distance NSEW from water that Foozia can exist and spread onto neighbouring dirt and grass (1 to 16) [default: 3]");
        waterFooziaHorizontal = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Foozia", "waterFooziaVertical", waterFooziaVertical);
        prop.setComment("Distance above water required for Foozia to exist (0 to 6) [default: 0]");
        waterFooziaVertical = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Foozia", "minheightFoozia", minheightFoozia);
        prop.setComment("Minimum height that Foozia can generate (1 to 250) [default: 1]");
        minheightFoozia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Foozia", "maxheightFoozia", maxheightFoozia);
        prop.setComment("Maximum height that Foozia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightFoozia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Foozia", "multiplierFoozia", multiplierFoozia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierFoozia = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Foozia", "spreadFoozia", spreadFoozia);
        prop.setComment("Set to true for Foozia to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadFoozia = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Rhacophyton", "genRhacophyton", genRhacophyton);
        prop.setComment("Set to true to generate Rhacophyton naturally [default: false]");
        genRhacophyton = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhacophyton", "genRhacophytonBlacklistBiomes", genRhacophytonBlacklistBiomes);
        prop.setComment("List of biomes Rhacophyton are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRhacophytonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhacophyton", "genRhacophytonOverrideBiomes", genRhacophytonOverrideBiomes);
        prop.setComment("List of biomes Rhacophyton are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genRhacophytonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Rhacophyton", "dimRhacophyton", dimRhacophyton);
        prop.setComment("List of dimension IDs Rhacophyton can generate in [default: 0]");
        dimRhacophyton = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhacophyton", "minheightRhacophyton", minheightRhacophyton);
        prop.setComment("Minimum height that Rhacophyton can generate (1 to 250) [default: 1]");
        minheightRhacophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhacophyton", "maxheightRhacophyton", maxheightRhacophyton);
        prop.setComment("Maximum height that Rhacophyton can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightRhacophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhacophyton", "multiplierRhacophyton", multiplierRhacophyton);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierRhacophyton = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Pertica", "genPertica", genPertica);
        prop.setComment("Set to true to generate Pertica naturally [default: false]");
        genPertica = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pertica", "genPerticaBlacklistBiomes", genPerticaBlacklistBiomes);
        prop.setComment("List of biomes Pertica are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPerticaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pertica", "genPerticaOverrideBiomes", genPerticaOverrideBiomes);
        prop.setComment("List of biomes Pertica are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPerticaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Pertica", "dimPertica", dimPertica);
        prop.setComment("List of dimension IDs Pertica can generate in [default: 0]");
        dimPertica = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pertica", "minheightPertica", minheightPertica);
        prop.setComment("Minimum height that Pertica can generate (1 to 250) [default: 1]");
        minheightPertica = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pertica", "maxheightPertica", maxheightPertica);
        prop.setComment("Maximum height that Pertica can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightPertica = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pertica", "multiplierPertica", multiplierPertica);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPertica = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Tetraxylopteris", "genTetraxylopteris", genTetraxylopteris);
        prop.setComment("Set to true to generate Tetraxylopteris naturally [default: false]");
        genTetraxylopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tetraxylopteris", "genTetraxylopterisBlacklistBiomes", genTetraxylopterisBlacklistBiomes);
        prop.setComment("List of biomes Tetraxylopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTetraxylopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tetraxylopteris", "genTetraxylopterisOverrideBiomes", genTetraxylopterisOverrideBiomes);
        prop.setComment("List of biomes Tetraxylopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genTetraxylopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Tetraxylopteris", "dimTetraxylopteris", dimTetraxylopteris);
        prop.setComment("List of dimension IDs Tetraxylopteris can generate in [default: 0]");
        dimTetraxylopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tetraxylopteris", "minheightTetraxylopteris", minheightTetraxylopteris);
        prop.setComment("Minimum height that Tetraxylopteris can generate (1 to 250) [default: 1]");
        minheightTetraxylopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tetraxylopteris", "maxheightTetraxylopteris", maxheightTetraxylopteris);
        prop.setComment("Maximum height that Tetraxylopteris can generate (1 to 250, or set to 0 for unlimited) [default: 85]");
        maxheightTetraxylopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tetraxylopteris", "multiplierTetraxylopteris", multiplierTetraxylopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTetraxylopteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Odontopteris", "genOdontopterisLepidodendron", genOdontopterisLepidodendron);
        prop.setComment("Set to true to generate Odontopteris naturally on Lepidodendron trees [default: false]");
        genOdontopterisLepidodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Odontopteris", "genOdontopterisDiaphorodendron", genOdontopterisDiaphorodendron);
        prop.setComment("Set to true to generate Odontopteris naturally on Diaphorodendron trees [default: false]");
        genOdontopterisDiaphorodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Odontopteris", "genOdontopterisCordaites", genOdontopterisCordaites);
        prop.setComment("Set to true to generate Odontopteris naturally on Cordaites trees [default: false]");
        genOdontopterisCordaites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Odontopteris", "genOdontopterisBothrodendron", genOdontopterisBothrodendron);
        prop.setComment("Set to true to generate Odontopteris naturally on Bothrodendron trees [default: false]");
        genOdontopterisBothrodendron = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Odontopteris", "genOdontopterisSigillaria", genOdontopterisSigillaria);
        prop.setComment("Set to true to generate Odontopteris naturally on Sigillaria trees [default: false]");
        genOdontopterisSigillaria = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Odontopteris", "genOdontopterisBlacklistBiomes", genOdontopterisBlacklistBiomes);
        prop.setComment("List of biomes Odontopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genOdontopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Odontopteris", "genOdontopterisOverrideBiomes", genOdontopterisOverrideBiomes);
        prop.setComment("List of biomes Odontopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genOdontopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Odontopteris", "dimOdontopteris", dimOdontopteris);
        prop.setComment("List of dimension IDs Odontopteris can generate in [default: 0]");
        dimOdontopteris = prop.getIntList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Lyginopteris", "genLyginopterisPitys", genLyginopterisPitys);
        prop.setComment("Set to true to generate Lyginopteris naturally on Pitys trees [default: false]");
        genLyginopterisPitys = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lyginopteris", "genLyginopterisBlacklistBiomes", genLyginopterisBlacklistBiomes);
        prop.setComment("List of biomes Lyginopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLyginopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lyginopteris", "genLyginopterisOverrideBiomes", genLyginopterisOverrideBiomes);
        prop.setComment("List of biomes Lyginopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genLyginopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Lyginopteris", "dimLyginopteris", dimLyginopteris);
        prop.setComment("List of dimension IDs Lyginopteris can generate in [default: 0]");
        dimLyginopteris = prop.getIntList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Tmesipteris", "dimTmesipteris", dimTmesipteris);
        prop.setComment("List of dimension IDs Tmesipteris can generate in [default: 0]");
        dimTmesipteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tmesipteris", "genTmesipteris", genTmesipteris);
        prop.setComment("Set to true to generate Tmesipteris naturally [default: false]");
        genTmesipteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tmesipteris", "genTmesipterisBlacklistBiomes", genTmesipterisBlacklistBiomes);
        prop.setComment("List of biomes Tmesipteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genTmesipterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tmesipteris", "genTmesipterisOverrideBiomes", genTmesipterisOverrideBiomes);
        prop.setComment("List of biomes Tmesipteris are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genTmesipterisOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Tmesipteris", "multiplierTmesipteris", multiplierTmesipteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierTmesipteris = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Epiphytic Fern", "dimFernEpiphyte", dimFernEpiphyte);
        prop.setComment("List of dimension IDs epiphytic ferns can generate in [default: 0]");
        dimFernEpiphyte = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Epiphytic Fern", "genFernEpiphyte", genFernEpiphyte);
        prop.setComment("Set to true to generate epiphytic ferns naturally [default: false]");
        genFernEpiphyte = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Epiphytic Fern", "genFernEpiphyteBlacklistBiomes", genFernEpiphyteBlacklistBiomes);
        prop.setComment("List of biomes epiphytic ferns are blacklisted from, in the format: modid:biomeid [default: empty]");
        genFernEpiphyteBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Epiphytic Fern", "genFernEpiphyteOverrideBiomes", genFernEpiphyteOverrideBiomes);
        prop.setComment("List of biomes epiphytic ferns are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genFernEpiphyteOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Epiphytic Fern", "multiplierFernEpiphyte", multiplierFernEpiphyte);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierFernEpiphyte = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Epiphytic Leptopteris", "dimLeptopterisEpiphyte", dimLeptopterisEpiphyte);
        prop.setComment("List of dimension IDs epiphytic Leptopteris can generate in [default: 0]");
        dimLeptopterisEpiphyte = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Epiphytic Leptopteris", "genLeptopterisEpiphyte", genLeptopterisEpiphyte);
        prop.setComment("Set to true to generate epiphytic Leptopteris naturally [default: false]");
        genLeptopterisEpiphyte = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Epiphytic Leptopteris", "genLeptopterisEpiphyteBlacklistBiomes", genLeptopterisEpiphyteBlacklistBiomes);
        prop.setComment("List of biomes Epiphytic Leptopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLeptopterisEpiphyteBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Epiphytic Leptopteris", "genLeptopterisEpiphyteOverrideBiomes", genLeptopterisEpiphyteOverrideBiomes);
        prop.setComment("List of biomes epiphytic Leptopteris are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genLeptopterisEpiphyteOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Epiphytic Leptopteris", "multiplierLeptopterisEpiphyte", multiplierLeptopterisEpiphyte);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierLeptopterisEpiphyte = prop.getDouble();
        propOrder.add(prop.getName());
        
        prop = cfg.get("WorldGen Moss on Wood", "dimMossWood", dimMossWood);
        prop.setComment("List of dimension IDs moss on wood can generate in [default: 0]");
        dimMossWood = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Moss on Wood", "genMossWood", genMossWood);
        prop.setComment("Set to true to generate moss on wood naturally [default: false]");
        genMossWood = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Moss on Wood", "genMossWoodBlacklistBiomes", genMossWoodBlacklistBiomes);
        prop.setComment("List of biomes moss on wood are blacklisted from, in the format: modid:biomeid [default: empty]");
        genMossWoodBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Moss on Wood", "genMossWoodOverrideBiomes", genMossWoodOverrideBiomes);
        prop.setComment("List of biomes moss on wood are forced to generate in (provided the dimension is also valid), in the format: modid:biomeid [default: empty]");
        genMossWoodOverrideBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Moss on Wood", "multiplierMossWood", multiplierMossWood);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierMossWood = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Xenocladia", "genXenocladiaArchaeopteris", genXenocladiaArchaeopteris);
        prop.setComment("Set to true to generate Xenocladia naturally on Archaeopteris trees [default: false]");
        genXenocladiaArchaeopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Xenocladia", "genXenocladiaBlacklistBiomes", genXenocladiaBlacklistBiomes);
        prop.setComment("List of biomes Xenocladia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genXenocladiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Xenocladia", "genXenocladiaOverrideBiomes", genXenocladiaOverrideBiomes);
        prop.setComment("List of biomes Xenocladia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genXenocladiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Xenocladia", "dimXenocladia", dimXenocladia);
        prop.setComment("List of dimension IDs Xenocladia can generate in [default: 0]");
        dimXenocladia = prop.getIntList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ankyropteris", "genAnkyropterisWalchia", genAnkyropterisWalchia);
        prop.setComment("Set to true to generate Ankyropteris naturally on Walchia trees [default: false]");
        genAnkyropterisWalchia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ankyropteris", "genAnkyropterisPitys", genAnkyropterisPitys);
        prop.setComment("Set to true to generate Ankyropteris naturally on Pitys trees [default: false]");
        genAnkyropterisPitys = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ankyropteris", "genAnkyropterisCalamites", genAnkyropterisCalamites);
        prop.setComment("Set to true to generate Ankyropteris naturally on Calamites trees [default: false]");
        genAnkyropterisCalamites = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ankyropteris", "genAnkyropterisSigillaria", genAnkyropterisSigillaria);
        prop.setComment("Set to true to generate Ankyropteris naturally on Sigillaria trees [default: false]");
        genAnkyropterisSigillaria = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ankyropteris", "genAnkyropterisArthropitys", genAnkyropterisArthropitys);
        prop.setComment("Set to true to generate Ankyropteris naturally on Arthropitys trees [default: false]");
        genAnkyropterisArthropitys = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ankyropteris", "genAnkyropterisBlacklistBiomes", genAnkyropterisBlacklistBiomes);
        prop.setComment("List of biomes Ankyropteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genAnkyropterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ankyropteris", "genAnkyropterisOverrideBiomes", genAnkyropterisOverrideBiomes);
        prop.setComment("List of biomes Ankyropteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genAnkyropterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Ankyropteris", "dimAnkyropteris", dimAnkyropteris);
        prop.setComment("List of dimension IDs Ankyropteris can generate in [default: 0]");
        dimAnkyropteris = prop.getIntList();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen PrimaevalGrass", "genPrimaevalGrass", genPrimaevalGrass);
        prop.setComment("Set to true to generate Primaeval Grass naturally [default: false]");
        genPrimaevalGrass = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen PrimaevalGrass", "genPrimaevalGrassBlacklistBiomes", genPrimaevalGrassBlacklistBiomes);
        prop.setComment("List of biomes Primaeval Grass are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPrimaevalGrassBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen PrimaevalGrass", "genPrimaevalGrassOverrideBiomes", genPrimaevalGrassOverrideBiomes);
        prop.setComment("List of biomes Primaeval Grass are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPrimaevalGrassOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen PrimaevalGrass", "dimPrimaevalGrass", dimPrimaevalGrass);
        prop.setComment("List of dimension IDs Primaeval Grass can generate in [default: 0]");
        dimPrimaevalGrass = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen PrimaevalGrass", "minheightPrimaevalGrass", minheightPrimaevalGrass);
        prop.setComment("Minimum height that Primaeval Grass can generate (1 to 250) [default: 1]");
        minheightPrimaevalGrass = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen PrimaevalGrass", "maxheightPrimaevalGrass", maxheightPrimaevalGrass);
        prop.setComment("Maximum height that Primaeval Grass can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightPrimaevalGrass = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen PrimaevalGrass", "multiplierPrimaevalGrass", multiplierPrimaevalGrass);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPrimaevalGrass = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen PrimaevalGrass", "spreadPrimaevalGrass", spreadPrimaevalGrass);
        prop.setComment("Set to true for PrimaevalGrass to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadPrimaevalGrass = prop.getBoolean();
        propOrder.add(prop.getName());
        
        prop = cfg.get("WorldGen SwampHorsetail", "genSwampHorsetail", genSwampHorsetail);
        prop.setComment("Set to true to generate Swamp Horsetail naturally [default: false]");
        genSwampHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen SwampHorsetail", "genSwampHorsetailBlacklistBiomes", genSwampHorsetailBlacklistBiomes);
        prop.setComment("List of biomes Swamp Horsetail are blacklisted from, in the format: modid:biomeid [default: empty]");
        genSwampHorsetailBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen SwampHorsetail", "genSwampHorsetailOverrideBiomes", genSwampHorsetailOverrideBiomes);
        prop.setComment("List of biomes Swamp Horsetail are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genSwampHorsetailOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen SwampHorsetail", "dimSwampHorsetail", dimSwampHorsetail);
        prop.setComment("List of dimension IDs Swamp Horsetail can generate in [default: 0]");
        dimSwampHorsetail = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen SwampHorsetail", "minheightSwampHorsetail", minheightSwampHorsetail);
        prop.setComment("Minimum height that Swamp Horsetail can generate (1 to 250) [default: 1]");
        minheightSwampHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen SwampHorsetail", "maxheightSwampHorsetail", maxheightSwampHorsetail);
        prop.setComment("Maximum height that Swamp Horsetail can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightSwampHorsetail = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen SwampHorsetail", "multiplierSwampHorsetail", multiplierSwampHorsetail);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierSwampHorsetail = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen SwampHorsetail", "spreadSwampHorsetail", spreadSwampHorsetail);
        prop.setComment("Set to true for SwampHorsetail to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadSwampHorsetail = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Rhynia", "genRhynia", genRhynia);
        prop.setComment("Set to true to generate Rhynia naturally [default: false]");
        genRhynia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhynia", "genRhyniaBlacklistBiomes", genRhyniaBlacklistBiomes);
        prop.setComment("List of biomes Rhynia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRhyniaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhynia", "genRhyniaOverrideBiomes", genRhyniaOverrideBiomes);
        prop.setComment("List of biomes Rhynia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genRhyniaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Rhynia", "dimRhynia", dimRhynia);
        prop.setComment("List of dimension IDs Rhynia can generate in [default: 0]");
        dimRhynia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhynia", "minheightRhynia", minheightRhynia);
        prop.setComment("Minimum height that Rhynia can generate (1 to 250) [default: 1]");
        minheightRhynia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhynia", "maxheightRhynia", maxheightRhynia);
        prop.setComment("Maximum height that Rhynia can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightRhynia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhynia", "multiplierRhynia", multiplierRhynia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierRhynia = prop.getDouble();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rhynia", "spreadRhynia", spreadRhynia);
        prop.setComment("Set to true for Rhynia to spread naturally, and to false to require bonemeal to spread [default: true]");
        spreadRhynia = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Pitys", "genPitys", genPitys);
        prop.setComment("Set to true to generate Pitys trees naturally [default: false]");
        genPitys = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pitys", "genPitysBlacklistBiomes", genPitysBlacklistBiomes);
        prop.setComment("List of biomes Pitys trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genPitysBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pitys", "genPitysOverrideBiomes", genPitysOverrideBiomes);
        prop.setComment("List of biomes Pitys are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genPitysOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Pitys", "dimPitys", dimPitys);
        prop.setComment("List of dimension IDs Pitys trees can generate in [default: 0]");
        dimPitys = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pitys", "minheightPitys", minheightPitys);
        prop.setComment("Minimum height that Pitys trees can generate (1 to 250) [default: 1]");
        minheightPitys = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pitys", "maxheightPitys", maxheightPitys);
        prop.setComment("Maximum height that Pitys trees can generate (1 to 250, or set to 0 for unlimited) [default: 75]");
        maxheightPitys = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Pitys", "multiplierPitys", multiplierPitys);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierPitys = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Arthropitys", "genArthropitys", genArthropitys);
        prop.setComment("Set to true to generate Arthropitys trees naturally [default: false]");
        genArthropitys = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Arthropitys", "genArthropitysBlacklistBiomes", genArthropitysBlacklistBiomes);
        prop.setComment("List of biomes Arthropitys trees are blacklisted from, in the format: modid:biomeid [default: empty]");
        genArthropitysBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Arthropitys", "genArthropitysOverrideBiomes", genArthropitysOverrideBiomes);
        prop.setComment("List of biomes Arthropitys are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genArthropitysOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Arthropitys", "dimArthropitys", dimArthropitys);
        prop.setComment("List of dimension IDs Arthropitys trees can generate in [default: 0]");
        dimArthropitys = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Arthropitys", "minheightArthropitys", minheightArthropitys);
        prop.setComment("Minimum height that Arthropitys trees can generate (1 to 250) [default: 1]");
        minheightArthropitys = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Arthropitys", "maxheightArthropitys", maxheightArthropitys);
        prop.setComment("Maximum height that Arthropitys trees can generate (1 to 250, or set to 0 for unlimited) [default: 75]");
        maxheightArthropitys = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Arthropitys", "multiplierArthropitys", multiplierArthropitys);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierArthropitys = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ibyka", "genIbyka", genIbyka);
        prop.setComment("Set to true to generate Ibyka naturally [default: false]");
        genIbyka = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ibyka", "genIbykaBlacklistBiomes", genIbykaBlacklistBiomes);
        prop.setComment("List of biomes Ibyka are blacklisted from, in the format: modid:biomeid [default: empty]");
        genIbykaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ibyka", "genIbykaOverrideBiomes", genIbykaOverrideBiomes);
        prop.setComment("List of biomes Ibyka are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genIbykaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Ibyka", "dimIbyka", dimIbyka);
        prop.setComment("List of dimension IDs Ibyka can generate in [default: 0]");
        dimIbyka = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ibyka", "minheightIbyka", minheightIbyka);
        prop.setComment("Minimum height that Ibyka can generate (1 to 250) [default: 1]");
        minheightIbyka = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ibyka", "maxheightIbyka", maxheightIbyka);
        prop.setComment("Maximum height that Ibyka can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightIbyka = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ibyka", "multiplierIbyka", multiplierIbyka);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierIbyka = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Calamophyton", "genCalamophyton", genCalamophyton);
        prop.setComment("Set to true to generate Calamophyton naturally [default: false]");
        genCalamophyton = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamophyton", "genCalamophytonBlacklistBiomes", genCalamophytonBlacklistBiomes);
        prop.setComment("List of biomes Calamophyton are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCalamophytonBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamophyton", "genCalamophytonOverrideBiomes", genCalamophytonOverrideBiomes);
        prop.setComment("List of biomes Calamophyton are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCalamophytonOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Calamophyton", "dimCalamophyton", dimCalamophyton);
        prop.setComment("List of dimension IDs Calamophyton can generate in [default: 0]");
        dimCalamophyton = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamophyton", "minheightCalamophyton", minheightCalamophyton);
        prop.setComment("Minimum height that Calamophyton can generate (1 to 250) [default: 1]");
        minheightCalamophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamophyton", "maxheightCalamophyton", maxheightCalamophyton);
        prop.setComment("Maximum height that Calamophyton can generate (1 to 250, or set to 0 for unlimited) [default: 75]");
        maxheightCalamophyton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Calamophyton", "multiplierCalamophyton", multiplierCalamophyton);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCalamophyton = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Cecropsis", "genCecropsis", genCecropsis);
        prop.setComment("Set to true to generate Cecropsis naturally [default: false]");
        genCecropsis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cecropsis", "genCecropsisBlacklistBiomes", genCecropsisBlacklistBiomes);
        prop.setComment("List of biomes Cecropsis are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCecropsisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cecropsis", "genCecropsisOverrideBiomes", genCecropsisOverrideBiomes);
        prop.setComment("List of biomes Cecropsis are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCecropsisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Cecropsis", "dimCecropsis", dimCecropsis);
        prop.setComment("List of dimension IDs Cecropsis can generate in [default: 0]");
        dimCecropsis = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cecropsis", "minheightCecropsis", minheightCecropsis);
        prop.setComment("Minimum height that Cecropsis can generate (1 to 250) [default: 1]");
        minheightCecropsis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cecropsis", "maxheightCecropsis", maxheightCecropsis);
        prop.setComment("Maximum height that Cecropsis can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightCecropsis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Cecropsis", "multiplierCecropsis", multiplierCecropsis);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCecropsis = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Lycopia", "genLycopia", genLycopia);
        prop.setComment("Set to true to generate Lycopia naturally [default: false]");
        genLycopia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lycopia", "genLycopiaBlacklistBiomes", genLycopiaBlacklistBiomes);
        prop.setComment("List of biomes Lycopia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLycopiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lycopia", "genLycopiaOverrideBiomes", genLycopiaOverrideBiomes);
        prop.setComment("List of biomes Lycopia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genLycopiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Lycopia", "dimLycopia", dimLycopia);
        prop.setComment("List of dimension IDs Lycopia can generate in [default: 0]");
        dimLycopia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lycopia", "minheightLycopia", minheightLycopia);
        prop.setComment("Minimum height that Lycopia can generate (1 to 250) [default: 1]");
        minheightLycopia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lycopia", "maxheightLycopia", maxheightLycopia);
        prop.setComment("Maximum height that Lycopia can generate (1 to 250, or set to 0 for unlimited) [default: 90]");
        maxheightLycopia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Lycopia", "multiplierLycopia", multiplierLycopia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierLycopia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Ctenis", "genCtenis", genCtenis);
        prop.setComment("Set to true to generate Ctenis naturally [default: false]");
        genCtenis = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ctenis", "genCtenisBlacklistBiomes", genCtenisBlacklistBiomes);
        prop.setComment("List of biomes Ctenis are blacklisted from, in the format: modid:biomeid [default: empty]");
        genCtenisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ctenis", "genCtenisOverrideBiomes", genCtenisOverrideBiomes);
        prop.setComment("List of biomes Ctenis are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genCtenisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Ctenis", "dimCtenis", dimCtenis);
        prop.setComment("List of dimension IDs Ctenis can generate in [default: 0]");
        dimCtenis = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ctenis", "minheightCtenis", minheightCtenis);
        prop.setComment("Minimum height that Ctenis can generate (1 to 250) [default: 1]");
        minheightCtenis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ctenis", "maxheightCtenis", maxheightCtenis);
        prop.setComment("Maximum height that Ctenis can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightCtenis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Ctenis", "multiplierCtenis", multiplierCtenis);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierCtenis = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Leclercqia", "genLeclercqia", genLeclercqia);
        prop.setComment("Set to true to generate Leclercqia naturally [default: false]");
        genLeclercqia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leclercqia", "genLeclercqiaBlacklistBiomes", genLeclercqiaBlacklistBiomes);
        prop.setComment("List of biomes Leclercqia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genLeclercqiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leclercqia", "genLeclercqiaOverrideBiomes", genLeclercqiaOverrideBiomes);
        prop.setComment("List of biomes Leclercqia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genLeclercqiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Leclercqia", "dimLeclercqia", dimLeclercqia);
        prop.setComment("List of dimension IDs Leclercqia can generate in [default: 0]");
        dimLeclercqia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leclercqia", "minheightLeclercqia", minheightLeclercqia);
        prop.setComment("Minimum height that Leclercqia can generate (1 to 250) [default: 1]");
        minheightLeclercqia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leclercqia", "maxheightLeclercqia", maxheightLeclercqia);
        prop.setComment("Maximum height that Leclercqia can generate (1 to 250, or set to 0 for unlimited) [default: 0]");
        maxheightLeclercqia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Leclercqia", "multiplierLeclercqia", multiplierLeclercqia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierLeclercqia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Rellimia", "genRellimia", genRellimia);
        prop.setComment("Set to true to generate Rellimia naturally [default: false]");
        genRellimia = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rellimia", "genRellimiaBlacklistBiomes", genRellimiaBlacklistBiomes);
        prop.setComment("List of biomes Rellimia are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRellimiaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rellimia", "genRellimiaOverrideBiomes", genRellimiaOverrideBiomes);
        prop.setComment("List of biomes Rellimia are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genRellimiaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Rellimia", "dimRellimia", dimRellimia);
        prop.setComment("List of dimension IDs Rellimia can generate in [default: 0]");
        dimRellimia = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rellimia", "minheightRellimia", minheightRellimia);
        prop.setComment("Minimum height that Rellimia can generate (1 to 250) [default: 1]");
        minheightRellimia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rellimia", "maxheightRellimia", maxheightRellimia);
        prop.setComment("Maximum height that Rellimia can generate (1 to 250, or set to 0 for unlimited) [default: 75]");
        maxheightRellimia = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rellimia", "multiplierRellimia", multiplierRellimia);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierRellimia = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Rufloria", "genRufloria", genRufloria);
        prop.setComment("Set to true to generate Rufloria naturally [default: false]");
        genRufloria = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rufloria", "genRufloriaBlacklistBiomes", genRufloriaBlacklistBiomes);
        prop.setComment("List of biomes Rufloria are blacklisted from, in the format: modid:biomeid [default: empty]");
        genRufloriaBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rufloria", "genRufloriaOverrideBiomes", genRufloriaOverrideBiomes);
        prop.setComment("List of biomes Rufloria are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genRufloriaOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Rufloria", "dimRufloria", dimRufloria);
        prop.setComment("List of dimension IDs Rufloria can generate in [default: 0]");
        dimRufloria = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rufloria", "minheightRufloria", minheightRufloria);
        prop.setComment("Minimum height that Rufloria can generate (1 to 250) [default: 1]");
        minheightRufloria = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rufloria", "maxheightRufloria", maxheightRufloria);
        prop.setComment("Maximum height that Rufloria can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightRufloria = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Rufloria", "multiplierRufloria", multiplierRufloria);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierRufloria = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("WorldGen Zygopteris", "genZygopteris", genZygopteris);
        prop.setComment("Set to true to generate Zygopteris naturally [default: false]");
        genZygopteris = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zygopteris", "genZygopterisBlacklistBiomes", genZygopterisBlacklistBiomes);
        prop.setComment("List of biomes Zygopteris are blacklisted from, in the format: modid:biomeid [default: empty]");
        genZygopterisBlacklistBiomes = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zygopteris", "genZygopterisOverrideBiomes", genZygopterisOverrideBiomes);
        prop.setComment("List of biomes Zygopteris are forced to generate in provided the dimension is also valid (this will override the global blacklist setting), in the format: modid:biomeid [default: empty]");
        genZygopterisOverrideBiomes = prop.getStringList();
        prop = cfg.get("WorldGen Zygopteris", "dimZygopteris", dimZygopteris);
        prop.setComment("List of dimension IDs Zygopteris can generate in [default: 0]");
        dimZygopteris = prop.getIntList();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zygopteris", "minheightZygopteris", minheightZygopteris);
        prop.setComment("Minimum height that Zygopteris can generate (1 to 250) [default: 1]");
        minheightZygopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zygopteris", "maxheightZygopteris", maxheightZygopteris);
        prop.setComment("Maximum height that Zygopteris can generate (1 to 250, or set to 0 for unlimited) [default: 100]");
        maxheightZygopteris = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("WorldGen Zygopteris", "multiplierZygopteris", multiplierZygopteris);
        prop.setComment("Number to multiply the spawn chance by (eg. 0.5 will halve the chance, and 2 will double it, etc., up to some fixed internal values) [default: 1]");
        multiplierZygopteris = prop.getDouble();
        propOrder.add(prop.getName());


        boolean changed = false;
        if (cfg.hasChanged()) {
            cfg.save();
            changed = true;
        }

        return changed;
    }

    public static boolean syncConfigGeneral() {
        List<String> propOrder = Lists.newArrayList();
        Property prop = cfg.get("Global World-Gen", "showTooltips", showTooltips);
        prop.setComment("Shows useful, searchable tooltips on relevant items [default: true]");
        showTooltips = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global Mobs", "doLowRes", doLowRes);
        prop.setComment("User lower-resolution textures for some of the smaller mobs so that their style fits in better [default: false]");
        doLowRes = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global Mobs", "attackPlayerAlways", attackPlayerAlways);
        prop.setComment("For mobs which can attack players, always attack players, regardless of the mob's health [default: false]");
        attackPlayerAlways = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global Mobs", "attackHealth", attackHealth);
        prop.setComment("Mobs which can hunt will only hunt prey if their health is under this percentage of full (0-100) [default: 90]");
        attackHealth = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "adultAge", adultAge);
        prop.setComment("Ageable mobs will behave as adults once they are at least this percentage of full age (hunting, dropping eggs, etc.). This does nto affect models/textures. [default: 75]");
        adultAge = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "doMultiplyMobs", doMultiplyMobs);
        prop.setComment("Mobs will try to multiply every 1-2 days even without breeding them [default: false]");
        doMultiplyMobs = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "dimCambrian", dimCambrian);
        prop.setComment("Dimension number of the Cambrian dimension. Do not change this unless you get errors [default: -79]");
        dimCambrian = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimCambrianMobsBespoke", dimCambrianMobsBespoke);
        prop.setComment("List of additional mobs which can be found in the seas of the Cambrian dimension. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimCambrianMobsBespoke = prop.getStringList();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "dimPrecambrian", dimPrecambrian);
        prop.setComment("Dimension number of the Precambrian dimension. Do not change this unless you get errors [default: -78]");
        dimPrecambrian = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPrecambrianMobsBespoke", dimPrecambrianMobsBespoke);
        prop.setComment("List of additional mobs which can be found in the Precambrian dimension. In the format: modid:mobid:maxspawn:weight [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn) [default: empty]");
        dimPrecambrianMobsBespoke = prop.getStringList();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "dimOrdovicianSilurian", dimOrdovicianSilurian);
        prop.setComment("Dimension number of the Ordovician and Silurian dimension. Do not change this unless you get errors [default: -80]");
        dimOrdovicianSilurian = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimOrdovicianSilurianMobsOceanBespoke", dimOrdovicianSilurianMobsOceanBespoke);
        prop.setComment("List of additional mobs which can be found in the Ordovician and Silurian dimension ocean. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimOrdovicianSilurianMobsOceanBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimOrdovicianSilurianMobsOceanIceBespoke", dimOrdovicianSilurianMobsOceanIceBespoke);
        prop.setComment("List of additional mobs which can be found in the Ordovician and Silurian dimension ice ocean. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimOrdovicianSilurianMobsOceanIceBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimOrdovicianSilurianMobsLandBespoke", dimOrdovicianSilurianMobsLandBespoke);
        prop.setComment("List of additional mobs which can be found in the Ordovician and Silurian dimension on land. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimOrdovicianSilurianMobsLandBespoke = prop.getStringList();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "dimDevonian", dimDevonian);
        prop.setComment("Dimension number of the Devonian dimension. Do not change this unless you get errors [default: -81]");
        dimDevonian = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimDevonianMobsForestBespoke", dimDevonianMobsForestBespoke);
        prop.setComment("List of additional mobs which can be found in the Devonian dimension forests and floodplains. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimDevonianMobsForestBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimDevonianMobsOceanBespoke", dimDevonianMobsOceanBespoke);
        prop.setComment("List of additional mobs which can be found in the Devonian dimension oceans. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimDevonianMobsOceanBespoke = prop.getStringList();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "dimCarboniferous", dimCarboniferous);
        prop.setComment("Dimension number of the Carboniferous dimension. Do not change this unless you get errors [default: -82]");
        dimCarboniferous = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimCarboniferousMobsSwampBespoke", dimCarboniferousMobsSwampBespoke);
        prop.setComment("List of mobs which can be found in the Carboniferous dimension swamps. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimCarboniferousMobsSwampBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimCarboniferousMobsOceanBespoke", dimCarboniferousMobsOceanBespoke);
        prop.setComment("List of mobs which can be found in the Carboniferous dimension oceans. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimCarboniferousMobsOceanBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimCarboniferousMobsIceBespoke", dimCarboniferousMobsIceBespoke);
        prop.setComment("List of mobs which can be found in the Carboniferous dimension polar desert. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimCarboniferousMobsIceBespoke = prop.getStringList();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "dimPermian", dimPermian);
        prop.setComment("Dimension number of the Permian dimension. Do not change this unless you get errors [default: -83]");
        dimPermian = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsGlossopterisBespoke", dimPermianMobsGlossopterisBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension Glossopteris forests. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsGlossopterisBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsWetlandsBespoke", dimPermianMobsWetlandsBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension swamps. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsWetlandsBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsOceanBespoke", dimPermianMobsOceanBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension oceans. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsOceanBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsAridLandsBespoke", dimPermianMobsAridLandsBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension arid lands. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsAridLandsBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsRiverBespoke", dimPermianMobsRiverBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension rivers. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsRiverBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsLowlandsBespoke", dimPermianMobsLowlandsBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension lowlands. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsLowlandsBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsLowlandForestBespoke", dimPermianMobsLowlandForestBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension lowland forests. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsLowlandForestBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsFloodbasaltBespoke", dimPermianMobsFloodbasaltBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension flood basalt. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsFloodbasaltBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsHighlandsBespoke", dimPermianMobsHighlandsBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension highlands. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsHighlandsBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsDesertBespoke", dimPermianMobsDesertBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension desert. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsDesertBespoke = prop.getStringList();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "dimPermianMobsMountainsBespoke", dimPermianMobsMountainsBespoke);
        prop.setComment("List of mobs which can be found in the Permian dimension mountains. In the format: modid:mobid:maxspawn:weight:locationid (maxspawn [1-20] is the maximum number which can spawn as a group in the same chunk; weight [0-100] is how likely a group is to spawn; locationid can be either 1, 2 or 3 as these three location options for spawns: 1 = land, 2 = deep water [>4 blocks]; 3 = shallow water [<4 blocks]) [default: empty]");
        dimPermianMobsMountainsBespoke = prop.getStringList();
        propOrder.add(prop.getName());


        prop = cfg.get("Global World-Gen", "dimDimensionScaler", dimDimensionScaler);
        prop.setComment("This value controls how many blocks you move in a Prehistoric dimension when you move 1 block in the overworld (0.01 to 100) [default: 10]");
        dimDimensionScaler = prop.getDouble();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "dimTriassic", dimTriassic);
        prop.setComment("Dimension number of the Triassic dimension. Do not change this unless you get errors [default: -84]");
        dimTriassic = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "dimJurassic", dimJurassic);
        prop.setComment("Dimension number of the Jurassic dimension. Do not change this unless you get errors [default: -84]");
        dimJurassic = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "genFossil", genFossil);
        prop.setComment("Set to false to disable the world-gen of this mod's fossil blocks. [default: true]");
        genFossil = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "modFire", modFire);
        prop.setComment("Set to false to disable this mod's custom Carboniferous fire (in case it is causing issues with other mods). [default: true]");
        modFire = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "genPalaeobotanist", genPalaeobotanist);
        prop.setComment("Percentage chance that a Palaeobotanist house will generate in a village. [default: 50]");
        genPalaeobotanist = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("Global Mobs", "doSpawnsPrehistoricFloraDefault", doSpawnsPrehistoricFloraDefault);
        prop.setComment("Set to false to disable the default mob-spawns from this mod. [default: true]");
        doSpawnsPrehistoricFloraDefault = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "doSpawnsFossilsArcheology", doSpawnsFossilsArcheology);
        prop.setComment("Set to true add in appropriate mob-spawns from the mod Fossils and Archeology Revival [v.8.05]. [default: false]");
        doSpawnsFossilsArcheology = prop.getBoolean();
        propOrder.add(prop.getName());
        prop = cfg.get("Global Mobs", "doSpawnsReborn", doSpawnsReborn);
        prop.setComment("Set to true add in appropriate mob-spawns from the mod Jurassic World Reborn [v.1.1.1]. [default: false]");
        doSpawnsReborn = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global Mobs", "renderAnimations", renderAnimations);
        prop.setComment("Set to true to animate block-like mobs fully, or to false to render them as static blocks (useful for low performance graphics cards or for conflicts with Optifine). [default: true]");
        renderAnimations = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "doFog", doFog);
        prop.setComment("Set to true to render custom fog effects in the Prehistoric dimensions. [default: true]");
        doFog = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Global World-Gen", "fixZirconGlass", fixZirconGlass);
        prop.setComment("Set to false to disable the mod's zircon glass attempting to fix water rendering textures when a water plant is placed against it. [default: true]");
        fixZirconGlass = prop.getBoolean();
        propOrder.add(prop.getName());

        prop = cfg.get("Mobs", "waterHibbertopterus", waterHibbertopterus);
        prop.setComment("Distance NSEW from water that Hibbertopterus can go to without taking suffocation damage (1 to 16) [default: 2]");
        waterHibbertopterus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterLimnoscelis", waterLimnoscelis);
        prop.setComment("Distance NSEW from water that Limnoscelis can go to without taking suffocation damage (1 to 16) [default: 10]");
        waterLimnoscelis = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterAcanthostega", waterAcanthostega);
        prop.setComment("Distance NSEW from water that Acathostega can go to without taking suffocation damage (1 to 16) [default: 2]");
        waterAcanthostega = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterPederpes", waterPederpes);
        prop.setComment("Distance NSEW from water that Pederpes can go to without taking suffocation damage (1 to 16) [default: 16]");
        waterPederpes = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterPlatyhystrix", waterPlatyhystrix);
        prop.setComment("Distance NSEW from water that Platyhystrix can go to without taking suffocation damage (1 to 16) [default: 16]");
        waterPlatyhystrix = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterEryops", waterEryops);
        prop.setComment("Distance NSEW from water that Eryops can go to without taking suffocation damage (1 to 16) [default: 4]");
        waterEryops = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterAcanthostomatops", waterAcanthostomatops);
        prop.setComment("Distance NSEW from water that Acanthostomatops can go to without taking suffocation damage (1 to 16) [default: 6]");
        waterAcanthostomatops = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterProterogyrinus", waterProterogyrinus);
        prop.setComment("Distance NSEW from water that Proterogyrinus can go to without taking suffocation damage (1 to 16) [default: 7]");
        waterProterogyrinus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterKalbarria", waterKalbarria);
        prop.setComment("Distance NSEW from water that Kalbarria can go to without taking suffocation damage (1 to 16) [default: 2]");
        waterKalbarria = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterAmphibamus", waterAmphibamus);
        prop.setComment("Distance NSEW from water that Amphibamus can go to without taking suffocation damage (1 to 16) [default: 8]");
        waterAmphibamus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterIchthyostega", waterIchthyostega);
        prop.setComment("Distance NSEW from water that Ichthyostega can go to without taking suffocation damage (1 to 16) [default: 6]");
        waterIchthyostega = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterPrionosuchus", waterPrionosuchus);
        prop.setComment("Distance NSEW from water that Prionosuchus can go to without taking suffocation damage (1 to 16) [default: 6]");
        waterPrionosuchus = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("Mobs", "waterPholiderpeton", waterPholiderpeton);
        prop.setComment("Distance NSEW from water that Pholiderpeton can go to without taking suffocation damage (1 to 16) [default: 7]");
        waterPholiderpeton = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterMegalocephalus", waterMegalocephalus);
        prop.setComment("Distance NSEW from water that Megalocephalus can go to without taking suffocation damage (1 to 16) [default: 4]");
        waterMegalocephalus = prop.getInt();
        propOrder.add(prop.getName());
        prop = cfg.get("Mobs", "waterSpathicephalus", waterSpathicephalus);
        prop.setComment("Distance NSEW from water that Spathicephalus can go to without taking suffocation damage (1 to 16) [default: 4]");
        waterSpathicephalus = prop.getInt();
        propOrder.add(prop.getName());

        prop = cfg.get("Mobs", "colourPulmonoscorpius", colourPulmonoscorpius);
        prop.setComment("Render the Pulmonoscorpius in a colourful, \"Prehistoric Park\"-inspired texture [default: true]");
        colourPulmonoscorpius = prop.getBoolean();
        propOrder.add(prop.getName());


        boolean changed = false;
        if (cfg.hasChanged()) {
            cfg.save();
            changed = true;
        }

        return changed;
    }
}
